Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> phpSyntax
Rule 1     phpSyntax -> inicio codigo fin
Rule 2     phpSyntax -> inicio fin
Rule 3     codigo -> algoritmo
Rule 4     codigo -> algoritmo codigo
Rule 5     codigo -> 
Rule 6     inicio -> INICIO
Rule 7     fin -> FIN
Rule 8     algoritmo -> asignacion
Rule 9     algoritmo -> declaracion
Rule 10    algoritmo -> comparacion
Rule 11    algoritmo -> condicionalIF
Rule 12    algoritmo -> iteracionFOR
Rule 13    algoritmo -> bucleWHILE
Rule 14    algoritmo -> bucleDO_WHILE
Rule 15    algoritmo -> indexacion
Rule 16    algoritmo -> echo
Rule 17    algoritmo -> list
Rule 18    algoritmo -> terminar
Rule 19    algoritmo -> funciones
Rule 20    algoritmo -> funcCOD
Rule 21    algoritmo -> ingresoDatos
Rule 22    algoritmo -> arrayfunctionsC
Rule 23    asignacion -> ambito multiVariable IGUAL expresion PTOCO
Rule 24    asignacion -> multiVariable IGUAL expresion PTOCO
Rule 25    asignacion -> CONST multiConstante IGUAL expresion PTOCO
Rule 26    asignacion -> multiConstante IGUAL expresion PTOCO
Rule 27    declaracion -> ambito multiVariable PTOCO
Rule 28    declaracion -> multiVariable PTOCO
Rule 29    declaracion -> CONST multiConstante PTOCO
Rule 30    declaracion -> multiConstante PTOCO
Rule 31    multiVariable -> VARIABLE
Rule 32    multiVariable -> VARIABLE COMA multiVariable
Rule 33    multiConstante -> VARIABLEFUNC
Rule 34    multiConstante -> VARIABLEFUNC COMA multiConstante
Rule 35    ambito -> STATIC
Rule 36    ambito -> VAR
Rule 37    ambito -> GLOBAL
Rule 38    ambito -> CONST
Rule 39    comparacion -> valor operadorC expresion PTOCO
Rule 40    comparacion -> valor operadorM expresion PTOCO
Rule 41    comparacion -> valor operadorL expresion PTOCO
Rule 42    multiIngreso -> VARIABLE
Rule 43    multiIngreso -> expresion
Rule 44    multiIngreso -> VARIABLE COMA multiIngreso
Rule 45    multiIngreso -> expresion COMA multiIngreso
Rule 46    funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
Rule 47    funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO
Rule 48    funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER
Rule 49    Arreglo -> ARRAY PIZQ innerColection PDER
Rule 50    Asig -> expresion FLECHA expresion
Rule 51    innerColection -> expresion
Rule 52    innerColection -> Asig
Rule 53    innerColection -> expresion COMA innerColection
Rule 54    innerColection -> Asig COMA innerColection
Rule 55    expresion -> valor
Rule 56    expresion -> expresion_aritmetica
Rule 57    expresion -> expresion_logica
Rule 58    expresion -> expresion_comparativa
Rule 59    expresion -> VARIABLE
Rule 60    expresion -> funcAsig
Rule 61    expresion -> arrayfunctions
Rule 62    expresion -> Arreglo
Rule 63    avInner -> Arreglo
Rule 64    avInner -> VARIABLE
Rule 65    arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO
Rule 66    arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO
Rule 67    arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO
Rule 68    arrayfunctions -> KEY PIZQ avInner PDER
Rule 69    arrayfunctions -> CURRENT PIZQ avInner PDER
Rule 70    arrayfunctions -> NEXT PIZQ avInner PDER
Rule 71    expresion_aritmetica -> valor operadorM expresion
Rule 72    expresion_logica -> valor operadorL expresion
Rule 73    expresion_logica -> booleano
Rule 74    expresion_comparativa -> expresion operadorC expresion
Rule 75    condicion -> expresion_logica
Rule 76    condicion -> expresion_comparativa
Rule 77    retorno -> RETURN multiVariable PTOCO
Rule 78    retorno -> RETURN expresion PTOCO
Rule 79    dentroFUNC -> retorno
Rule 80    dentroFUNC -> codigo
Rule 81    funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
Rule 82    funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
Rule 83    operadorM -> MAS
Rule 84    operadorM -> RESTA
Rule 85    operadorM -> PROD
Rule 86    operadorM -> DIV
Rule 87    operadorM -> MOD
Rule 88    operadorM -> POTENCIA
Rule 89    operadorC -> MAYOR
Rule 90    operadorC -> MENOR
Rule 91    operadorC -> COMPARACION
Rule 92    operadorC -> IDENTICO
Rule 93    operadorC -> DIFERENTE
Rule 94    operadorC -> NOIDENTICO
Rule 95    operadorC -> MENOROIGUAL
Rule 96    operadorC -> MAYOROIGUAL
Rule 97    operadorC -> NAVEESPACIAL
Rule 98    terminar -> BREAK PTOCO
Rule 99    operadorL -> AND
Rule 100   operadorL -> XOR
Rule 101   operadorL -> OR
Rule 102   operadorL -> NOT
Rule 103   valor -> INTEGER
Rule 104   valor -> booleano
Rule 105   valor -> STRING
Rule 106   valor -> FLOAT
Rule 107   valor -> VARIABLE
Rule 108   valor -> BOOLEAN
Rule 109   valor -> ingresoDatos
Rule 110   valor -> arrayfunctions
Rule 111   valor -> Arreglo
Rule 112   valor -> NULL
Rule 113   ingresoDatos -> GET CIZQ STRING CDER
Rule 114   ingresoDatos -> POST CIZQ STRING CDER
Rule 115   booleano -> TRUE
Rule 116   booleano -> FALSE
Rule 117   adicion -> MAS MAS VARIABLE
Rule 118   adicion -> MENOS MENOS VARIABLE
Rule 119   adicion -> VARIABLE MAS MAS
Rule 120   adicion -> VARIABLE MENOS MENOS
Rule 121   condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER
Rule 122   condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
Rule 123   condicionalIF -> IF PIZQ condicion PDER codigo
Rule 124   condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE
Rule 125   condicionalELSE -> ELSE LIZQ codigo LDER
Rule 126   condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
Rule 127   condicionalELSE -> ELSE codigo
Rule 128   condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE
Rule 129   iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
Rule 130   iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
Rule 131   bucleWHILE -> WHILE PIZQ condicion PDER codigo
Rule 132   bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER
Rule 133   bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
Rule 134   bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
Rule 135   list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
Rule 136   valoresList -> VARIABLE COMA valoresList
Rule 137   valoresList -> VARIABLE
Rule 138   indexacion -> VARIABLE CIZQ INTEGER CDER
Rule 139   indexacion -> VARIABLE CIZQ RESTA INTEGER CDER
Rule 140   indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL
Rule 141   indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
Rule 142   echo -> ECHO VARIABLE PTOCO
Rule 143   echo -> ECHO expresion PTOCO

Terminals, with rules where they appear

                     : 5
AND                  : 99
ARRAY                : 49
BOOLEAN              : 108
BREAK                : 98
CDER                 : 113 114 138 139 140 141
CIZQ                 : 113 114 138 139 140 141
COMA                 : 32 34 44 45 53 54 136
COMPARACION          : 91
CONST                : 25 29 38
CURRENT              : 66 69
DIFERENTE            : 93
DIV                  : 86
DO                   : 133 134
ECHO                 : 142 143
ELSE                 : 125 127
ELSEIF               : 126 128
FALSE                : 116
FIN                  : 7
FLECHA               : 50
FLOAT                : 106
FOR                  : 129 130
FUNCTION             : 81 82
FUSIONNULL           : 140 141
GET                  : 113
GLOBAL               : 37
IDENTICO             : 92
IF                   : 121 122 123 124
IGUAL                : 23 24 25 26 135
INICIO               : 6
INTEGER              : 103 138 139 140 141
KEY                  : 65 68
LDER                 : 81 82 121 122 125 126 130 132 133 134 134
LIST                 : 135
LIZQ                 : 81 82 121 122 125 126 130 132 133 134 134
MAS                  : 83 117 117 119 119
MAYOR                : 89
MAYOROIGUAL          : 96
MENOR                : 90
MENOROIGUAL          : 95
MENOS                : 118 118 120 120
MOD                  : 87
NAVEESPACIAL         : 97
NEXT                 : 67 70
NOIDENTICO           : 94
NOT                  : 102
NULL                 : 112
OR                   : 101
PDER                 : 46 47 48 49 65 66 67 68 69 70 81 82 121 122 123 124 126 128 129 130 131 132 133 134 135
PIZQ                 : 46 47 48 49 65 66 67 68 69 70 81 82 121 122 123 124 126 128 129 130 131 132 133 134 135
POST                 : 114
POTENCIA             : 88
PROD                 : 85
PTOCO                : 23 24 25 26 27 28 29 30 39 40 41 46 47 65 66 67 77 78 98 129 130 135 142 143
RESTA                : 84 139 141
RETURN               : 77 78
STATIC               : 35
STRING               : 105 113 114
TRUE                 : 115
VAR                  : 36
VARIABLE             : 31 32 42 44 59 64 107 117 118 119 120 135 136 137 138 139 140 141 142
VARIABLEFUNC         : 33 34 46 47 48 81 82
WHILE                : 131 132 133 134
XOR                  : 100
error                : 

Nonterminals, with rules where they appear

Arreglo              : 62 63 111
Asig                 : 52 54
adicion              : 129 130
algoritmo            : 3 4
ambito               : 23 27
arrayfunctions       : 61 110
arrayfunctionsC      : 22
asignacion           : 8 129 130
avInner              : 65 66 67 68 69 70
booleano             : 73 104
bucleDO_WHILE        : 14
bucleWHILE           : 13
codigo               : 1 4 80 121 122 123 124 125 126 127 128 129 130 131 132 133 133 134 134
comparacion          : 10
condicion            : 121 122 123 124 126 128 129 130 131 132 133 134
condicionalELSE      : 122 124 126 128
condicionalIF        : 11
declaracion          : 9
dentroFUNC           : 81 82
echo                 : 16
expresion            : 23 24 25 26 39 40 41 43 45 50 50 51 53 71 72 74 74 78 143
expresion_aritmetica : 56
expresion_comparativa : 58 76
expresion_logica     : 57 75
fin                  : 1 2
funcAsig             : 60
funcCOD              : 20
funciones            : 19
indexacion           : 15
ingresoDatos         : 21 109
inicio               : 1 2
innerColection       : 49 53 54
iteracionFOR         : 12
list                 : 17
multiConstante       : 25 26 29 30 34
multiIngreso         : 44 45 46
multiVariable        : 23 24 27 28 32 48 77 81
operadorC            : 39 74
operadorL            : 41 72
operadorM            : 40 71
phpSyntax            : 0
retorno              : 79
terminar             : 18
valor                : 39 40 41 55 71 72
valoresList          : 135 136

Parsing method: LALR

state 0

    (0) S' -> . phpSyntax
    (1) phpSyntax -> . inicio codigo fin
    (2) phpSyntax -> . inicio fin
    (6) inicio -> . INICIO

    INICIO          shift and go to state 3

    phpSyntax                      shift and go to state 1
    inicio                         shift and go to state 2

state 1

    (0) S' -> phpSyntax .



state 2

    (1) phpSyntax -> inicio . codigo fin
    (2) phpSyntax -> inicio . fin
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (7) fin -> . FIN
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    FIN             shift and go to state 8
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 4
    fin                            shift and go to state 5
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 3

    (6) inicio -> INICIO .

                    reduce using rule 6 (inicio -> INICIO .)
    FIN             reduce using rule 6 (inicio -> INICIO .)
    CONST           reduce using rule 6 (inicio -> INICIO .)
    IF              reduce using rule 6 (inicio -> INICIO .)
    FOR             reduce using rule 6 (inicio -> INICIO .)
    WHILE           reduce using rule 6 (inicio -> INICIO .)
    DO              reduce using rule 6 (inicio -> INICIO .)
    VARIABLE        reduce using rule 6 (inicio -> INICIO .)
    ECHO            reduce using rule 6 (inicio -> INICIO .)
    LIST            reduce using rule 6 (inicio -> INICIO .)
    BREAK           reduce using rule 6 (inicio -> INICIO .)
    FUNCTION        reduce using rule 6 (inicio -> INICIO .)
    VARIABLEFUNC    reduce using rule 6 (inicio -> INICIO .)
    GET             reduce using rule 6 (inicio -> INICIO .)
    POST            reduce using rule 6 (inicio -> INICIO .)
    KEY             reduce using rule 6 (inicio -> INICIO .)
    CURRENT         reduce using rule 6 (inicio -> INICIO .)
    NEXT            reduce using rule 6 (inicio -> INICIO .)
    STATIC          reduce using rule 6 (inicio -> INICIO .)
    VAR             reduce using rule 6 (inicio -> INICIO .)
    GLOBAL          reduce using rule 6 (inicio -> INICIO .)
    INTEGER         reduce using rule 6 (inicio -> INICIO .)
    STRING          reduce using rule 6 (inicio -> INICIO .)
    FLOAT           reduce using rule 6 (inicio -> INICIO .)
    BOOLEAN         reduce using rule 6 (inicio -> INICIO .)
    NULL            reduce using rule 6 (inicio -> INICIO .)
    TRUE            reduce using rule 6 (inicio -> INICIO .)
    FALSE           reduce using rule 6 (inicio -> INICIO .)
    ARRAY           reduce using rule 6 (inicio -> INICIO .)


state 4

    (1) phpSyntax -> inicio codigo . fin
    (7) fin -> . FIN

    FIN             shift and go to state 8

    fin                            shift and go to state 58

state 5

    (2) phpSyntax -> inicio fin .

    $end            reduce using rule 2 (phpSyntax -> inicio fin .)


state 6

    (3) codigo -> algoritmo .
    (4) codigo -> algoritmo . codigo
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

  ! shift/reduce conflict for  resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for LIST resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for VARIABLEFUNC resolved as shift
  ! shift/reduce conflict for GET resolved as shift
  ! shift/reduce conflict for POST resolved as shift
  ! shift/reduce conflict for KEY resolved as shift
  ! shift/reduce conflict for CURRENT resolved as shift
  ! shift/reduce conflict for NEXT resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for NULL resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
  ! shift/reduce conflict for ARRAY resolved as shift
    FIN             reduce using rule 3 (codigo -> algoritmo .)
    LDER            reduce using rule 3 (codigo -> algoritmo .)
    ELSE            reduce using rule 3 (codigo -> algoritmo .)
    ELSEIF          reduce using rule 3 (codigo -> algoritmo .)
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

  !                 [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! CONST           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! IF              [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FOR             [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! WHILE           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! DO              [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! VARIABLE        [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! ECHO            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! LIST            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! BREAK           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FUNCTION        [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! VARIABLEFUNC    [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! GET             [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! POST            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! KEY             [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! CURRENT         [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! NEXT            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! STATIC          [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! VAR             [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! GLOBAL          [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! INTEGER         [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! STRING          [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FLOAT           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! BOOLEAN         [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! NULL            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! TRUE            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FALSE           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! ARRAY           [ reduce using rule 3 (codigo -> algoritmo .) ]

    algoritmo                      shift and go to state 6
    codigo                         shift and go to state 59
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 7

    (5) codigo ->  .

    FIN             reduce using rule 5 (codigo ->  .)
    LDER            reduce using rule 5 (codigo ->  .)
    ELSE            reduce using rule 5 (codigo ->  .)
    ELSEIF          reduce using rule 5 (codigo ->  .)
                    reduce using rule 5 (codigo ->  .)
    CONST           reduce using rule 5 (codigo ->  .)
    IF              reduce using rule 5 (codigo ->  .)
    FOR             reduce using rule 5 (codigo ->  .)
    WHILE           reduce using rule 5 (codigo ->  .)
    DO              reduce using rule 5 (codigo ->  .)
    VARIABLE        reduce using rule 5 (codigo ->  .)
    ECHO            reduce using rule 5 (codigo ->  .)
    LIST            reduce using rule 5 (codigo ->  .)
    BREAK           reduce using rule 5 (codigo ->  .)
    FUNCTION        reduce using rule 5 (codigo ->  .)
    VARIABLEFUNC    reduce using rule 5 (codigo ->  .)
    GET             reduce using rule 5 (codigo ->  .)
    POST            reduce using rule 5 (codigo ->  .)
    KEY             reduce using rule 5 (codigo ->  .)
    CURRENT         reduce using rule 5 (codigo ->  .)
    NEXT            reduce using rule 5 (codigo ->  .)
    STATIC          reduce using rule 5 (codigo ->  .)
    VAR             reduce using rule 5 (codigo ->  .)
    GLOBAL          reduce using rule 5 (codigo ->  .)
    INTEGER         reduce using rule 5 (codigo ->  .)
    STRING          reduce using rule 5 (codigo ->  .)
    FLOAT           reduce using rule 5 (codigo ->  .)
    BOOLEAN         reduce using rule 5 (codigo ->  .)
    NULL            reduce using rule 5 (codigo ->  .)
    TRUE            reduce using rule 5 (codigo ->  .)
    FALSE           reduce using rule 5 (codigo ->  .)
    ARRAY           reduce using rule 5 (codigo ->  .)


state 8

    (7) fin -> FIN .

    $end            reduce using rule 7 (fin -> FIN .)


state 9

    (8) algoritmo -> asignacion .

                    reduce using rule 8 (algoritmo -> asignacion .)
    CONST           reduce using rule 8 (algoritmo -> asignacion .)
    IF              reduce using rule 8 (algoritmo -> asignacion .)
    FOR             reduce using rule 8 (algoritmo -> asignacion .)
    WHILE           reduce using rule 8 (algoritmo -> asignacion .)
    DO              reduce using rule 8 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 8 (algoritmo -> asignacion .)
    ECHO            reduce using rule 8 (algoritmo -> asignacion .)
    LIST            reduce using rule 8 (algoritmo -> asignacion .)
    BREAK           reduce using rule 8 (algoritmo -> asignacion .)
    FUNCTION        reduce using rule 8 (algoritmo -> asignacion .)
    VARIABLEFUNC    reduce using rule 8 (algoritmo -> asignacion .)
    GET             reduce using rule 8 (algoritmo -> asignacion .)
    POST            reduce using rule 8 (algoritmo -> asignacion .)
    KEY             reduce using rule 8 (algoritmo -> asignacion .)
    CURRENT         reduce using rule 8 (algoritmo -> asignacion .)
    NEXT            reduce using rule 8 (algoritmo -> asignacion .)
    STATIC          reduce using rule 8 (algoritmo -> asignacion .)
    VAR             reduce using rule 8 (algoritmo -> asignacion .)
    GLOBAL          reduce using rule 8 (algoritmo -> asignacion .)
    INTEGER         reduce using rule 8 (algoritmo -> asignacion .)
    STRING          reduce using rule 8 (algoritmo -> asignacion .)
    FLOAT           reduce using rule 8 (algoritmo -> asignacion .)
    BOOLEAN         reduce using rule 8 (algoritmo -> asignacion .)
    NULL            reduce using rule 8 (algoritmo -> asignacion .)
    TRUE            reduce using rule 8 (algoritmo -> asignacion .)
    FALSE           reduce using rule 8 (algoritmo -> asignacion .)
    ARRAY           reduce using rule 8 (algoritmo -> asignacion .)
    FIN             reduce using rule 8 (algoritmo -> asignacion .)
    LDER            reduce using rule 8 (algoritmo -> asignacion .)
    ELSE            reduce using rule 8 (algoritmo -> asignacion .)
    ELSEIF          reduce using rule 8 (algoritmo -> asignacion .)


state 10

    (9) algoritmo -> declaracion .

                    reduce using rule 9 (algoritmo -> declaracion .)
    CONST           reduce using rule 9 (algoritmo -> declaracion .)
    IF              reduce using rule 9 (algoritmo -> declaracion .)
    FOR             reduce using rule 9 (algoritmo -> declaracion .)
    WHILE           reduce using rule 9 (algoritmo -> declaracion .)
    DO              reduce using rule 9 (algoritmo -> declaracion .)
    VARIABLE        reduce using rule 9 (algoritmo -> declaracion .)
    ECHO            reduce using rule 9 (algoritmo -> declaracion .)
    LIST            reduce using rule 9 (algoritmo -> declaracion .)
    BREAK           reduce using rule 9 (algoritmo -> declaracion .)
    FUNCTION        reduce using rule 9 (algoritmo -> declaracion .)
    VARIABLEFUNC    reduce using rule 9 (algoritmo -> declaracion .)
    GET             reduce using rule 9 (algoritmo -> declaracion .)
    POST            reduce using rule 9 (algoritmo -> declaracion .)
    KEY             reduce using rule 9 (algoritmo -> declaracion .)
    CURRENT         reduce using rule 9 (algoritmo -> declaracion .)
    NEXT            reduce using rule 9 (algoritmo -> declaracion .)
    STATIC          reduce using rule 9 (algoritmo -> declaracion .)
    VAR             reduce using rule 9 (algoritmo -> declaracion .)
    GLOBAL          reduce using rule 9 (algoritmo -> declaracion .)
    INTEGER         reduce using rule 9 (algoritmo -> declaracion .)
    STRING          reduce using rule 9 (algoritmo -> declaracion .)
    FLOAT           reduce using rule 9 (algoritmo -> declaracion .)
    BOOLEAN         reduce using rule 9 (algoritmo -> declaracion .)
    NULL            reduce using rule 9 (algoritmo -> declaracion .)
    TRUE            reduce using rule 9 (algoritmo -> declaracion .)
    FALSE           reduce using rule 9 (algoritmo -> declaracion .)
    ARRAY           reduce using rule 9 (algoritmo -> declaracion .)
    FIN             reduce using rule 9 (algoritmo -> declaracion .)
    LDER            reduce using rule 9 (algoritmo -> declaracion .)
    ELSE            reduce using rule 9 (algoritmo -> declaracion .)
    ELSEIF          reduce using rule 9 (algoritmo -> declaracion .)


state 11

    (10) algoritmo -> comparacion .

                    reduce using rule 10 (algoritmo -> comparacion .)
    CONST           reduce using rule 10 (algoritmo -> comparacion .)
    IF              reduce using rule 10 (algoritmo -> comparacion .)
    FOR             reduce using rule 10 (algoritmo -> comparacion .)
    WHILE           reduce using rule 10 (algoritmo -> comparacion .)
    DO              reduce using rule 10 (algoritmo -> comparacion .)
    VARIABLE        reduce using rule 10 (algoritmo -> comparacion .)
    ECHO            reduce using rule 10 (algoritmo -> comparacion .)
    LIST            reduce using rule 10 (algoritmo -> comparacion .)
    BREAK           reduce using rule 10 (algoritmo -> comparacion .)
    FUNCTION        reduce using rule 10 (algoritmo -> comparacion .)
    VARIABLEFUNC    reduce using rule 10 (algoritmo -> comparacion .)
    GET             reduce using rule 10 (algoritmo -> comparacion .)
    POST            reduce using rule 10 (algoritmo -> comparacion .)
    KEY             reduce using rule 10 (algoritmo -> comparacion .)
    CURRENT         reduce using rule 10 (algoritmo -> comparacion .)
    NEXT            reduce using rule 10 (algoritmo -> comparacion .)
    STATIC          reduce using rule 10 (algoritmo -> comparacion .)
    VAR             reduce using rule 10 (algoritmo -> comparacion .)
    GLOBAL          reduce using rule 10 (algoritmo -> comparacion .)
    INTEGER         reduce using rule 10 (algoritmo -> comparacion .)
    STRING          reduce using rule 10 (algoritmo -> comparacion .)
    FLOAT           reduce using rule 10 (algoritmo -> comparacion .)
    BOOLEAN         reduce using rule 10 (algoritmo -> comparacion .)
    NULL            reduce using rule 10 (algoritmo -> comparacion .)
    TRUE            reduce using rule 10 (algoritmo -> comparacion .)
    FALSE           reduce using rule 10 (algoritmo -> comparacion .)
    ARRAY           reduce using rule 10 (algoritmo -> comparacion .)
    FIN             reduce using rule 10 (algoritmo -> comparacion .)
    LDER            reduce using rule 10 (algoritmo -> comparacion .)
    ELSE            reduce using rule 10 (algoritmo -> comparacion .)
    ELSEIF          reduce using rule 10 (algoritmo -> comparacion .)


state 12

    (11) algoritmo -> condicionalIF .

                    reduce using rule 11 (algoritmo -> condicionalIF .)
    CONST           reduce using rule 11 (algoritmo -> condicionalIF .)
    IF              reduce using rule 11 (algoritmo -> condicionalIF .)
    FOR             reduce using rule 11 (algoritmo -> condicionalIF .)
    WHILE           reduce using rule 11 (algoritmo -> condicionalIF .)
    DO              reduce using rule 11 (algoritmo -> condicionalIF .)
    VARIABLE        reduce using rule 11 (algoritmo -> condicionalIF .)
    ECHO            reduce using rule 11 (algoritmo -> condicionalIF .)
    LIST            reduce using rule 11 (algoritmo -> condicionalIF .)
    BREAK           reduce using rule 11 (algoritmo -> condicionalIF .)
    FUNCTION        reduce using rule 11 (algoritmo -> condicionalIF .)
    VARIABLEFUNC    reduce using rule 11 (algoritmo -> condicionalIF .)
    GET             reduce using rule 11 (algoritmo -> condicionalIF .)
    POST            reduce using rule 11 (algoritmo -> condicionalIF .)
    KEY             reduce using rule 11 (algoritmo -> condicionalIF .)
    CURRENT         reduce using rule 11 (algoritmo -> condicionalIF .)
    NEXT            reduce using rule 11 (algoritmo -> condicionalIF .)
    STATIC          reduce using rule 11 (algoritmo -> condicionalIF .)
    VAR             reduce using rule 11 (algoritmo -> condicionalIF .)
    GLOBAL          reduce using rule 11 (algoritmo -> condicionalIF .)
    INTEGER         reduce using rule 11 (algoritmo -> condicionalIF .)
    STRING          reduce using rule 11 (algoritmo -> condicionalIF .)
    FLOAT           reduce using rule 11 (algoritmo -> condicionalIF .)
    BOOLEAN         reduce using rule 11 (algoritmo -> condicionalIF .)
    NULL            reduce using rule 11 (algoritmo -> condicionalIF .)
    TRUE            reduce using rule 11 (algoritmo -> condicionalIF .)
    FALSE           reduce using rule 11 (algoritmo -> condicionalIF .)
    ARRAY           reduce using rule 11 (algoritmo -> condicionalIF .)
    FIN             reduce using rule 11 (algoritmo -> condicionalIF .)
    LDER            reduce using rule 11 (algoritmo -> condicionalIF .)
    ELSE            reduce using rule 11 (algoritmo -> condicionalIF .)
    ELSEIF          reduce using rule 11 (algoritmo -> condicionalIF .)


state 13

    (12) algoritmo -> iteracionFOR .

                    reduce using rule 12 (algoritmo -> iteracionFOR .)
    CONST           reduce using rule 12 (algoritmo -> iteracionFOR .)
    IF              reduce using rule 12 (algoritmo -> iteracionFOR .)
    FOR             reduce using rule 12 (algoritmo -> iteracionFOR .)
    WHILE           reduce using rule 12 (algoritmo -> iteracionFOR .)
    DO              reduce using rule 12 (algoritmo -> iteracionFOR .)
    VARIABLE        reduce using rule 12 (algoritmo -> iteracionFOR .)
    ECHO            reduce using rule 12 (algoritmo -> iteracionFOR .)
    LIST            reduce using rule 12 (algoritmo -> iteracionFOR .)
    BREAK           reduce using rule 12 (algoritmo -> iteracionFOR .)
    FUNCTION        reduce using rule 12 (algoritmo -> iteracionFOR .)
    VARIABLEFUNC    reduce using rule 12 (algoritmo -> iteracionFOR .)
    GET             reduce using rule 12 (algoritmo -> iteracionFOR .)
    POST            reduce using rule 12 (algoritmo -> iteracionFOR .)
    KEY             reduce using rule 12 (algoritmo -> iteracionFOR .)
    CURRENT         reduce using rule 12 (algoritmo -> iteracionFOR .)
    NEXT            reduce using rule 12 (algoritmo -> iteracionFOR .)
    STATIC          reduce using rule 12 (algoritmo -> iteracionFOR .)
    VAR             reduce using rule 12 (algoritmo -> iteracionFOR .)
    GLOBAL          reduce using rule 12 (algoritmo -> iteracionFOR .)
    INTEGER         reduce using rule 12 (algoritmo -> iteracionFOR .)
    STRING          reduce using rule 12 (algoritmo -> iteracionFOR .)
    FLOAT           reduce using rule 12 (algoritmo -> iteracionFOR .)
    BOOLEAN         reduce using rule 12 (algoritmo -> iteracionFOR .)
    NULL            reduce using rule 12 (algoritmo -> iteracionFOR .)
    TRUE            reduce using rule 12 (algoritmo -> iteracionFOR .)
    FALSE           reduce using rule 12 (algoritmo -> iteracionFOR .)
    ARRAY           reduce using rule 12 (algoritmo -> iteracionFOR .)
    FIN             reduce using rule 12 (algoritmo -> iteracionFOR .)
    LDER            reduce using rule 12 (algoritmo -> iteracionFOR .)
    ELSE            reduce using rule 12 (algoritmo -> iteracionFOR .)
    ELSEIF          reduce using rule 12 (algoritmo -> iteracionFOR .)


state 14

    (13) algoritmo -> bucleWHILE .

                    reduce using rule 13 (algoritmo -> bucleWHILE .)
    CONST           reduce using rule 13 (algoritmo -> bucleWHILE .)
    IF              reduce using rule 13 (algoritmo -> bucleWHILE .)
    FOR             reduce using rule 13 (algoritmo -> bucleWHILE .)
    WHILE           reduce using rule 13 (algoritmo -> bucleWHILE .)
    DO              reduce using rule 13 (algoritmo -> bucleWHILE .)
    VARIABLE        reduce using rule 13 (algoritmo -> bucleWHILE .)
    ECHO            reduce using rule 13 (algoritmo -> bucleWHILE .)
    LIST            reduce using rule 13 (algoritmo -> bucleWHILE .)
    BREAK           reduce using rule 13 (algoritmo -> bucleWHILE .)
    FUNCTION        reduce using rule 13 (algoritmo -> bucleWHILE .)
    VARIABLEFUNC    reduce using rule 13 (algoritmo -> bucleWHILE .)
    GET             reduce using rule 13 (algoritmo -> bucleWHILE .)
    POST            reduce using rule 13 (algoritmo -> bucleWHILE .)
    KEY             reduce using rule 13 (algoritmo -> bucleWHILE .)
    CURRENT         reduce using rule 13 (algoritmo -> bucleWHILE .)
    NEXT            reduce using rule 13 (algoritmo -> bucleWHILE .)
    STATIC          reduce using rule 13 (algoritmo -> bucleWHILE .)
    VAR             reduce using rule 13 (algoritmo -> bucleWHILE .)
    GLOBAL          reduce using rule 13 (algoritmo -> bucleWHILE .)
    INTEGER         reduce using rule 13 (algoritmo -> bucleWHILE .)
    STRING          reduce using rule 13 (algoritmo -> bucleWHILE .)
    FLOAT           reduce using rule 13 (algoritmo -> bucleWHILE .)
    BOOLEAN         reduce using rule 13 (algoritmo -> bucleWHILE .)
    NULL            reduce using rule 13 (algoritmo -> bucleWHILE .)
    TRUE            reduce using rule 13 (algoritmo -> bucleWHILE .)
    FALSE           reduce using rule 13 (algoritmo -> bucleWHILE .)
    ARRAY           reduce using rule 13 (algoritmo -> bucleWHILE .)
    FIN             reduce using rule 13 (algoritmo -> bucleWHILE .)
    LDER            reduce using rule 13 (algoritmo -> bucleWHILE .)
    ELSE            reduce using rule 13 (algoritmo -> bucleWHILE .)
    ELSEIF          reduce using rule 13 (algoritmo -> bucleWHILE .)


state 15

    (14) algoritmo -> bucleDO_WHILE .

                    reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    CONST           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    IF              reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FOR             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    WHILE           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    DO              reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    VARIABLE        reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ECHO            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    LIST            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    BREAK           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FUNCTION        reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    VARIABLEFUNC    reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    GET             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    POST            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    KEY             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    CURRENT         reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    NEXT            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    STATIC          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    VAR             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    GLOBAL          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    INTEGER         reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    STRING          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FLOAT           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    BOOLEAN         reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    NULL            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    TRUE            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FALSE           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ARRAY           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FIN             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    LDER            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ELSE            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ELSEIF          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)


state 16

    (15) algoritmo -> indexacion .

                    reduce using rule 15 (algoritmo -> indexacion .)
    CONST           reduce using rule 15 (algoritmo -> indexacion .)
    IF              reduce using rule 15 (algoritmo -> indexacion .)
    FOR             reduce using rule 15 (algoritmo -> indexacion .)
    WHILE           reduce using rule 15 (algoritmo -> indexacion .)
    DO              reduce using rule 15 (algoritmo -> indexacion .)
    VARIABLE        reduce using rule 15 (algoritmo -> indexacion .)
    ECHO            reduce using rule 15 (algoritmo -> indexacion .)
    LIST            reduce using rule 15 (algoritmo -> indexacion .)
    BREAK           reduce using rule 15 (algoritmo -> indexacion .)
    FUNCTION        reduce using rule 15 (algoritmo -> indexacion .)
    VARIABLEFUNC    reduce using rule 15 (algoritmo -> indexacion .)
    GET             reduce using rule 15 (algoritmo -> indexacion .)
    POST            reduce using rule 15 (algoritmo -> indexacion .)
    KEY             reduce using rule 15 (algoritmo -> indexacion .)
    CURRENT         reduce using rule 15 (algoritmo -> indexacion .)
    NEXT            reduce using rule 15 (algoritmo -> indexacion .)
    STATIC          reduce using rule 15 (algoritmo -> indexacion .)
    VAR             reduce using rule 15 (algoritmo -> indexacion .)
    GLOBAL          reduce using rule 15 (algoritmo -> indexacion .)
    INTEGER         reduce using rule 15 (algoritmo -> indexacion .)
    STRING          reduce using rule 15 (algoritmo -> indexacion .)
    FLOAT           reduce using rule 15 (algoritmo -> indexacion .)
    BOOLEAN         reduce using rule 15 (algoritmo -> indexacion .)
    NULL            reduce using rule 15 (algoritmo -> indexacion .)
    TRUE            reduce using rule 15 (algoritmo -> indexacion .)
    FALSE           reduce using rule 15 (algoritmo -> indexacion .)
    ARRAY           reduce using rule 15 (algoritmo -> indexacion .)
    FIN             reduce using rule 15 (algoritmo -> indexacion .)
    LDER            reduce using rule 15 (algoritmo -> indexacion .)
    ELSE            reduce using rule 15 (algoritmo -> indexacion .)
    ELSEIF          reduce using rule 15 (algoritmo -> indexacion .)


state 17

    (16) algoritmo -> echo .

                    reduce using rule 16 (algoritmo -> echo .)
    CONST           reduce using rule 16 (algoritmo -> echo .)
    IF              reduce using rule 16 (algoritmo -> echo .)
    FOR             reduce using rule 16 (algoritmo -> echo .)
    WHILE           reduce using rule 16 (algoritmo -> echo .)
    DO              reduce using rule 16 (algoritmo -> echo .)
    VARIABLE        reduce using rule 16 (algoritmo -> echo .)
    ECHO            reduce using rule 16 (algoritmo -> echo .)
    LIST            reduce using rule 16 (algoritmo -> echo .)
    BREAK           reduce using rule 16 (algoritmo -> echo .)
    FUNCTION        reduce using rule 16 (algoritmo -> echo .)
    VARIABLEFUNC    reduce using rule 16 (algoritmo -> echo .)
    GET             reduce using rule 16 (algoritmo -> echo .)
    POST            reduce using rule 16 (algoritmo -> echo .)
    KEY             reduce using rule 16 (algoritmo -> echo .)
    CURRENT         reduce using rule 16 (algoritmo -> echo .)
    NEXT            reduce using rule 16 (algoritmo -> echo .)
    STATIC          reduce using rule 16 (algoritmo -> echo .)
    VAR             reduce using rule 16 (algoritmo -> echo .)
    GLOBAL          reduce using rule 16 (algoritmo -> echo .)
    INTEGER         reduce using rule 16 (algoritmo -> echo .)
    STRING          reduce using rule 16 (algoritmo -> echo .)
    FLOAT           reduce using rule 16 (algoritmo -> echo .)
    BOOLEAN         reduce using rule 16 (algoritmo -> echo .)
    NULL            reduce using rule 16 (algoritmo -> echo .)
    TRUE            reduce using rule 16 (algoritmo -> echo .)
    FALSE           reduce using rule 16 (algoritmo -> echo .)
    ARRAY           reduce using rule 16 (algoritmo -> echo .)
    FIN             reduce using rule 16 (algoritmo -> echo .)
    LDER            reduce using rule 16 (algoritmo -> echo .)
    ELSE            reduce using rule 16 (algoritmo -> echo .)
    ELSEIF          reduce using rule 16 (algoritmo -> echo .)


state 18

    (17) algoritmo -> list .

                    reduce using rule 17 (algoritmo -> list .)
    CONST           reduce using rule 17 (algoritmo -> list .)
    IF              reduce using rule 17 (algoritmo -> list .)
    FOR             reduce using rule 17 (algoritmo -> list .)
    WHILE           reduce using rule 17 (algoritmo -> list .)
    DO              reduce using rule 17 (algoritmo -> list .)
    VARIABLE        reduce using rule 17 (algoritmo -> list .)
    ECHO            reduce using rule 17 (algoritmo -> list .)
    LIST            reduce using rule 17 (algoritmo -> list .)
    BREAK           reduce using rule 17 (algoritmo -> list .)
    FUNCTION        reduce using rule 17 (algoritmo -> list .)
    VARIABLEFUNC    reduce using rule 17 (algoritmo -> list .)
    GET             reduce using rule 17 (algoritmo -> list .)
    POST            reduce using rule 17 (algoritmo -> list .)
    KEY             reduce using rule 17 (algoritmo -> list .)
    CURRENT         reduce using rule 17 (algoritmo -> list .)
    NEXT            reduce using rule 17 (algoritmo -> list .)
    STATIC          reduce using rule 17 (algoritmo -> list .)
    VAR             reduce using rule 17 (algoritmo -> list .)
    GLOBAL          reduce using rule 17 (algoritmo -> list .)
    INTEGER         reduce using rule 17 (algoritmo -> list .)
    STRING          reduce using rule 17 (algoritmo -> list .)
    FLOAT           reduce using rule 17 (algoritmo -> list .)
    BOOLEAN         reduce using rule 17 (algoritmo -> list .)
    NULL            reduce using rule 17 (algoritmo -> list .)
    TRUE            reduce using rule 17 (algoritmo -> list .)
    FALSE           reduce using rule 17 (algoritmo -> list .)
    ARRAY           reduce using rule 17 (algoritmo -> list .)
    FIN             reduce using rule 17 (algoritmo -> list .)
    LDER            reduce using rule 17 (algoritmo -> list .)
    ELSE            reduce using rule 17 (algoritmo -> list .)
    ELSEIF          reduce using rule 17 (algoritmo -> list .)


state 19

    (18) algoritmo -> terminar .

                    reduce using rule 18 (algoritmo -> terminar .)
    CONST           reduce using rule 18 (algoritmo -> terminar .)
    IF              reduce using rule 18 (algoritmo -> terminar .)
    FOR             reduce using rule 18 (algoritmo -> terminar .)
    WHILE           reduce using rule 18 (algoritmo -> terminar .)
    DO              reduce using rule 18 (algoritmo -> terminar .)
    VARIABLE        reduce using rule 18 (algoritmo -> terminar .)
    ECHO            reduce using rule 18 (algoritmo -> terminar .)
    LIST            reduce using rule 18 (algoritmo -> terminar .)
    BREAK           reduce using rule 18 (algoritmo -> terminar .)
    FUNCTION        reduce using rule 18 (algoritmo -> terminar .)
    VARIABLEFUNC    reduce using rule 18 (algoritmo -> terminar .)
    GET             reduce using rule 18 (algoritmo -> terminar .)
    POST            reduce using rule 18 (algoritmo -> terminar .)
    KEY             reduce using rule 18 (algoritmo -> terminar .)
    CURRENT         reduce using rule 18 (algoritmo -> terminar .)
    NEXT            reduce using rule 18 (algoritmo -> terminar .)
    STATIC          reduce using rule 18 (algoritmo -> terminar .)
    VAR             reduce using rule 18 (algoritmo -> terminar .)
    GLOBAL          reduce using rule 18 (algoritmo -> terminar .)
    INTEGER         reduce using rule 18 (algoritmo -> terminar .)
    STRING          reduce using rule 18 (algoritmo -> terminar .)
    FLOAT           reduce using rule 18 (algoritmo -> terminar .)
    BOOLEAN         reduce using rule 18 (algoritmo -> terminar .)
    NULL            reduce using rule 18 (algoritmo -> terminar .)
    TRUE            reduce using rule 18 (algoritmo -> terminar .)
    FALSE           reduce using rule 18 (algoritmo -> terminar .)
    ARRAY           reduce using rule 18 (algoritmo -> terminar .)
    FIN             reduce using rule 18 (algoritmo -> terminar .)
    LDER            reduce using rule 18 (algoritmo -> terminar .)
    ELSE            reduce using rule 18 (algoritmo -> terminar .)
    ELSEIF          reduce using rule 18 (algoritmo -> terminar .)


state 20

    (19) algoritmo -> funciones .

                    reduce using rule 19 (algoritmo -> funciones .)
    CONST           reduce using rule 19 (algoritmo -> funciones .)
    IF              reduce using rule 19 (algoritmo -> funciones .)
    FOR             reduce using rule 19 (algoritmo -> funciones .)
    WHILE           reduce using rule 19 (algoritmo -> funciones .)
    DO              reduce using rule 19 (algoritmo -> funciones .)
    VARIABLE        reduce using rule 19 (algoritmo -> funciones .)
    ECHO            reduce using rule 19 (algoritmo -> funciones .)
    LIST            reduce using rule 19 (algoritmo -> funciones .)
    BREAK           reduce using rule 19 (algoritmo -> funciones .)
    FUNCTION        reduce using rule 19 (algoritmo -> funciones .)
    VARIABLEFUNC    reduce using rule 19 (algoritmo -> funciones .)
    GET             reduce using rule 19 (algoritmo -> funciones .)
    POST            reduce using rule 19 (algoritmo -> funciones .)
    KEY             reduce using rule 19 (algoritmo -> funciones .)
    CURRENT         reduce using rule 19 (algoritmo -> funciones .)
    NEXT            reduce using rule 19 (algoritmo -> funciones .)
    STATIC          reduce using rule 19 (algoritmo -> funciones .)
    VAR             reduce using rule 19 (algoritmo -> funciones .)
    GLOBAL          reduce using rule 19 (algoritmo -> funciones .)
    INTEGER         reduce using rule 19 (algoritmo -> funciones .)
    STRING          reduce using rule 19 (algoritmo -> funciones .)
    FLOAT           reduce using rule 19 (algoritmo -> funciones .)
    BOOLEAN         reduce using rule 19 (algoritmo -> funciones .)
    NULL            reduce using rule 19 (algoritmo -> funciones .)
    TRUE            reduce using rule 19 (algoritmo -> funciones .)
    FALSE           reduce using rule 19 (algoritmo -> funciones .)
    ARRAY           reduce using rule 19 (algoritmo -> funciones .)
    FIN             reduce using rule 19 (algoritmo -> funciones .)
    LDER            reduce using rule 19 (algoritmo -> funciones .)
    ELSE            reduce using rule 19 (algoritmo -> funciones .)
    ELSEIF          reduce using rule 19 (algoritmo -> funciones .)


state 21

    (20) algoritmo -> funcCOD .

                    reduce using rule 20 (algoritmo -> funcCOD .)
    CONST           reduce using rule 20 (algoritmo -> funcCOD .)
    IF              reduce using rule 20 (algoritmo -> funcCOD .)
    FOR             reduce using rule 20 (algoritmo -> funcCOD .)
    WHILE           reduce using rule 20 (algoritmo -> funcCOD .)
    DO              reduce using rule 20 (algoritmo -> funcCOD .)
    VARIABLE        reduce using rule 20 (algoritmo -> funcCOD .)
    ECHO            reduce using rule 20 (algoritmo -> funcCOD .)
    LIST            reduce using rule 20 (algoritmo -> funcCOD .)
    BREAK           reduce using rule 20 (algoritmo -> funcCOD .)
    FUNCTION        reduce using rule 20 (algoritmo -> funcCOD .)
    VARIABLEFUNC    reduce using rule 20 (algoritmo -> funcCOD .)
    GET             reduce using rule 20 (algoritmo -> funcCOD .)
    POST            reduce using rule 20 (algoritmo -> funcCOD .)
    KEY             reduce using rule 20 (algoritmo -> funcCOD .)
    CURRENT         reduce using rule 20 (algoritmo -> funcCOD .)
    NEXT            reduce using rule 20 (algoritmo -> funcCOD .)
    STATIC          reduce using rule 20 (algoritmo -> funcCOD .)
    VAR             reduce using rule 20 (algoritmo -> funcCOD .)
    GLOBAL          reduce using rule 20 (algoritmo -> funcCOD .)
    INTEGER         reduce using rule 20 (algoritmo -> funcCOD .)
    STRING          reduce using rule 20 (algoritmo -> funcCOD .)
    FLOAT           reduce using rule 20 (algoritmo -> funcCOD .)
    BOOLEAN         reduce using rule 20 (algoritmo -> funcCOD .)
    NULL            reduce using rule 20 (algoritmo -> funcCOD .)
    TRUE            reduce using rule 20 (algoritmo -> funcCOD .)
    FALSE           reduce using rule 20 (algoritmo -> funcCOD .)
    ARRAY           reduce using rule 20 (algoritmo -> funcCOD .)
    FIN             reduce using rule 20 (algoritmo -> funcCOD .)
    LDER            reduce using rule 20 (algoritmo -> funcCOD .)
    ELSE            reduce using rule 20 (algoritmo -> funcCOD .)
    ELSEIF          reduce using rule 20 (algoritmo -> funcCOD .)


state 22

    (21) algoritmo -> ingresoDatos .
    (109) valor -> ingresoDatos .

                    reduce using rule 21 (algoritmo -> ingresoDatos .)
    CONST           reduce using rule 21 (algoritmo -> ingresoDatos .)
    IF              reduce using rule 21 (algoritmo -> ingresoDatos .)
    FOR             reduce using rule 21 (algoritmo -> ingresoDatos .)
    WHILE           reduce using rule 21 (algoritmo -> ingresoDatos .)
    DO              reduce using rule 21 (algoritmo -> ingresoDatos .)
    VARIABLE        reduce using rule 21 (algoritmo -> ingresoDatos .)
    ECHO            reduce using rule 21 (algoritmo -> ingresoDatos .)
    LIST            reduce using rule 21 (algoritmo -> ingresoDatos .)
    BREAK           reduce using rule 21 (algoritmo -> ingresoDatos .)
    FUNCTION        reduce using rule 21 (algoritmo -> ingresoDatos .)
    VARIABLEFUNC    reduce using rule 21 (algoritmo -> ingresoDatos .)
    GET             reduce using rule 21 (algoritmo -> ingresoDatos .)
    POST            reduce using rule 21 (algoritmo -> ingresoDatos .)
    KEY             reduce using rule 21 (algoritmo -> ingresoDatos .)
    CURRENT         reduce using rule 21 (algoritmo -> ingresoDatos .)
    NEXT            reduce using rule 21 (algoritmo -> ingresoDatos .)
    STATIC          reduce using rule 21 (algoritmo -> ingresoDatos .)
    VAR             reduce using rule 21 (algoritmo -> ingresoDatos .)
    GLOBAL          reduce using rule 21 (algoritmo -> ingresoDatos .)
    INTEGER         reduce using rule 21 (algoritmo -> ingresoDatos .)
    STRING          reduce using rule 21 (algoritmo -> ingresoDatos .)
    FLOAT           reduce using rule 21 (algoritmo -> ingresoDatos .)
    BOOLEAN         reduce using rule 21 (algoritmo -> ingresoDatos .)
    NULL            reduce using rule 21 (algoritmo -> ingresoDatos .)
    TRUE            reduce using rule 21 (algoritmo -> ingresoDatos .)
    FALSE           reduce using rule 21 (algoritmo -> ingresoDatos .)
    ARRAY           reduce using rule 21 (algoritmo -> ingresoDatos .)
    FIN             reduce using rule 21 (algoritmo -> ingresoDatos .)
    LDER            reduce using rule 21 (algoritmo -> ingresoDatos .)
    ELSE            reduce using rule 21 (algoritmo -> ingresoDatos .)
    ELSEIF          reduce using rule 21 (algoritmo -> ingresoDatos .)
    MAYOR           reduce using rule 109 (valor -> ingresoDatos .)
    MENOR           reduce using rule 109 (valor -> ingresoDatos .)
    COMPARACION     reduce using rule 109 (valor -> ingresoDatos .)
    IDENTICO        reduce using rule 109 (valor -> ingresoDatos .)
    DIFERENTE       reduce using rule 109 (valor -> ingresoDatos .)
    NOIDENTICO      reduce using rule 109 (valor -> ingresoDatos .)
    MENOROIGUAL     reduce using rule 109 (valor -> ingresoDatos .)
    MAYOROIGUAL     reduce using rule 109 (valor -> ingresoDatos .)
    NAVEESPACIAL    reduce using rule 109 (valor -> ingresoDatos .)
    MAS             reduce using rule 109 (valor -> ingresoDatos .)
    RESTA           reduce using rule 109 (valor -> ingresoDatos .)
    PROD            reduce using rule 109 (valor -> ingresoDatos .)
    DIV             reduce using rule 109 (valor -> ingresoDatos .)
    MOD             reduce using rule 109 (valor -> ingresoDatos .)
    POTENCIA        reduce using rule 109 (valor -> ingresoDatos .)
    AND             reduce using rule 109 (valor -> ingresoDatos .)
    XOR             reduce using rule 109 (valor -> ingresoDatos .)
    OR              reduce using rule 109 (valor -> ingresoDatos .)
    NOT             reduce using rule 109 (valor -> ingresoDatos .)


state 23

    (22) algoritmo -> arrayfunctionsC .

                    reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    CONST           reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    IF              reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    FOR             reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    WHILE           reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    DO              reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    VARIABLE        reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    ECHO            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    LIST            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    BREAK           reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    FUNCTION        reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    VARIABLEFUNC    reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    GET             reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    POST            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    KEY             reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    CURRENT         reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    NEXT            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    STATIC          reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    VAR             reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    GLOBAL          reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    INTEGER         reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    STRING          reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    FLOAT           reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    BOOLEAN         reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    NULL            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    TRUE            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    FALSE           reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    ARRAY           reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    FIN             reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    LDER            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    ELSE            reduce using rule 22 (algoritmo -> arrayfunctionsC .)
    ELSEIF          reduce using rule 22 (algoritmo -> arrayfunctionsC .)


state 24

    (23) asignacion -> ambito . multiVariable IGUAL expresion PTOCO
    (27) declaracion -> ambito . multiVariable PTOCO
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 61

    multiVariable                  shift and go to state 60

state 25

    (24) asignacion -> multiVariable . IGUAL expresion PTOCO
    (28) declaracion -> multiVariable . PTOCO

    IGUAL           shift and go to state 62
    PTOCO           shift and go to state 63


state 26

    (25) asignacion -> CONST . multiConstante IGUAL expresion PTOCO
    (29) declaracion -> CONST . multiConstante PTOCO
    (38) ambito -> CONST .
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante

    VARIABLE        reduce using rule 38 (ambito -> CONST .)
    VARIABLEFUNC    shift and go to state 65

    multiConstante                 shift and go to state 64

state 27

    (26) asignacion -> multiConstante . IGUAL expresion PTOCO
    (30) declaracion -> multiConstante . PTOCO

    IGUAL           shift and go to state 66
    PTOCO           shift and go to state 67


state 28

    (39) comparacion -> valor . operadorC expresion PTOCO
    (40) comparacion -> valor . operadorM expresion PTOCO
    (41) comparacion -> valor . operadorL expresion PTOCO
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL
    (83) operadorM -> . MAS
    (84) operadorM -> . RESTA
    (85) operadorM -> . PROD
    (86) operadorM -> . DIV
    (87) operadorM -> . MOD
    (88) operadorM -> . POTENCIA
    (99) operadorL -> . AND
    (100) operadorL -> . XOR
    (101) operadorL -> . OR
    (102) operadorL -> . NOT

    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79
    MAS             shift and go to state 80
    RESTA           shift and go to state 81
    PROD            shift and go to state 82
    DIV             shift and go to state 83
    MOD             shift and go to state 84
    POTENCIA        shift and go to state 85
    AND             shift and go to state 86
    XOR             shift and go to state 87
    OR              shift and go to state 88
    NOT             shift and go to state 89

    operadorC                      shift and go to state 68
    operadorM                      shift and go to state 69
    operadorL                      shift and go to state 70

state 29

    (121) condicionalIF -> IF . PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> IF . PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> IF . PIZQ condicion PDER codigo
    (124) condicionalIF -> IF . PIZQ condicion PDER codigo condicionalELSE

    PIZQ            shift and go to state 90


state 30

    (129) iteracionFOR -> FOR . PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> FOR . PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 91


state 31

    (131) bucleWHILE -> WHILE . PIZQ condicion PDER codigo
    (132) bucleWHILE -> WHILE . PIZQ condicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 92


state 32

    (133) bucleDO_WHILE -> DO . LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> DO . LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER

    LIZQ            shift and go to state 93


state 33

    (138) indexacion -> VARIABLE . CIZQ INTEGER CDER
    (139) indexacion -> VARIABLE . CIZQ RESTA INTEGER CDER
    (140) indexacion -> VARIABLE . CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> VARIABLE . CIZQ RESTA INTEGER CDER FUSIONNULL
    (31) multiVariable -> VARIABLE .
    (32) multiVariable -> VARIABLE . COMA multiVariable
    (107) valor -> VARIABLE .

    CIZQ            shift and go to state 94
    IGUAL           reduce using rule 31 (multiVariable -> VARIABLE .)
    PTOCO           reduce using rule 31 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 95
    MAYOR           reduce using rule 107 (valor -> VARIABLE .)
    MENOR           reduce using rule 107 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 107 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 107 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 107 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 107 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 107 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 107 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 107 (valor -> VARIABLE .)
    MAS             reduce using rule 107 (valor -> VARIABLE .)
    RESTA           reduce using rule 107 (valor -> VARIABLE .)
    PROD            reduce using rule 107 (valor -> VARIABLE .)
    DIV             reduce using rule 107 (valor -> VARIABLE .)
    MOD             reduce using rule 107 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 107 (valor -> VARIABLE .)
    AND             reduce using rule 107 (valor -> VARIABLE .)
    XOR             reduce using rule 107 (valor -> VARIABLE .)
    OR              reduce using rule 107 (valor -> VARIABLE .)
    NOT             reduce using rule 107 (valor -> VARIABLE .)


state 34

    (103) valor -> INTEGER .

    MAYOR           reduce using rule 103 (valor -> INTEGER .)
    MENOR           reduce using rule 103 (valor -> INTEGER .)
    COMPARACION     reduce using rule 103 (valor -> INTEGER .)
    IDENTICO        reduce using rule 103 (valor -> INTEGER .)
    DIFERENTE       reduce using rule 103 (valor -> INTEGER .)
    NOIDENTICO      reduce using rule 103 (valor -> INTEGER .)
    MENOROIGUAL     reduce using rule 103 (valor -> INTEGER .)
    MAYOROIGUAL     reduce using rule 103 (valor -> INTEGER .)
    NAVEESPACIAL    reduce using rule 103 (valor -> INTEGER .)
    MAS             reduce using rule 103 (valor -> INTEGER .)
    RESTA           reduce using rule 103 (valor -> INTEGER .)
    PROD            reduce using rule 103 (valor -> INTEGER .)
    DIV             reduce using rule 103 (valor -> INTEGER .)
    MOD             reduce using rule 103 (valor -> INTEGER .)
    POTENCIA        reduce using rule 103 (valor -> INTEGER .)
    AND             reduce using rule 103 (valor -> INTEGER .)
    XOR             reduce using rule 103 (valor -> INTEGER .)
    OR              reduce using rule 103 (valor -> INTEGER .)
    NOT             reduce using rule 103 (valor -> INTEGER .)
    PTOCO           reduce using rule 103 (valor -> INTEGER .)
    COMA            reduce using rule 103 (valor -> INTEGER .)
    PDER            reduce using rule 103 (valor -> INTEGER .)
    FLECHA          reduce using rule 103 (valor -> INTEGER .)


state 35

    (142) echo -> ECHO . VARIABLE PTOCO
    (143) echo -> ECHO . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 96
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 97
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 36

    (135) list -> LIST . PIZQ valoresList PDER IGUAL VARIABLE PTOCO

    PIZQ            shift and go to state 111


state 37

    (98) terminar -> BREAK . PTOCO

    PTOCO           shift and go to state 112


state 38

    (81) funciones -> FUNCTION . VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> FUNCTION . VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER

    VARIABLEFUNC    shift and go to state 113


state 39

    (46) funcCOD -> VARIABLEFUNC . PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> VARIABLEFUNC . PIZQ PDER PTOCO
    (33) multiConstante -> VARIABLEFUNC .
    (34) multiConstante -> VARIABLEFUNC . COMA multiConstante

    PIZQ            shift and go to state 114
    IGUAL           reduce using rule 33 (multiConstante -> VARIABLEFUNC .)
    PTOCO           reduce using rule 33 (multiConstante -> VARIABLEFUNC .)
    COMA            shift and go to state 115


state 40

    (113) ingresoDatos -> GET . CIZQ STRING CDER

    CIZQ            shift and go to state 116


state 41

    (105) valor -> STRING .

    MAYOR           reduce using rule 105 (valor -> STRING .)
    MENOR           reduce using rule 105 (valor -> STRING .)
    COMPARACION     reduce using rule 105 (valor -> STRING .)
    IDENTICO        reduce using rule 105 (valor -> STRING .)
    DIFERENTE       reduce using rule 105 (valor -> STRING .)
    NOIDENTICO      reduce using rule 105 (valor -> STRING .)
    MENOROIGUAL     reduce using rule 105 (valor -> STRING .)
    MAYOROIGUAL     reduce using rule 105 (valor -> STRING .)
    NAVEESPACIAL    reduce using rule 105 (valor -> STRING .)
    MAS             reduce using rule 105 (valor -> STRING .)
    RESTA           reduce using rule 105 (valor -> STRING .)
    PROD            reduce using rule 105 (valor -> STRING .)
    DIV             reduce using rule 105 (valor -> STRING .)
    MOD             reduce using rule 105 (valor -> STRING .)
    POTENCIA        reduce using rule 105 (valor -> STRING .)
    AND             reduce using rule 105 (valor -> STRING .)
    XOR             reduce using rule 105 (valor -> STRING .)
    OR              reduce using rule 105 (valor -> STRING .)
    NOT             reduce using rule 105 (valor -> STRING .)
    PTOCO           reduce using rule 105 (valor -> STRING .)
    COMA            reduce using rule 105 (valor -> STRING .)
    PDER            reduce using rule 105 (valor -> STRING .)
    FLECHA          reduce using rule 105 (valor -> STRING .)


state 42

    (114) ingresoDatos -> POST . CIZQ STRING CDER

    CIZQ            shift and go to state 117


state 43

    (65) arrayfunctionsC -> KEY . PIZQ avInner PDER PTOCO
    (68) arrayfunctions -> KEY . PIZQ avInner PDER

    PIZQ            shift and go to state 118


state 44

    (66) arrayfunctionsC -> CURRENT . PIZQ avInner PDER PTOCO
    (69) arrayfunctions -> CURRENT . PIZQ avInner PDER

    PIZQ            shift and go to state 119


state 45

    (67) arrayfunctionsC -> NEXT . PIZQ avInner PDER PTOCO
    (70) arrayfunctions -> NEXT . PIZQ avInner PDER

    PIZQ            shift and go to state 120


state 46

    (35) ambito -> STATIC .

    VARIABLE        reduce using rule 35 (ambito -> STATIC .)


state 47

    (36) ambito -> VAR .

    VARIABLE        reduce using rule 36 (ambito -> VAR .)


state 48

    (37) ambito -> GLOBAL .

    VARIABLE        reduce using rule 37 (ambito -> GLOBAL .)


state 49

    (104) valor -> booleano .

    MAYOR           reduce using rule 104 (valor -> booleano .)
    MENOR           reduce using rule 104 (valor -> booleano .)
    COMPARACION     reduce using rule 104 (valor -> booleano .)
    IDENTICO        reduce using rule 104 (valor -> booleano .)
    DIFERENTE       reduce using rule 104 (valor -> booleano .)
    NOIDENTICO      reduce using rule 104 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 104 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 104 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 104 (valor -> booleano .)
    MAS             reduce using rule 104 (valor -> booleano .)
    RESTA           reduce using rule 104 (valor -> booleano .)
    PROD            reduce using rule 104 (valor -> booleano .)
    DIV             reduce using rule 104 (valor -> booleano .)
    MOD             reduce using rule 104 (valor -> booleano .)
    POTENCIA        reduce using rule 104 (valor -> booleano .)
    AND             reduce using rule 104 (valor -> booleano .)
    XOR             reduce using rule 104 (valor -> booleano .)
    OR              reduce using rule 104 (valor -> booleano .)
    NOT             reduce using rule 104 (valor -> booleano .)


state 50

    (106) valor -> FLOAT .

    MAYOR           reduce using rule 106 (valor -> FLOAT .)
    MENOR           reduce using rule 106 (valor -> FLOAT .)
    COMPARACION     reduce using rule 106 (valor -> FLOAT .)
    IDENTICO        reduce using rule 106 (valor -> FLOAT .)
    DIFERENTE       reduce using rule 106 (valor -> FLOAT .)
    NOIDENTICO      reduce using rule 106 (valor -> FLOAT .)
    MENOROIGUAL     reduce using rule 106 (valor -> FLOAT .)
    MAYOROIGUAL     reduce using rule 106 (valor -> FLOAT .)
    NAVEESPACIAL    reduce using rule 106 (valor -> FLOAT .)
    MAS             reduce using rule 106 (valor -> FLOAT .)
    RESTA           reduce using rule 106 (valor -> FLOAT .)
    PROD            reduce using rule 106 (valor -> FLOAT .)
    DIV             reduce using rule 106 (valor -> FLOAT .)
    MOD             reduce using rule 106 (valor -> FLOAT .)
    POTENCIA        reduce using rule 106 (valor -> FLOAT .)
    AND             reduce using rule 106 (valor -> FLOAT .)
    XOR             reduce using rule 106 (valor -> FLOAT .)
    OR              reduce using rule 106 (valor -> FLOAT .)
    NOT             reduce using rule 106 (valor -> FLOAT .)
    PTOCO           reduce using rule 106 (valor -> FLOAT .)
    COMA            reduce using rule 106 (valor -> FLOAT .)
    PDER            reduce using rule 106 (valor -> FLOAT .)
    FLECHA          reduce using rule 106 (valor -> FLOAT .)


state 51

    (108) valor -> BOOLEAN .

    MAYOR           reduce using rule 108 (valor -> BOOLEAN .)
    MENOR           reduce using rule 108 (valor -> BOOLEAN .)
    COMPARACION     reduce using rule 108 (valor -> BOOLEAN .)
    IDENTICO        reduce using rule 108 (valor -> BOOLEAN .)
    DIFERENTE       reduce using rule 108 (valor -> BOOLEAN .)
    NOIDENTICO      reduce using rule 108 (valor -> BOOLEAN .)
    MENOROIGUAL     reduce using rule 108 (valor -> BOOLEAN .)
    MAYOROIGUAL     reduce using rule 108 (valor -> BOOLEAN .)
    NAVEESPACIAL    reduce using rule 108 (valor -> BOOLEAN .)
    MAS             reduce using rule 108 (valor -> BOOLEAN .)
    RESTA           reduce using rule 108 (valor -> BOOLEAN .)
    PROD            reduce using rule 108 (valor -> BOOLEAN .)
    DIV             reduce using rule 108 (valor -> BOOLEAN .)
    MOD             reduce using rule 108 (valor -> BOOLEAN .)
    POTENCIA        reduce using rule 108 (valor -> BOOLEAN .)
    AND             reduce using rule 108 (valor -> BOOLEAN .)
    XOR             reduce using rule 108 (valor -> BOOLEAN .)
    OR              reduce using rule 108 (valor -> BOOLEAN .)
    NOT             reduce using rule 108 (valor -> BOOLEAN .)
    PTOCO           reduce using rule 108 (valor -> BOOLEAN .)
    COMA            reduce using rule 108 (valor -> BOOLEAN .)
    PDER            reduce using rule 108 (valor -> BOOLEAN .)
    FLECHA          reduce using rule 108 (valor -> BOOLEAN .)


state 52

    (110) valor -> arrayfunctions .

    MAYOR           reduce using rule 110 (valor -> arrayfunctions .)
    MENOR           reduce using rule 110 (valor -> arrayfunctions .)
    COMPARACION     reduce using rule 110 (valor -> arrayfunctions .)
    IDENTICO        reduce using rule 110 (valor -> arrayfunctions .)
    DIFERENTE       reduce using rule 110 (valor -> arrayfunctions .)
    NOIDENTICO      reduce using rule 110 (valor -> arrayfunctions .)
    MENOROIGUAL     reduce using rule 110 (valor -> arrayfunctions .)
    MAYOROIGUAL     reduce using rule 110 (valor -> arrayfunctions .)
    NAVEESPACIAL    reduce using rule 110 (valor -> arrayfunctions .)
    MAS             reduce using rule 110 (valor -> arrayfunctions .)
    RESTA           reduce using rule 110 (valor -> arrayfunctions .)
    PROD            reduce using rule 110 (valor -> arrayfunctions .)
    DIV             reduce using rule 110 (valor -> arrayfunctions .)
    MOD             reduce using rule 110 (valor -> arrayfunctions .)
    POTENCIA        reduce using rule 110 (valor -> arrayfunctions .)
    AND             reduce using rule 110 (valor -> arrayfunctions .)
    XOR             reduce using rule 110 (valor -> arrayfunctions .)
    OR              reduce using rule 110 (valor -> arrayfunctions .)
    NOT             reduce using rule 110 (valor -> arrayfunctions .)


state 53

    (111) valor -> Arreglo .

    MAYOR           reduce using rule 111 (valor -> Arreglo .)
    MENOR           reduce using rule 111 (valor -> Arreglo .)
    COMPARACION     reduce using rule 111 (valor -> Arreglo .)
    IDENTICO        reduce using rule 111 (valor -> Arreglo .)
    DIFERENTE       reduce using rule 111 (valor -> Arreglo .)
    NOIDENTICO      reduce using rule 111 (valor -> Arreglo .)
    MENOROIGUAL     reduce using rule 111 (valor -> Arreglo .)
    MAYOROIGUAL     reduce using rule 111 (valor -> Arreglo .)
    NAVEESPACIAL    reduce using rule 111 (valor -> Arreglo .)
    MAS             reduce using rule 111 (valor -> Arreglo .)
    RESTA           reduce using rule 111 (valor -> Arreglo .)
    PROD            reduce using rule 111 (valor -> Arreglo .)
    DIV             reduce using rule 111 (valor -> Arreglo .)
    MOD             reduce using rule 111 (valor -> Arreglo .)
    POTENCIA        reduce using rule 111 (valor -> Arreglo .)
    AND             reduce using rule 111 (valor -> Arreglo .)
    XOR             reduce using rule 111 (valor -> Arreglo .)
    OR              reduce using rule 111 (valor -> Arreglo .)
    NOT             reduce using rule 111 (valor -> Arreglo .)


state 54

    (112) valor -> NULL .

    MAYOR           reduce using rule 112 (valor -> NULL .)
    MENOR           reduce using rule 112 (valor -> NULL .)
    COMPARACION     reduce using rule 112 (valor -> NULL .)
    IDENTICO        reduce using rule 112 (valor -> NULL .)
    DIFERENTE       reduce using rule 112 (valor -> NULL .)
    NOIDENTICO      reduce using rule 112 (valor -> NULL .)
    MENOROIGUAL     reduce using rule 112 (valor -> NULL .)
    MAYOROIGUAL     reduce using rule 112 (valor -> NULL .)
    NAVEESPACIAL    reduce using rule 112 (valor -> NULL .)
    MAS             reduce using rule 112 (valor -> NULL .)
    RESTA           reduce using rule 112 (valor -> NULL .)
    PROD            reduce using rule 112 (valor -> NULL .)
    DIV             reduce using rule 112 (valor -> NULL .)
    MOD             reduce using rule 112 (valor -> NULL .)
    POTENCIA        reduce using rule 112 (valor -> NULL .)
    AND             reduce using rule 112 (valor -> NULL .)
    XOR             reduce using rule 112 (valor -> NULL .)
    OR              reduce using rule 112 (valor -> NULL .)
    NOT             reduce using rule 112 (valor -> NULL .)
    PTOCO           reduce using rule 112 (valor -> NULL .)
    COMA            reduce using rule 112 (valor -> NULL .)
    PDER            reduce using rule 112 (valor -> NULL .)
    FLECHA          reduce using rule 112 (valor -> NULL .)


state 55

    (115) booleano -> TRUE .

    MAYOR           reduce using rule 115 (booleano -> TRUE .)
    MENOR           reduce using rule 115 (booleano -> TRUE .)
    COMPARACION     reduce using rule 115 (booleano -> TRUE .)
    IDENTICO        reduce using rule 115 (booleano -> TRUE .)
    DIFERENTE       reduce using rule 115 (booleano -> TRUE .)
    NOIDENTICO      reduce using rule 115 (booleano -> TRUE .)
    MENOROIGUAL     reduce using rule 115 (booleano -> TRUE .)
    MAYOROIGUAL     reduce using rule 115 (booleano -> TRUE .)
    NAVEESPACIAL    reduce using rule 115 (booleano -> TRUE .)
    MAS             reduce using rule 115 (booleano -> TRUE .)
    RESTA           reduce using rule 115 (booleano -> TRUE .)
    PROD            reduce using rule 115 (booleano -> TRUE .)
    DIV             reduce using rule 115 (booleano -> TRUE .)
    MOD             reduce using rule 115 (booleano -> TRUE .)
    POTENCIA        reduce using rule 115 (booleano -> TRUE .)
    AND             reduce using rule 115 (booleano -> TRUE .)
    XOR             reduce using rule 115 (booleano -> TRUE .)
    OR              reduce using rule 115 (booleano -> TRUE .)
    NOT             reduce using rule 115 (booleano -> TRUE .)
    PTOCO           reduce using rule 115 (booleano -> TRUE .)
    PDER            reduce using rule 115 (booleano -> TRUE .)
    COMA            reduce using rule 115 (booleano -> TRUE .)
    FLECHA          reduce using rule 115 (booleano -> TRUE .)


state 56

    (116) booleano -> FALSE .

    MAYOR           reduce using rule 116 (booleano -> FALSE .)
    MENOR           reduce using rule 116 (booleano -> FALSE .)
    COMPARACION     reduce using rule 116 (booleano -> FALSE .)
    IDENTICO        reduce using rule 116 (booleano -> FALSE .)
    DIFERENTE       reduce using rule 116 (booleano -> FALSE .)
    NOIDENTICO      reduce using rule 116 (booleano -> FALSE .)
    MENOROIGUAL     reduce using rule 116 (booleano -> FALSE .)
    MAYOROIGUAL     reduce using rule 116 (booleano -> FALSE .)
    NAVEESPACIAL    reduce using rule 116 (booleano -> FALSE .)
    MAS             reduce using rule 116 (booleano -> FALSE .)
    RESTA           reduce using rule 116 (booleano -> FALSE .)
    PROD            reduce using rule 116 (booleano -> FALSE .)
    DIV             reduce using rule 116 (booleano -> FALSE .)
    MOD             reduce using rule 116 (booleano -> FALSE .)
    POTENCIA        reduce using rule 116 (booleano -> FALSE .)
    AND             reduce using rule 116 (booleano -> FALSE .)
    XOR             reduce using rule 116 (booleano -> FALSE .)
    OR              reduce using rule 116 (booleano -> FALSE .)
    NOT             reduce using rule 116 (booleano -> FALSE .)
    PTOCO           reduce using rule 116 (booleano -> FALSE .)
    PDER            reduce using rule 116 (booleano -> FALSE .)
    COMA            reduce using rule 116 (booleano -> FALSE .)
    FLECHA          reduce using rule 116 (booleano -> FALSE .)


state 57

    (49) Arreglo -> ARRAY . PIZQ innerColection PDER

    PIZQ            shift and go to state 121


state 58

    (1) phpSyntax -> inicio codigo fin .

    $end            reduce using rule 1 (phpSyntax -> inicio codigo fin .)


state 59

    (4) codigo -> algoritmo codigo .

    FIN             reduce using rule 4 (codigo -> algoritmo codigo .)
    LDER            reduce using rule 4 (codigo -> algoritmo codigo .)
    ELSE            reduce using rule 4 (codigo -> algoritmo codigo .)
    ELSEIF          reduce using rule 4 (codigo -> algoritmo codigo .)
                    reduce using rule 4 (codigo -> algoritmo codigo .)
    CONST           reduce using rule 4 (codigo -> algoritmo codigo .)
    IF              reduce using rule 4 (codigo -> algoritmo codigo .)
    FOR             reduce using rule 4 (codigo -> algoritmo codigo .)
    WHILE           reduce using rule 4 (codigo -> algoritmo codigo .)
    DO              reduce using rule 4 (codigo -> algoritmo codigo .)
    VARIABLE        reduce using rule 4 (codigo -> algoritmo codigo .)
    ECHO            reduce using rule 4 (codigo -> algoritmo codigo .)
    LIST            reduce using rule 4 (codigo -> algoritmo codigo .)
    BREAK           reduce using rule 4 (codigo -> algoritmo codigo .)
    FUNCTION        reduce using rule 4 (codigo -> algoritmo codigo .)
    VARIABLEFUNC    reduce using rule 4 (codigo -> algoritmo codigo .)
    GET             reduce using rule 4 (codigo -> algoritmo codigo .)
    POST            reduce using rule 4 (codigo -> algoritmo codigo .)
    KEY             reduce using rule 4 (codigo -> algoritmo codigo .)
    CURRENT         reduce using rule 4 (codigo -> algoritmo codigo .)
    NEXT            reduce using rule 4 (codigo -> algoritmo codigo .)
    STATIC          reduce using rule 4 (codigo -> algoritmo codigo .)
    VAR             reduce using rule 4 (codigo -> algoritmo codigo .)
    GLOBAL          reduce using rule 4 (codigo -> algoritmo codigo .)
    INTEGER         reduce using rule 4 (codigo -> algoritmo codigo .)
    STRING          reduce using rule 4 (codigo -> algoritmo codigo .)
    FLOAT           reduce using rule 4 (codigo -> algoritmo codigo .)
    BOOLEAN         reduce using rule 4 (codigo -> algoritmo codigo .)
    NULL            reduce using rule 4 (codigo -> algoritmo codigo .)
    TRUE            reduce using rule 4 (codigo -> algoritmo codigo .)
    FALSE           reduce using rule 4 (codigo -> algoritmo codigo .)
    ARRAY           reduce using rule 4 (codigo -> algoritmo codigo .)


state 60

    (23) asignacion -> ambito multiVariable . IGUAL expresion PTOCO
    (27) declaracion -> ambito multiVariable . PTOCO

    IGUAL           shift and go to state 122
    PTOCO           shift and go to state 123


state 61

    (31) multiVariable -> VARIABLE .
    (32) multiVariable -> VARIABLE . COMA multiVariable

    IGUAL           reduce using rule 31 (multiVariable -> VARIABLE .)
    PTOCO           reduce using rule 31 (multiVariable -> VARIABLE .)
    PDER            reduce using rule 31 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 95


state 62

    (24) asignacion -> multiVariable IGUAL . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 124
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 63

    (28) declaracion -> multiVariable PTOCO .

                    reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    CONST           reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    IF              reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    FOR             reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    WHILE           reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    DO              reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    VARIABLE        reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    ECHO            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    LIST            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    BREAK           reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    FUNCTION        reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    VARIABLEFUNC    reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    GET             reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    POST            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    KEY             reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    CURRENT         reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    NEXT            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    STATIC          reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    VAR             reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    GLOBAL          reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    INTEGER         reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    STRING          reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    FLOAT           reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    BOOLEAN         reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    NULL            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    TRUE            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    FALSE           reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    ARRAY           reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    FIN             reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    LDER            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    ELSE            reduce using rule 28 (declaracion -> multiVariable PTOCO .)
    ELSEIF          reduce using rule 28 (declaracion -> multiVariable PTOCO .)


state 64

    (25) asignacion -> CONST multiConstante . IGUAL expresion PTOCO
    (29) declaracion -> CONST multiConstante . PTOCO

    IGUAL           shift and go to state 126
    PTOCO           shift and go to state 127


state 65

    (33) multiConstante -> VARIABLEFUNC .
    (34) multiConstante -> VARIABLEFUNC . COMA multiConstante

    IGUAL           reduce using rule 33 (multiConstante -> VARIABLEFUNC .)
    PTOCO           reduce using rule 33 (multiConstante -> VARIABLEFUNC .)
    COMA            shift and go to state 115


state 66

    (26) asignacion -> multiConstante IGUAL . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 128
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 67

    (30) declaracion -> multiConstante PTOCO .

                    reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    CONST           reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    IF              reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    FOR             reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    WHILE           reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    DO              reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    VARIABLE        reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    ECHO            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    LIST            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    BREAK           reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    FUNCTION        reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    VARIABLEFUNC    reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    GET             reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    POST            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    KEY             reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    CURRENT         reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    NEXT            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    STATIC          reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    VAR             reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    GLOBAL          reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    INTEGER         reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    STRING          reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    FLOAT           reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    BOOLEAN         reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    NULL            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    TRUE            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    FALSE           reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    ARRAY           reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    FIN             reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    LDER            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    ELSE            reduce using rule 30 (declaracion -> multiConstante PTOCO .)
    ELSEIF          reduce using rule 30 (declaracion -> multiConstante PTOCO .)


state 68

    (39) comparacion -> valor operadorC . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    valor                          shift and go to state 98
    expresion                      shift and go to state 129
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 69

    (40) comparacion -> valor operadorM . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    valor                          shift and go to state 98
    expresion                      shift and go to state 130
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 70

    (41) comparacion -> valor operadorL . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    valor                          shift and go to state 98
    expresion                      shift and go to state 131
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 71

    (89) operadorC -> MAYOR .

    VARIABLE        reduce using rule 89 (operadorC -> MAYOR .)
    INTEGER         reduce using rule 89 (operadorC -> MAYOR .)
    STRING          reduce using rule 89 (operadorC -> MAYOR .)
    FLOAT           reduce using rule 89 (operadorC -> MAYOR .)
    BOOLEAN         reduce using rule 89 (operadorC -> MAYOR .)
    NULL            reduce using rule 89 (operadorC -> MAYOR .)
    VARIABLEFUNC    reduce using rule 89 (operadorC -> MAYOR .)
    KEY             reduce using rule 89 (operadorC -> MAYOR .)
    CURRENT         reduce using rule 89 (operadorC -> MAYOR .)
    NEXT            reduce using rule 89 (operadorC -> MAYOR .)
    ARRAY           reduce using rule 89 (operadorC -> MAYOR .)
    TRUE            reduce using rule 89 (operadorC -> MAYOR .)
    FALSE           reduce using rule 89 (operadorC -> MAYOR .)
    GET             reduce using rule 89 (operadorC -> MAYOR .)
    POST            reduce using rule 89 (operadorC -> MAYOR .)


state 72

    (90) operadorC -> MENOR .

    VARIABLE        reduce using rule 90 (operadorC -> MENOR .)
    INTEGER         reduce using rule 90 (operadorC -> MENOR .)
    STRING          reduce using rule 90 (operadorC -> MENOR .)
    FLOAT           reduce using rule 90 (operadorC -> MENOR .)
    BOOLEAN         reduce using rule 90 (operadorC -> MENOR .)
    NULL            reduce using rule 90 (operadorC -> MENOR .)
    VARIABLEFUNC    reduce using rule 90 (operadorC -> MENOR .)
    KEY             reduce using rule 90 (operadorC -> MENOR .)
    CURRENT         reduce using rule 90 (operadorC -> MENOR .)
    NEXT            reduce using rule 90 (operadorC -> MENOR .)
    ARRAY           reduce using rule 90 (operadorC -> MENOR .)
    TRUE            reduce using rule 90 (operadorC -> MENOR .)
    FALSE           reduce using rule 90 (operadorC -> MENOR .)
    GET             reduce using rule 90 (operadorC -> MENOR .)
    POST            reduce using rule 90 (operadorC -> MENOR .)


state 73

    (91) operadorC -> COMPARACION .

    VARIABLE        reduce using rule 91 (operadorC -> COMPARACION .)
    INTEGER         reduce using rule 91 (operadorC -> COMPARACION .)
    STRING          reduce using rule 91 (operadorC -> COMPARACION .)
    FLOAT           reduce using rule 91 (operadorC -> COMPARACION .)
    BOOLEAN         reduce using rule 91 (operadorC -> COMPARACION .)
    NULL            reduce using rule 91 (operadorC -> COMPARACION .)
    VARIABLEFUNC    reduce using rule 91 (operadorC -> COMPARACION .)
    KEY             reduce using rule 91 (operadorC -> COMPARACION .)
    CURRENT         reduce using rule 91 (operadorC -> COMPARACION .)
    NEXT            reduce using rule 91 (operadorC -> COMPARACION .)
    ARRAY           reduce using rule 91 (operadorC -> COMPARACION .)
    TRUE            reduce using rule 91 (operadorC -> COMPARACION .)
    FALSE           reduce using rule 91 (operadorC -> COMPARACION .)
    GET             reduce using rule 91 (operadorC -> COMPARACION .)
    POST            reduce using rule 91 (operadorC -> COMPARACION .)


state 74

    (92) operadorC -> IDENTICO .

    VARIABLE        reduce using rule 92 (operadorC -> IDENTICO .)
    INTEGER         reduce using rule 92 (operadorC -> IDENTICO .)
    STRING          reduce using rule 92 (operadorC -> IDENTICO .)
    FLOAT           reduce using rule 92 (operadorC -> IDENTICO .)
    BOOLEAN         reduce using rule 92 (operadorC -> IDENTICO .)
    NULL            reduce using rule 92 (operadorC -> IDENTICO .)
    VARIABLEFUNC    reduce using rule 92 (operadorC -> IDENTICO .)
    KEY             reduce using rule 92 (operadorC -> IDENTICO .)
    CURRENT         reduce using rule 92 (operadorC -> IDENTICO .)
    NEXT            reduce using rule 92 (operadorC -> IDENTICO .)
    ARRAY           reduce using rule 92 (operadorC -> IDENTICO .)
    TRUE            reduce using rule 92 (operadorC -> IDENTICO .)
    FALSE           reduce using rule 92 (operadorC -> IDENTICO .)
    GET             reduce using rule 92 (operadorC -> IDENTICO .)
    POST            reduce using rule 92 (operadorC -> IDENTICO .)


state 75

    (93) operadorC -> DIFERENTE .

    VARIABLE        reduce using rule 93 (operadorC -> DIFERENTE .)
    INTEGER         reduce using rule 93 (operadorC -> DIFERENTE .)
    STRING          reduce using rule 93 (operadorC -> DIFERENTE .)
    FLOAT           reduce using rule 93 (operadorC -> DIFERENTE .)
    BOOLEAN         reduce using rule 93 (operadorC -> DIFERENTE .)
    NULL            reduce using rule 93 (operadorC -> DIFERENTE .)
    VARIABLEFUNC    reduce using rule 93 (operadorC -> DIFERENTE .)
    KEY             reduce using rule 93 (operadorC -> DIFERENTE .)
    CURRENT         reduce using rule 93 (operadorC -> DIFERENTE .)
    NEXT            reduce using rule 93 (operadorC -> DIFERENTE .)
    ARRAY           reduce using rule 93 (operadorC -> DIFERENTE .)
    TRUE            reduce using rule 93 (operadorC -> DIFERENTE .)
    FALSE           reduce using rule 93 (operadorC -> DIFERENTE .)
    GET             reduce using rule 93 (operadorC -> DIFERENTE .)
    POST            reduce using rule 93 (operadorC -> DIFERENTE .)


state 76

    (94) operadorC -> NOIDENTICO .

    VARIABLE        reduce using rule 94 (operadorC -> NOIDENTICO .)
    INTEGER         reduce using rule 94 (operadorC -> NOIDENTICO .)
    STRING          reduce using rule 94 (operadorC -> NOIDENTICO .)
    FLOAT           reduce using rule 94 (operadorC -> NOIDENTICO .)
    BOOLEAN         reduce using rule 94 (operadorC -> NOIDENTICO .)
    NULL            reduce using rule 94 (operadorC -> NOIDENTICO .)
    VARIABLEFUNC    reduce using rule 94 (operadorC -> NOIDENTICO .)
    KEY             reduce using rule 94 (operadorC -> NOIDENTICO .)
    CURRENT         reduce using rule 94 (operadorC -> NOIDENTICO .)
    NEXT            reduce using rule 94 (operadorC -> NOIDENTICO .)
    ARRAY           reduce using rule 94 (operadorC -> NOIDENTICO .)
    TRUE            reduce using rule 94 (operadorC -> NOIDENTICO .)
    FALSE           reduce using rule 94 (operadorC -> NOIDENTICO .)
    GET             reduce using rule 94 (operadorC -> NOIDENTICO .)
    POST            reduce using rule 94 (operadorC -> NOIDENTICO .)


state 77

    (95) operadorC -> MENOROIGUAL .

    VARIABLE        reduce using rule 95 (operadorC -> MENOROIGUAL .)
    INTEGER         reduce using rule 95 (operadorC -> MENOROIGUAL .)
    STRING          reduce using rule 95 (operadorC -> MENOROIGUAL .)
    FLOAT           reduce using rule 95 (operadorC -> MENOROIGUAL .)
    BOOLEAN         reduce using rule 95 (operadorC -> MENOROIGUAL .)
    NULL            reduce using rule 95 (operadorC -> MENOROIGUAL .)
    VARIABLEFUNC    reduce using rule 95 (operadorC -> MENOROIGUAL .)
    KEY             reduce using rule 95 (operadorC -> MENOROIGUAL .)
    CURRENT         reduce using rule 95 (operadorC -> MENOROIGUAL .)
    NEXT            reduce using rule 95 (operadorC -> MENOROIGUAL .)
    ARRAY           reduce using rule 95 (operadorC -> MENOROIGUAL .)
    TRUE            reduce using rule 95 (operadorC -> MENOROIGUAL .)
    FALSE           reduce using rule 95 (operadorC -> MENOROIGUAL .)
    GET             reduce using rule 95 (operadorC -> MENOROIGUAL .)
    POST            reduce using rule 95 (operadorC -> MENOROIGUAL .)


state 78

    (96) operadorC -> MAYOROIGUAL .

    VARIABLE        reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    INTEGER         reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    STRING          reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    FLOAT           reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    BOOLEAN         reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    NULL            reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    VARIABLEFUNC    reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    KEY             reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    CURRENT         reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    NEXT            reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    ARRAY           reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    TRUE            reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    FALSE           reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    GET             reduce using rule 96 (operadorC -> MAYOROIGUAL .)
    POST            reduce using rule 96 (operadorC -> MAYOROIGUAL .)


state 79

    (97) operadorC -> NAVEESPACIAL .

    VARIABLE        reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    INTEGER         reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    STRING          reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    FLOAT           reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    BOOLEAN         reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    NULL            reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    VARIABLEFUNC    reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    KEY             reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    CURRENT         reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    NEXT            reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    ARRAY           reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    TRUE            reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    FALSE           reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    GET             reduce using rule 97 (operadorC -> NAVEESPACIAL .)
    POST            reduce using rule 97 (operadorC -> NAVEESPACIAL .)


state 80

    (83) operadorM -> MAS .

    VARIABLE        reduce using rule 83 (operadorM -> MAS .)
    INTEGER         reduce using rule 83 (operadorM -> MAS .)
    STRING          reduce using rule 83 (operadorM -> MAS .)
    FLOAT           reduce using rule 83 (operadorM -> MAS .)
    BOOLEAN         reduce using rule 83 (operadorM -> MAS .)
    NULL            reduce using rule 83 (operadorM -> MAS .)
    VARIABLEFUNC    reduce using rule 83 (operadorM -> MAS .)
    KEY             reduce using rule 83 (operadorM -> MAS .)
    CURRENT         reduce using rule 83 (operadorM -> MAS .)
    NEXT            reduce using rule 83 (operadorM -> MAS .)
    ARRAY           reduce using rule 83 (operadorM -> MAS .)
    TRUE            reduce using rule 83 (operadorM -> MAS .)
    FALSE           reduce using rule 83 (operadorM -> MAS .)
    GET             reduce using rule 83 (operadorM -> MAS .)
    POST            reduce using rule 83 (operadorM -> MAS .)


state 81

    (84) operadorM -> RESTA .

    VARIABLE        reduce using rule 84 (operadorM -> RESTA .)
    INTEGER         reduce using rule 84 (operadorM -> RESTA .)
    STRING          reduce using rule 84 (operadorM -> RESTA .)
    FLOAT           reduce using rule 84 (operadorM -> RESTA .)
    BOOLEAN         reduce using rule 84 (operadorM -> RESTA .)
    NULL            reduce using rule 84 (operadorM -> RESTA .)
    VARIABLEFUNC    reduce using rule 84 (operadorM -> RESTA .)
    KEY             reduce using rule 84 (operadorM -> RESTA .)
    CURRENT         reduce using rule 84 (operadorM -> RESTA .)
    NEXT            reduce using rule 84 (operadorM -> RESTA .)
    ARRAY           reduce using rule 84 (operadorM -> RESTA .)
    TRUE            reduce using rule 84 (operadorM -> RESTA .)
    FALSE           reduce using rule 84 (operadorM -> RESTA .)
    GET             reduce using rule 84 (operadorM -> RESTA .)
    POST            reduce using rule 84 (operadorM -> RESTA .)


state 82

    (85) operadorM -> PROD .

    VARIABLE        reduce using rule 85 (operadorM -> PROD .)
    INTEGER         reduce using rule 85 (operadorM -> PROD .)
    STRING          reduce using rule 85 (operadorM -> PROD .)
    FLOAT           reduce using rule 85 (operadorM -> PROD .)
    BOOLEAN         reduce using rule 85 (operadorM -> PROD .)
    NULL            reduce using rule 85 (operadorM -> PROD .)
    VARIABLEFUNC    reduce using rule 85 (operadorM -> PROD .)
    KEY             reduce using rule 85 (operadorM -> PROD .)
    CURRENT         reduce using rule 85 (operadorM -> PROD .)
    NEXT            reduce using rule 85 (operadorM -> PROD .)
    ARRAY           reduce using rule 85 (operadorM -> PROD .)
    TRUE            reduce using rule 85 (operadorM -> PROD .)
    FALSE           reduce using rule 85 (operadorM -> PROD .)
    GET             reduce using rule 85 (operadorM -> PROD .)
    POST            reduce using rule 85 (operadorM -> PROD .)


state 83

    (86) operadorM -> DIV .

    VARIABLE        reduce using rule 86 (operadorM -> DIV .)
    INTEGER         reduce using rule 86 (operadorM -> DIV .)
    STRING          reduce using rule 86 (operadorM -> DIV .)
    FLOAT           reduce using rule 86 (operadorM -> DIV .)
    BOOLEAN         reduce using rule 86 (operadorM -> DIV .)
    NULL            reduce using rule 86 (operadorM -> DIV .)
    VARIABLEFUNC    reduce using rule 86 (operadorM -> DIV .)
    KEY             reduce using rule 86 (operadorM -> DIV .)
    CURRENT         reduce using rule 86 (operadorM -> DIV .)
    NEXT            reduce using rule 86 (operadorM -> DIV .)
    ARRAY           reduce using rule 86 (operadorM -> DIV .)
    TRUE            reduce using rule 86 (operadorM -> DIV .)
    FALSE           reduce using rule 86 (operadorM -> DIV .)
    GET             reduce using rule 86 (operadorM -> DIV .)
    POST            reduce using rule 86 (operadorM -> DIV .)


state 84

    (87) operadorM -> MOD .

    VARIABLE        reduce using rule 87 (operadorM -> MOD .)
    INTEGER         reduce using rule 87 (operadorM -> MOD .)
    STRING          reduce using rule 87 (operadorM -> MOD .)
    FLOAT           reduce using rule 87 (operadorM -> MOD .)
    BOOLEAN         reduce using rule 87 (operadorM -> MOD .)
    NULL            reduce using rule 87 (operadorM -> MOD .)
    VARIABLEFUNC    reduce using rule 87 (operadorM -> MOD .)
    KEY             reduce using rule 87 (operadorM -> MOD .)
    CURRENT         reduce using rule 87 (operadorM -> MOD .)
    NEXT            reduce using rule 87 (operadorM -> MOD .)
    ARRAY           reduce using rule 87 (operadorM -> MOD .)
    TRUE            reduce using rule 87 (operadorM -> MOD .)
    FALSE           reduce using rule 87 (operadorM -> MOD .)
    GET             reduce using rule 87 (operadorM -> MOD .)
    POST            reduce using rule 87 (operadorM -> MOD .)


state 85

    (88) operadorM -> POTENCIA .

    VARIABLE        reduce using rule 88 (operadorM -> POTENCIA .)
    INTEGER         reduce using rule 88 (operadorM -> POTENCIA .)
    STRING          reduce using rule 88 (operadorM -> POTENCIA .)
    FLOAT           reduce using rule 88 (operadorM -> POTENCIA .)
    BOOLEAN         reduce using rule 88 (operadorM -> POTENCIA .)
    NULL            reduce using rule 88 (operadorM -> POTENCIA .)
    VARIABLEFUNC    reduce using rule 88 (operadorM -> POTENCIA .)
    KEY             reduce using rule 88 (operadorM -> POTENCIA .)
    CURRENT         reduce using rule 88 (operadorM -> POTENCIA .)
    NEXT            reduce using rule 88 (operadorM -> POTENCIA .)
    ARRAY           reduce using rule 88 (operadorM -> POTENCIA .)
    TRUE            reduce using rule 88 (operadorM -> POTENCIA .)
    FALSE           reduce using rule 88 (operadorM -> POTENCIA .)
    GET             reduce using rule 88 (operadorM -> POTENCIA .)
    POST            reduce using rule 88 (operadorM -> POTENCIA .)


state 86

    (99) operadorL -> AND .

    VARIABLE        reduce using rule 99 (operadorL -> AND .)
    INTEGER         reduce using rule 99 (operadorL -> AND .)
    STRING          reduce using rule 99 (operadorL -> AND .)
    FLOAT           reduce using rule 99 (operadorL -> AND .)
    BOOLEAN         reduce using rule 99 (operadorL -> AND .)
    NULL            reduce using rule 99 (operadorL -> AND .)
    VARIABLEFUNC    reduce using rule 99 (operadorL -> AND .)
    KEY             reduce using rule 99 (operadorL -> AND .)
    CURRENT         reduce using rule 99 (operadorL -> AND .)
    NEXT            reduce using rule 99 (operadorL -> AND .)
    ARRAY           reduce using rule 99 (operadorL -> AND .)
    TRUE            reduce using rule 99 (operadorL -> AND .)
    FALSE           reduce using rule 99 (operadorL -> AND .)
    GET             reduce using rule 99 (operadorL -> AND .)
    POST            reduce using rule 99 (operadorL -> AND .)


state 87

    (100) operadorL -> XOR .

    VARIABLE        reduce using rule 100 (operadorL -> XOR .)
    INTEGER         reduce using rule 100 (operadorL -> XOR .)
    STRING          reduce using rule 100 (operadorL -> XOR .)
    FLOAT           reduce using rule 100 (operadorL -> XOR .)
    BOOLEAN         reduce using rule 100 (operadorL -> XOR .)
    NULL            reduce using rule 100 (operadorL -> XOR .)
    VARIABLEFUNC    reduce using rule 100 (operadorL -> XOR .)
    KEY             reduce using rule 100 (operadorL -> XOR .)
    CURRENT         reduce using rule 100 (operadorL -> XOR .)
    NEXT            reduce using rule 100 (operadorL -> XOR .)
    ARRAY           reduce using rule 100 (operadorL -> XOR .)
    TRUE            reduce using rule 100 (operadorL -> XOR .)
    FALSE           reduce using rule 100 (operadorL -> XOR .)
    GET             reduce using rule 100 (operadorL -> XOR .)
    POST            reduce using rule 100 (operadorL -> XOR .)


state 88

    (101) operadorL -> OR .

    VARIABLE        reduce using rule 101 (operadorL -> OR .)
    INTEGER         reduce using rule 101 (operadorL -> OR .)
    STRING          reduce using rule 101 (operadorL -> OR .)
    FLOAT           reduce using rule 101 (operadorL -> OR .)
    BOOLEAN         reduce using rule 101 (operadorL -> OR .)
    NULL            reduce using rule 101 (operadorL -> OR .)
    VARIABLEFUNC    reduce using rule 101 (operadorL -> OR .)
    KEY             reduce using rule 101 (operadorL -> OR .)
    CURRENT         reduce using rule 101 (operadorL -> OR .)
    NEXT            reduce using rule 101 (operadorL -> OR .)
    ARRAY           reduce using rule 101 (operadorL -> OR .)
    TRUE            reduce using rule 101 (operadorL -> OR .)
    FALSE           reduce using rule 101 (operadorL -> OR .)
    GET             reduce using rule 101 (operadorL -> OR .)
    POST            reduce using rule 101 (operadorL -> OR .)


state 89

    (102) operadorL -> NOT .

    VARIABLE        reduce using rule 102 (operadorL -> NOT .)
    INTEGER         reduce using rule 102 (operadorL -> NOT .)
    STRING          reduce using rule 102 (operadorL -> NOT .)
    FLOAT           reduce using rule 102 (operadorL -> NOT .)
    BOOLEAN         reduce using rule 102 (operadorL -> NOT .)
    NULL            reduce using rule 102 (operadorL -> NOT .)
    VARIABLEFUNC    reduce using rule 102 (operadorL -> NOT .)
    KEY             reduce using rule 102 (operadorL -> NOT .)
    CURRENT         reduce using rule 102 (operadorL -> NOT .)
    NEXT            reduce using rule 102 (operadorL -> NOT .)
    ARRAY           reduce using rule 102 (operadorL -> NOT .)
    TRUE            reduce using rule 102 (operadorL -> NOT .)
    FALSE           reduce using rule 102 (operadorL -> NOT .)
    GET             reduce using rule 102 (operadorL -> NOT .)
    POST            reduce using rule 102 (operadorL -> NOT .)


state 90

    (121) condicionalIF -> IF PIZQ . condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> IF PIZQ . condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> IF PIZQ . condicion PDER codigo
    (124) condicionalIF -> IF PIZQ . condicion PDER codigo condicionalELSE
    (75) condicion -> . expresion_logica
    (76) condicion -> . expresion_comparativa
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (71) expresion_aritmetica -> . valor operadorM expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER

    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    VARIABLE        shift and go to state 138
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    VARIABLEFUNC    shift and go to state 107

    condicion                      shift and go to state 132
    expresion_logica               shift and go to state 133
    expresion_comparativa          shift and go to state 134
    valor                          shift and go to state 135
    expresion                      shift and go to state 136
    booleano                       shift and go to state 137
    ingresoDatos                   shift and go to state 106
    arrayfunctions                 shift and go to state 139
    Arreglo                        shift and go to state 140
    expresion_aritmetica           shift and go to state 99
    funcAsig                       shift and go to state 102

state 91

    (129) iteracionFOR -> FOR PIZQ . asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> FOR PIZQ . asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante

    CONST           shift and go to state 144
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    VARIABLE        shift and go to state 61
    VARIABLEFUNC    shift and go to state 65

    asignacion                     shift and go to state 141
    ambito                         shift and go to state 142
    multiVariable                  shift and go to state 143
    multiConstante                 shift and go to state 145

state 92

    (131) bucleWHILE -> WHILE PIZQ . condicion PDER codigo
    (132) bucleWHILE -> WHILE PIZQ . condicion PDER LIZQ codigo LDER
    (75) condicion -> . expresion_logica
    (76) condicion -> . expresion_comparativa
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (71) expresion_aritmetica -> . valor operadorM expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER

    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    VARIABLE        shift and go to state 138
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    VARIABLEFUNC    shift and go to state 107

    condicion                      shift and go to state 146
    expresion_logica               shift and go to state 133
    expresion_comparativa          shift and go to state 134
    valor                          shift and go to state 135
    expresion                      shift and go to state 136
    booleano                       shift and go to state 137
    ingresoDatos                   shift and go to state 106
    arrayfunctions                 shift and go to state 139
    Arreglo                        shift and go to state 140
    expresion_aritmetica           shift and go to state 99
    funcAsig                       shift and go to state 102

state 93

    (133) bucleDO_WHILE -> DO LIZQ . codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> DO LIZQ . codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 147
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 94

    (138) indexacion -> VARIABLE CIZQ . INTEGER CDER
    (139) indexacion -> VARIABLE CIZQ . RESTA INTEGER CDER
    (140) indexacion -> VARIABLE CIZQ . INTEGER CDER FUSIONNULL
    (141) indexacion -> VARIABLE CIZQ . RESTA INTEGER CDER FUSIONNULL

    INTEGER         shift and go to state 148
    RESTA           shift and go to state 149


state 95

    (32) multiVariable -> VARIABLE COMA . multiVariable
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 61

    multiVariable                  shift and go to state 150

state 96

    (142) echo -> ECHO VARIABLE . PTOCO
    (59) expresion -> VARIABLE .
    (107) valor -> VARIABLE .

  ! shift/reduce conflict for PTOCO resolved as shift
  ! shift/reduce conflict for PTOCO resolved as shift
  ! reduce/reduce conflict for MAYOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 59 (expresion -> VARIABLE .)
    PTOCO           shift and go to state 151
    MAYOR           reduce using rule 59 (expresion -> VARIABLE .)
    MENOR           reduce using rule 59 (expresion -> VARIABLE .)
    COMPARACION     reduce using rule 59 (expresion -> VARIABLE .)
    IDENTICO        reduce using rule 59 (expresion -> VARIABLE .)
    DIFERENTE       reduce using rule 59 (expresion -> VARIABLE .)
    NOIDENTICO      reduce using rule 59 (expresion -> VARIABLE .)
    MENOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 59 (expresion -> VARIABLE .)
    MAS             reduce using rule 107 (valor -> VARIABLE .)
    RESTA           reduce using rule 107 (valor -> VARIABLE .)
    PROD            reduce using rule 107 (valor -> VARIABLE .)
    DIV             reduce using rule 107 (valor -> VARIABLE .)
    MOD             reduce using rule 107 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 107 (valor -> VARIABLE .)
    AND             reduce using rule 107 (valor -> VARIABLE .)
    XOR             reduce using rule 107 (valor -> VARIABLE .)
    OR              reduce using rule 107 (valor -> VARIABLE .)
    NOT             reduce using rule 107 (valor -> VARIABLE .)

  ! PTOCO           [ reduce using rule 59 (expresion -> VARIABLE .) ]
  ! PTOCO           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! COMPARACION     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! IDENTICO        [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! DIFERENTE       [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NOIDENTICO      [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NAVEESPACIAL    [ reduce using rule 107 (valor -> VARIABLE .) ]


state 97

    (143) echo -> ECHO expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 152
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 98

    (55) expresion -> valor .
    (71) expresion_aritmetica -> valor . operadorM expresion
    (72) expresion_logica -> valor . operadorL expresion
    (83) operadorM -> . MAS
    (84) operadorM -> . RESTA
    (85) operadorM -> . PROD
    (86) operadorM -> . DIV
    (87) operadorM -> . MOD
    (88) operadorM -> . POTENCIA
    (99) operadorL -> . AND
    (100) operadorL -> . XOR
    (101) operadorL -> . OR
    (102) operadorL -> . NOT

    PTOCO           reduce using rule 55 (expresion -> valor .)
    MAYOR           reduce using rule 55 (expresion -> valor .)
    MENOR           reduce using rule 55 (expresion -> valor .)
    COMPARACION     reduce using rule 55 (expresion -> valor .)
    IDENTICO        reduce using rule 55 (expresion -> valor .)
    DIFERENTE       reduce using rule 55 (expresion -> valor .)
    NOIDENTICO      reduce using rule 55 (expresion -> valor .)
    MENOROIGUAL     reduce using rule 55 (expresion -> valor .)
    MAYOROIGUAL     reduce using rule 55 (expresion -> valor .)
    NAVEESPACIAL    reduce using rule 55 (expresion -> valor .)
    COMA            reduce using rule 55 (expresion -> valor .)
    PDER            reduce using rule 55 (expresion -> valor .)
    FLECHA          reduce using rule 55 (expresion -> valor .)
    MAS             shift and go to state 80
    RESTA           shift and go to state 81
    PROD            shift and go to state 82
    DIV             shift and go to state 83
    MOD             shift and go to state 84
    POTENCIA        shift and go to state 85
    AND             shift and go to state 86
    XOR             shift and go to state 87
    OR              shift and go to state 88
    NOT             shift and go to state 89

    operadorM                      shift and go to state 154
    operadorL                      shift and go to state 155

state 99

    (56) expresion -> expresion_aritmetica .

    PTOCO           reduce using rule 56 (expresion -> expresion_aritmetica .)
    MAYOR           reduce using rule 56 (expresion -> expresion_aritmetica .)
    MENOR           reduce using rule 56 (expresion -> expresion_aritmetica .)
    COMPARACION     reduce using rule 56 (expresion -> expresion_aritmetica .)
    IDENTICO        reduce using rule 56 (expresion -> expresion_aritmetica .)
    DIFERENTE       reduce using rule 56 (expresion -> expresion_aritmetica .)
    NOIDENTICO      reduce using rule 56 (expresion -> expresion_aritmetica .)
    MENOROIGUAL     reduce using rule 56 (expresion -> expresion_aritmetica .)
    MAYOROIGUAL     reduce using rule 56 (expresion -> expresion_aritmetica .)
    NAVEESPACIAL    reduce using rule 56 (expresion -> expresion_aritmetica .)
    COMA            reduce using rule 56 (expresion -> expresion_aritmetica .)
    PDER            reduce using rule 56 (expresion -> expresion_aritmetica .)
    FLECHA          reduce using rule 56 (expresion -> expresion_aritmetica .)


state 100

    (57) expresion -> expresion_logica .

    PTOCO           reduce using rule 57 (expresion -> expresion_logica .)
    MAYOR           reduce using rule 57 (expresion -> expresion_logica .)
    MENOR           reduce using rule 57 (expresion -> expresion_logica .)
    COMPARACION     reduce using rule 57 (expresion -> expresion_logica .)
    IDENTICO        reduce using rule 57 (expresion -> expresion_logica .)
    DIFERENTE       reduce using rule 57 (expresion -> expresion_logica .)
    NOIDENTICO      reduce using rule 57 (expresion -> expresion_logica .)
    MENOROIGUAL     reduce using rule 57 (expresion -> expresion_logica .)
    MAYOROIGUAL     reduce using rule 57 (expresion -> expresion_logica .)
    NAVEESPACIAL    reduce using rule 57 (expresion -> expresion_logica .)
    COMA            reduce using rule 57 (expresion -> expresion_logica .)
    PDER            reduce using rule 57 (expresion -> expresion_logica .)
    FLECHA          reduce using rule 57 (expresion -> expresion_logica .)


state 101

    (58) expresion -> expresion_comparativa .

    PTOCO           reduce using rule 58 (expresion -> expresion_comparativa .)
    MAYOR           reduce using rule 58 (expresion -> expresion_comparativa .)
    MENOR           reduce using rule 58 (expresion -> expresion_comparativa .)
    COMPARACION     reduce using rule 58 (expresion -> expresion_comparativa .)
    IDENTICO        reduce using rule 58 (expresion -> expresion_comparativa .)
    DIFERENTE       reduce using rule 58 (expresion -> expresion_comparativa .)
    NOIDENTICO      reduce using rule 58 (expresion -> expresion_comparativa .)
    MENOROIGUAL     reduce using rule 58 (expresion -> expresion_comparativa .)
    MAYOROIGUAL     reduce using rule 58 (expresion -> expresion_comparativa .)
    NAVEESPACIAL    reduce using rule 58 (expresion -> expresion_comparativa .)
    COMA            reduce using rule 58 (expresion -> expresion_comparativa .)
    PDER            reduce using rule 58 (expresion -> expresion_comparativa .)
    FLECHA          reduce using rule 58 (expresion -> expresion_comparativa .)


state 102

    (60) expresion -> funcAsig .

    PTOCO           reduce using rule 60 (expresion -> funcAsig .)
    MAYOR           reduce using rule 60 (expresion -> funcAsig .)
    MENOR           reduce using rule 60 (expresion -> funcAsig .)
    COMPARACION     reduce using rule 60 (expresion -> funcAsig .)
    IDENTICO        reduce using rule 60 (expresion -> funcAsig .)
    DIFERENTE       reduce using rule 60 (expresion -> funcAsig .)
    NOIDENTICO      reduce using rule 60 (expresion -> funcAsig .)
    MENOROIGUAL     reduce using rule 60 (expresion -> funcAsig .)
    MAYOROIGUAL     reduce using rule 60 (expresion -> funcAsig .)
    NAVEESPACIAL    reduce using rule 60 (expresion -> funcAsig .)
    COMA            reduce using rule 60 (expresion -> funcAsig .)
    PDER            reduce using rule 60 (expresion -> funcAsig .)
    FLECHA          reduce using rule 60 (expresion -> funcAsig .)


state 103

    (61) expresion -> arrayfunctions .
    (110) valor -> arrayfunctions .

  ! reduce/reduce conflict for PTOCO resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MAYOR resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MENOR resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for COMA resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for PDER resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for FLECHA resolved using rule 61 (expresion -> arrayfunctions .)
    PTOCO           reduce using rule 61 (expresion -> arrayfunctions .)
    MAYOR           reduce using rule 61 (expresion -> arrayfunctions .)
    MENOR           reduce using rule 61 (expresion -> arrayfunctions .)
    COMPARACION     reduce using rule 61 (expresion -> arrayfunctions .)
    IDENTICO        reduce using rule 61 (expresion -> arrayfunctions .)
    DIFERENTE       reduce using rule 61 (expresion -> arrayfunctions .)
    NOIDENTICO      reduce using rule 61 (expresion -> arrayfunctions .)
    MENOROIGUAL     reduce using rule 61 (expresion -> arrayfunctions .)
    MAYOROIGUAL     reduce using rule 61 (expresion -> arrayfunctions .)
    NAVEESPACIAL    reduce using rule 61 (expresion -> arrayfunctions .)
    COMA            reduce using rule 61 (expresion -> arrayfunctions .)
    PDER            reduce using rule 61 (expresion -> arrayfunctions .)
    FLECHA          reduce using rule 61 (expresion -> arrayfunctions .)
    MAS             reduce using rule 110 (valor -> arrayfunctions .)
    RESTA           reduce using rule 110 (valor -> arrayfunctions .)
    PROD            reduce using rule 110 (valor -> arrayfunctions .)
    DIV             reduce using rule 110 (valor -> arrayfunctions .)
    MOD             reduce using rule 110 (valor -> arrayfunctions .)
    POTENCIA        reduce using rule 110 (valor -> arrayfunctions .)
    AND             reduce using rule 110 (valor -> arrayfunctions .)
    XOR             reduce using rule 110 (valor -> arrayfunctions .)
    OR              reduce using rule 110 (valor -> arrayfunctions .)
    NOT             reduce using rule 110 (valor -> arrayfunctions .)

  ! PTOCO           [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MAYOR           [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MENOR           [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! COMPARACION     [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! IDENTICO        [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! DIFERENTE       [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! NOIDENTICO      [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MENOROIGUAL     [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MAYOROIGUAL     [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! NAVEESPACIAL    [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! COMA            [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! PDER            [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! FLECHA          [ reduce using rule 110 (valor -> arrayfunctions .) ]


state 104

    (62) expresion -> Arreglo .
    (111) valor -> Arreglo .

  ! reduce/reduce conflict for PTOCO resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MAYOR resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MENOR resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for COMA resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for PDER resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for FLECHA resolved using rule 62 (expresion -> Arreglo .)
    PTOCO           reduce using rule 62 (expresion -> Arreglo .)
    MAYOR           reduce using rule 62 (expresion -> Arreglo .)
    MENOR           reduce using rule 62 (expresion -> Arreglo .)
    COMPARACION     reduce using rule 62 (expresion -> Arreglo .)
    IDENTICO        reduce using rule 62 (expresion -> Arreglo .)
    DIFERENTE       reduce using rule 62 (expresion -> Arreglo .)
    NOIDENTICO      reduce using rule 62 (expresion -> Arreglo .)
    MENOROIGUAL     reduce using rule 62 (expresion -> Arreglo .)
    MAYOROIGUAL     reduce using rule 62 (expresion -> Arreglo .)
    NAVEESPACIAL    reduce using rule 62 (expresion -> Arreglo .)
    COMA            reduce using rule 62 (expresion -> Arreglo .)
    PDER            reduce using rule 62 (expresion -> Arreglo .)
    FLECHA          reduce using rule 62 (expresion -> Arreglo .)
    MAS             reduce using rule 111 (valor -> Arreglo .)
    RESTA           reduce using rule 111 (valor -> Arreglo .)
    PROD            reduce using rule 111 (valor -> Arreglo .)
    DIV             reduce using rule 111 (valor -> Arreglo .)
    MOD             reduce using rule 111 (valor -> Arreglo .)
    POTENCIA        reduce using rule 111 (valor -> Arreglo .)
    AND             reduce using rule 111 (valor -> Arreglo .)
    XOR             reduce using rule 111 (valor -> Arreglo .)
    OR              reduce using rule 111 (valor -> Arreglo .)
    NOT             reduce using rule 111 (valor -> Arreglo .)

  ! PTOCO           [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MAYOR           [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MENOR           [ reduce using rule 111 (valor -> Arreglo .) ]
  ! COMPARACION     [ reduce using rule 111 (valor -> Arreglo .) ]
  ! IDENTICO        [ reduce using rule 111 (valor -> Arreglo .) ]
  ! DIFERENTE       [ reduce using rule 111 (valor -> Arreglo .) ]
  ! NOIDENTICO      [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MENOROIGUAL     [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MAYOROIGUAL     [ reduce using rule 111 (valor -> Arreglo .) ]
  ! NAVEESPACIAL    [ reduce using rule 111 (valor -> Arreglo .) ]
  ! COMA            [ reduce using rule 111 (valor -> Arreglo .) ]
  ! PDER            [ reduce using rule 111 (valor -> Arreglo .) ]
  ! FLECHA          [ reduce using rule 111 (valor -> Arreglo .) ]


state 105

    (104) valor -> booleano .
    (73) expresion_logica -> booleano .

  ! reduce/reduce conflict for PTOCO resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MAYOR resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MENOR resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for COMA resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for PDER resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for FLECHA resolved using rule 73 (expresion_logica -> booleano .)
    MAS             reduce using rule 104 (valor -> booleano .)
    RESTA           reduce using rule 104 (valor -> booleano .)
    PROD            reduce using rule 104 (valor -> booleano .)
    DIV             reduce using rule 104 (valor -> booleano .)
    MOD             reduce using rule 104 (valor -> booleano .)
    POTENCIA        reduce using rule 104 (valor -> booleano .)
    AND             reduce using rule 104 (valor -> booleano .)
    XOR             reduce using rule 104 (valor -> booleano .)
    OR              reduce using rule 104 (valor -> booleano .)
    NOT             reduce using rule 104 (valor -> booleano .)
    PTOCO           reduce using rule 73 (expresion_logica -> booleano .)
    MAYOR           reduce using rule 73 (expresion_logica -> booleano .)
    MENOR           reduce using rule 73 (expresion_logica -> booleano .)
    COMPARACION     reduce using rule 73 (expresion_logica -> booleano .)
    IDENTICO        reduce using rule 73 (expresion_logica -> booleano .)
    DIFERENTE       reduce using rule 73 (expresion_logica -> booleano .)
    NOIDENTICO      reduce using rule 73 (expresion_logica -> booleano .)
    MENOROIGUAL     reduce using rule 73 (expresion_logica -> booleano .)
    MAYOROIGUAL     reduce using rule 73 (expresion_logica -> booleano .)
    NAVEESPACIAL    reduce using rule 73 (expresion_logica -> booleano .)
    COMA            reduce using rule 73 (expresion_logica -> booleano .)
    PDER            reduce using rule 73 (expresion_logica -> booleano .)
    FLECHA          reduce using rule 73 (expresion_logica -> booleano .)

  ! PTOCO           [ reduce using rule 104 (valor -> booleano .) ]
  ! MAYOR           [ reduce using rule 104 (valor -> booleano .) ]
  ! MENOR           [ reduce using rule 104 (valor -> booleano .) ]
  ! COMPARACION     [ reduce using rule 104 (valor -> booleano .) ]
  ! IDENTICO        [ reduce using rule 104 (valor -> booleano .) ]
  ! DIFERENTE       [ reduce using rule 104 (valor -> booleano .) ]
  ! NOIDENTICO      [ reduce using rule 104 (valor -> booleano .) ]
  ! MENOROIGUAL     [ reduce using rule 104 (valor -> booleano .) ]
  ! MAYOROIGUAL     [ reduce using rule 104 (valor -> booleano .) ]
  ! NAVEESPACIAL    [ reduce using rule 104 (valor -> booleano .) ]
  ! COMA            [ reduce using rule 104 (valor -> booleano .) ]
  ! PDER            [ reduce using rule 104 (valor -> booleano .) ]
  ! FLECHA          [ reduce using rule 104 (valor -> booleano .) ]


state 106

    (109) valor -> ingresoDatos .

    MAS             reduce using rule 109 (valor -> ingresoDatos .)
    RESTA           reduce using rule 109 (valor -> ingresoDatos .)
    PROD            reduce using rule 109 (valor -> ingresoDatos .)
    DIV             reduce using rule 109 (valor -> ingresoDatos .)
    MOD             reduce using rule 109 (valor -> ingresoDatos .)
    POTENCIA        reduce using rule 109 (valor -> ingresoDatos .)
    AND             reduce using rule 109 (valor -> ingresoDatos .)
    XOR             reduce using rule 109 (valor -> ingresoDatos .)
    OR              reduce using rule 109 (valor -> ingresoDatos .)
    NOT             reduce using rule 109 (valor -> ingresoDatos .)
    PTOCO           reduce using rule 109 (valor -> ingresoDatos .)
    MAYOR           reduce using rule 109 (valor -> ingresoDatos .)
    MENOR           reduce using rule 109 (valor -> ingresoDatos .)
    COMPARACION     reduce using rule 109 (valor -> ingresoDatos .)
    IDENTICO        reduce using rule 109 (valor -> ingresoDatos .)
    DIFERENTE       reduce using rule 109 (valor -> ingresoDatos .)
    NOIDENTICO      reduce using rule 109 (valor -> ingresoDatos .)
    MENOROIGUAL     reduce using rule 109 (valor -> ingresoDatos .)
    MAYOROIGUAL     reduce using rule 109 (valor -> ingresoDatos .)
    NAVEESPACIAL    reduce using rule 109 (valor -> ingresoDatos .)
    COMA            reduce using rule 109 (valor -> ingresoDatos .)
    PDER            reduce using rule 109 (valor -> ingresoDatos .)
    FLECHA          reduce using rule 109 (valor -> ingresoDatos .)


state 107

    (48) funcAsig -> VARIABLEFUNC . PIZQ multiVariable PDER

    PIZQ            shift and go to state 156


state 108

    (68) arrayfunctions -> KEY . PIZQ avInner PDER

    PIZQ            shift and go to state 157


state 109

    (69) arrayfunctions -> CURRENT . PIZQ avInner PDER

    PIZQ            shift and go to state 158


state 110

    (70) arrayfunctions -> NEXT . PIZQ avInner PDER

    PIZQ            shift and go to state 159


state 111

    (135) list -> LIST PIZQ . valoresList PDER IGUAL VARIABLE PTOCO
    (136) valoresList -> . VARIABLE COMA valoresList
    (137) valoresList -> . VARIABLE

    VARIABLE        shift and go to state 161

    valoresList                    shift and go to state 160

state 112

    (98) terminar -> BREAK PTOCO .

                    reduce using rule 98 (terminar -> BREAK PTOCO .)
    CONST           reduce using rule 98 (terminar -> BREAK PTOCO .)
    IF              reduce using rule 98 (terminar -> BREAK PTOCO .)
    FOR             reduce using rule 98 (terminar -> BREAK PTOCO .)
    WHILE           reduce using rule 98 (terminar -> BREAK PTOCO .)
    DO              reduce using rule 98 (terminar -> BREAK PTOCO .)
    VARIABLE        reduce using rule 98 (terminar -> BREAK PTOCO .)
    ECHO            reduce using rule 98 (terminar -> BREAK PTOCO .)
    LIST            reduce using rule 98 (terminar -> BREAK PTOCO .)
    BREAK           reduce using rule 98 (terminar -> BREAK PTOCO .)
    FUNCTION        reduce using rule 98 (terminar -> BREAK PTOCO .)
    VARIABLEFUNC    reduce using rule 98 (terminar -> BREAK PTOCO .)
    GET             reduce using rule 98 (terminar -> BREAK PTOCO .)
    POST            reduce using rule 98 (terminar -> BREAK PTOCO .)
    KEY             reduce using rule 98 (terminar -> BREAK PTOCO .)
    CURRENT         reduce using rule 98 (terminar -> BREAK PTOCO .)
    NEXT            reduce using rule 98 (terminar -> BREAK PTOCO .)
    STATIC          reduce using rule 98 (terminar -> BREAK PTOCO .)
    VAR             reduce using rule 98 (terminar -> BREAK PTOCO .)
    GLOBAL          reduce using rule 98 (terminar -> BREAK PTOCO .)
    INTEGER         reduce using rule 98 (terminar -> BREAK PTOCO .)
    STRING          reduce using rule 98 (terminar -> BREAK PTOCO .)
    FLOAT           reduce using rule 98 (terminar -> BREAK PTOCO .)
    BOOLEAN         reduce using rule 98 (terminar -> BREAK PTOCO .)
    NULL            reduce using rule 98 (terminar -> BREAK PTOCO .)
    TRUE            reduce using rule 98 (terminar -> BREAK PTOCO .)
    FALSE           reduce using rule 98 (terminar -> BREAK PTOCO .)
    ARRAY           reduce using rule 98 (terminar -> BREAK PTOCO .)
    FIN             reduce using rule 98 (terminar -> BREAK PTOCO .)
    LDER            reduce using rule 98 (terminar -> BREAK PTOCO .)
    ELSE            reduce using rule 98 (terminar -> BREAK PTOCO .)
    ELSEIF          reduce using rule 98 (terminar -> BREAK PTOCO .)


state 113

    (81) funciones -> FUNCTION VARIABLEFUNC . PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> FUNCTION VARIABLEFUNC . PIZQ PDER LIZQ dentroFUNC LDER

    PIZQ            shift and go to state 162


state 114

    (46) funcCOD -> VARIABLEFUNC PIZQ . multiIngreso PDER PTOCO
    (47) funcCOD -> VARIABLEFUNC PIZQ . PDER PTOCO
    (42) multiIngreso -> . VARIABLE
    (43) multiIngreso -> . expresion
    (44) multiIngreso -> . VARIABLE COMA multiIngreso
    (45) multiIngreso -> . expresion COMA multiIngreso
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    PDER            shift and go to state 164
    VARIABLE        shift and go to state 165
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    multiIngreso                   shift and go to state 163
    expresion                      shift and go to state 166
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 115

    (34) multiConstante -> VARIABLEFUNC COMA . multiConstante
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante

    VARIABLEFUNC    shift and go to state 65

    multiConstante                 shift and go to state 167

state 116

    (113) ingresoDatos -> GET CIZQ . STRING CDER

    STRING          shift and go to state 168


state 117

    (114) ingresoDatos -> POST CIZQ . STRING CDER

    STRING          shift and go to state 169


state 118

    (65) arrayfunctionsC -> KEY PIZQ . avInner PDER PTOCO
    (68) arrayfunctions -> KEY PIZQ . avInner PDER
    (63) avInner -> . Arreglo
    (64) avInner -> . VARIABLE
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    VARIABLE        shift and go to state 172
    ARRAY           shift and go to state 57

    avInner                        shift and go to state 170
    Arreglo                        shift and go to state 171

state 119

    (66) arrayfunctionsC -> CURRENT PIZQ . avInner PDER PTOCO
    (69) arrayfunctions -> CURRENT PIZQ . avInner PDER
    (63) avInner -> . Arreglo
    (64) avInner -> . VARIABLE
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    VARIABLE        shift and go to state 172
    ARRAY           shift and go to state 57

    avInner                        shift and go to state 173
    Arreglo                        shift and go to state 171

state 120

    (67) arrayfunctionsC -> NEXT PIZQ . avInner PDER PTOCO
    (70) arrayfunctions -> NEXT PIZQ . avInner PDER
    (63) avInner -> . Arreglo
    (64) avInner -> . VARIABLE
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    VARIABLE        shift and go to state 172
    ARRAY           shift and go to state 57

    avInner                        shift and go to state 174
    Arreglo                        shift and go to state 171

state 121

    (49) Arreglo -> ARRAY PIZQ . innerColection PDER
    (51) innerColection -> . expresion
    (52) innerColection -> . Asig
    (53) innerColection -> . expresion COMA innerColection
    (54) innerColection -> . Asig COMA innerColection
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (50) Asig -> . expresion FLECHA expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    innerColection                 shift and go to state 175
    expresion                      shift and go to state 176
    Asig                           shift and go to state 177
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 122

    (23) asignacion -> ambito multiVariable IGUAL . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 178
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 123

    (27) declaracion -> ambito multiVariable PTOCO .

                    reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    CONST           reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    IF              reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    FOR             reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    WHILE           reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    DO              reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    VARIABLE        reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    ECHO            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    LIST            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    BREAK           reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    FUNCTION        reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    VARIABLEFUNC    reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    GET             reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    POST            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    KEY             reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    CURRENT         reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    NEXT            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    STATIC          reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    VAR             reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    GLOBAL          reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    INTEGER         reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    STRING          reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    FLOAT           reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    BOOLEAN         reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    NULL            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    TRUE            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    FALSE           reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    ARRAY           reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    FIN             reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    LDER            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    ELSE            reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)
    ELSEIF          reduce using rule 27 (declaracion -> ambito multiVariable PTOCO .)


state 124

    (24) asignacion -> multiVariable IGUAL expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 179
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 125

    (59) expresion -> VARIABLE .
    (107) valor -> VARIABLE .

  ! reduce/reduce conflict for PTOCO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MAYOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMA resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for FLECHA resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for PDER resolved using rule 59 (expresion -> VARIABLE .)
    PTOCO           reduce using rule 59 (expresion -> VARIABLE .)
    MAYOR           reduce using rule 59 (expresion -> VARIABLE .)
    MENOR           reduce using rule 59 (expresion -> VARIABLE .)
    COMPARACION     reduce using rule 59 (expresion -> VARIABLE .)
    IDENTICO        reduce using rule 59 (expresion -> VARIABLE .)
    DIFERENTE       reduce using rule 59 (expresion -> VARIABLE .)
    NOIDENTICO      reduce using rule 59 (expresion -> VARIABLE .)
    MENOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 59 (expresion -> VARIABLE .)
    COMA            reduce using rule 59 (expresion -> VARIABLE .)
    FLECHA          reduce using rule 59 (expresion -> VARIABLE .)
    PDER            reduce using rule 59 (expresion -> VARIABLE .)
    MAS             reduce using rule 107 (valor -> VARIABLE .)
    RESTA           reduce using rule 107 (valor -> VARIABLE .)
    PROD            reduce using rule 107 (valor -> VARIABLE .)
    DIV             reduce using rule 107 (valor -> VARIABLE .)
    MOD             reduce using rule 107 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 107 (valor -> VARIABLE .)
    AND             reduce using rule 107 (valor -> VARIABLE .)
    XOR             reduce using rule 107 (valor -> VARIABLE .)
    OR              reduce using rule 107 (valor -> VARIABLE .)
    NOT             reduce using rule 107 (valor -> VARIABLE .)

  ! PTOCO           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! COMPARACION     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! IDENTICO        [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! DIFERENTE       [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NOIDENTICO      [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NAVEESPACIAL    [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! COMA            [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! FLECHA          [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! PDER            [ reduce using rule 107 (valor -> VARIABLE .) ]


state 126

    (25) asignacion -> CONST multiConstante IGUAL . expresion PTOCO
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 180
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 127

    (29) declaracion -> CONST multiConstante PTOCO .

                    reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    CONST           reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    IF              reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    FOR             reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    WHILE           reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    DO              reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    VARIABLE        reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    ECHO            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    LIST            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    BREAK           reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    FUNCTION        reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    VARIABLEFUNC    reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    GET             reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    POST            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    KEY             reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    CURRENT         reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    NEXT            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    STATIC          reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    VAR             reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    GLOBAL          reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    INTEGER         reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    STRING          reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    FLOAT           reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    BOOLEAN         reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    NULL            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    TRUE            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    FALSE           reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    ARRAY           reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    FIN             reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    LDER            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    ELSE            reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)
    ELSEIF          reduce using rule 29 (declaracion -> CONST multiConstante PTOCO .)


state 128

    (26) asignacion -> multiConstante IGUAL expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 181
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 129

    (39) comparacion -> valor operadorC expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 182
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 130

    (40) comparacion -> valor operadorM expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 183
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 131

    (41) comparacion -> valor operadorL expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 184
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 132

    (121) condicionalIF -> IF PIZQ condicion . PDER LIZQ codigo LDER
    (122) condicionalIF -> IF PIZQ condicion . PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> IF PIZQ condicion . PDER codigo
    (124) condicionalIF -> IF PIZQ condicion . PDER codigo condicionalELSE

    PDER            shift and go to state 185


state 133

    (75) condicion -> expresion_logica .
    (57) expresion -> expresion_logica .

    PDER            reduce using rule 75 (condicion -> expresion_logica .)
    PTOCO           reduce using rule 75 (condicion -> expresion_logica .)
    MAYOR           reduce using rule 57 (expresion -> expresion_logica .)
    MENOR           reduce using rule 57 (expresion -> expresion_logica .)
    COMPARACION     reduce using rule 57 (expresion -> expresion_logica .)
    IDENTICO        reduce using rule 57 (expresion -> expresion_logica .)
    DIFERENTE       reduce using rule 57 (expresion -> expresion_logica .)
    NOIDENTICO      reduce using rule 57 (expresion -> expresion_logica .)
    MENOROIGUAL     reduce using rule 57 (expresion -> expresion_logica .)
    MAYOROIGUAL     reduce using rule 57 (expresion -> expresion_logica .)
    NAVEESPACIAL    reduce using rule 57 (expresion -> expresion_logica .)


state 134

    (76) condicion -> expresion_comparativa .
    (58) expresion -> expresion_comparativa .

    PDER            reduce using rule 76 (condicion -> expresion_comparativa .)
    PTOCO           reduce using rule 76 (condicion -> expresion_comparativa .)
    MAYOR           reduce using rule 58 (expresion -> expresion_comparativa .)
    MENOR           reduce using rule 58 (expresion -> expresion_comparativa .)
    COMPARACION     reduce using rule 58 (expresion -> expresion_comparativa .)
    IDENTICO        reduce using rule 58 (expresion -> expresion_comparativa .)
    DIFERENTE       reduce using rule 58 (expresion -> expresion_comparativa .)
    NOIDENTICO      reduce using rule 58 (expresion -> expresion_comparativa .)
    MENOROIGUAL     reduce using rule 58 (expresion -> expresion_comparativa .)
    MAYOROIGUAL     reduce using rule 58 (expresion -> expresion_comparativa .)
    NAVEESPACIAL    reduce using rule 58 (expresion -> expresion_comparativa .)


state 135

    (72) expresion_logica -> valor . operadorL expresion
    (55) expresion -> valor .
    (71) expresion_aritmetica -> valor . operadorM expresion
    (99) operadorL -> . AND
    (100) operadorL -> . XOR
    (101) operadorL -> . OR
    (102) operadorL -> . NOT
    (83) operadorM -> . MAS
    (84) operadorM -> . RESTA
    (85) operadorM -> . PROD
    (86) operadorM -> . DIV
    (87) operadorM -> . MOD
    (88) operadorM -> . POTENCIA

    MAYOR           reduce using rule 55 (expresion -> valor .)
    MENOR           reduce using rule 55 (expresion -> valor .)
    COMPARACION     reduce using rule 55 (expresion -> valor .)
    IDENTICO        reduce using rule 55 (expresion -> valor .)
    DIFERENTE       reduce using rule 55 (expresion -> valor .)
    NOIDENTICO      reduce using rule 55 (expresion -> valor .)
    MENOROIGUAL     reduce using rule 55 (expresion -> valor .)
    MAYOROIGUAL     reduce using rule 55 (expresion -> valor .)
    NAVEESPACIAL    reduce using rule 55 (expresion -> valor .)
    AND             shift and go to state 86
    XOR             shift and go to state 87
    OR              shift and go to state 88
    NOT             shift and go to state 89
    MAS             shift and go to state 80
    RESTA           shift and go to state 81
    PROD            shift and go to state 82
    DIV             shift and go to state 83
    MOD             shift and go to state 84
    POTENCIA        shift and go to state 85

    operadorL                      shift and go to state 155
    operadorM                      shift and go to state 154

state 136

    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 137

    (73) expresion_logica -> booleano .
    (104) valor -> booleano .

  ! reduce/reduce conflict for MAYOR resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MENOR resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 73 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 73 (expresion_logica -> booleano .)
    PDER            reduce using rule 73 (expresion_logica -> booleano .)
    MAYOR           reduce using rule 73 (expresion_logica -> booleano .)
    MENOR           reduce using rule 73 (expresion_logica -> booleano .)
    COMPARACION     reduce using rule 73 (expresion_logica -> booleano .)
    IDENTICO        reduce using rule 73 (expresion_logica -> booleano .)
    DIFERENTE       reduce using rule 73 (expresion_logica -> booleano .)
    NOIDENTICO      reduce using rule 73 (expresion_logica -> booleano .)
    MENOROIGUAL     reduce using rule 73 (expresion_logica -> booleano .)
    MAYOROIGUAL     reduce using rule 73 (expresion_logica -> booleano .)
    NAVEESPACIAL    reduce using rule 73 (expresion_logica -> booleano .)
    PTOCO           reduce using rule 73 (expresion_logica -> booleano .)
    AND             reduce using rule 104 (valor -> booleano .)
    XOR             reduce using rule 104 (valor -> booleano .)
    OR              reduce using rule 104 (valor -> booleano .)
    NOT             reduce using rule 104 (valor -> booleano .)
    MAS             reduce using rule 104 (valor -> booleano .)
    RESTA           reduce using rule 104 (valor -> booleano .)
    PROD            reduce using rule 104 (valor -> booleano .)
    DIV             reduce using rule 104 (valor -> booleano .)
    MOD             reduce using rule 104 (valor -> booleano .)
    POTENCIA        reduce using rule 104 (valor -> booleano .)

  ! MAYOR           [ reduce using rule 104 (valor -> booleano .) ]
  ! MENOR           [ reduce using rule 104 (valor -> booleano .) ]
  ! COMPARACION     [ reduce using rule 104 (valor -> booleano .) ]
  ! IDENTICO        [ reduce using rule 104 (valor -> booleano .) ]
  ! DIFERENTE       [ reduce using rule 104 (valor -> booleano .) ]
  ! NOIDENTICO      [ reduce using rule 104 (valor -> booleano .) ]
  ! MENOROIGUAL     [ reduce using rule 104 (valor -> booleano .) ]
  ! MAYOROIGUAL     [ reduce using rule 104 (valor -> booleano .) ]
  ! NAVEESPACIAL    [ reduce using rule 104 (valor -> booleano .) ]


state 138

    (107) valor -> VARIABLE .
    (59) expresion -> VARIABLE .

  ! reduce/reduce conflict for MAYOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 59 (expresion -> VARIABLE .)
    AND             reduce using rule 107 (valor -> VARIABLE .)
    XOR             reduce using rule 107 (valor -> VARIABLE .)
    OR              reduce using rule 107 (valor -> VARIABLE .)
    NOT             reduce using rule 107 (valor -> VARIABLE .)
    MAS             reduce using rule 107 (valor -> VARIABLE .)
    RESTA           reduce using rule 107 (valor -> VARIABLE .)
    PROD            reduce using rule 107 (valor -> VARIABLE .)
    DIV             reduce using rule 107 (valor -> VARIABLE .)
    MOD             reduce using rule 107 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 107 (valor -> VARIABLE .)
    MAYOR           reduce using rule 59 (expresion -> VARIABLE .)
    MENOR           reduce using rule 59 (expresion -> VARIABLE .)
    COMPARACION     reduce using rule 59 (expresion -> VARIABLE .)
    IDENTICO        reduce using rule 59 (expresion -> VARIABLE .)
    DIFERENTE       reduce using rule 59 (expresion -> VARIABLE .)
    NOIDENTICO      reduce using rule 59 (expresion -> VARIABLE .)
    MENOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 59 (expresion -> VARIABLE .)

  ! MAYOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! COMPARACION     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! IDENTICO        [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! DIFERENTE       [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NOIDENTICO      [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NAVEESPACIAL    [ reduce using rule 107 (valor -> VARIABLE .) ]


state 139

    (110) valor -> arrayfunctions .
    (61) expresion -> arrayfunctions .

  ! reduce/reduce conflict for MAYOR resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MENOR resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 61 (expresion -> arrayfunctions .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 61 (expresion -> arrayfunctions .)
    AND             reduce using rule 110 (valor -> arrayfunctions .)
    XOR             reduce using rule 110 (valor -> arrayfunctions .)
    OR              reduce using rule 110 (valor -> arrayfunctions .)
    NOT             reduce using rule 110 (valor -> arrayfunctions .)
    MAS             reduce using rule 110 (valor -> arrayfunctions .)
    RESTA           reduce using rule 110 (valor -> arrayfunctions .)
    PROD            reduce using rule 110 (valor -> arrayfunctions .)
    DIV             reduce using rule 110 (valor -> arrayfunctions .)
    MOD             reduce using rule 110 (valor -> arrayfunctions .)
    POTENCIA        reduce using rule 110 (valor -> arrayfunctions .)
    MAYOR           reduce using rule 61 (expresion -> arrayfunctions .)
    MENOR           reduce using rule 61 (expresion -> arrayfunctions .)
    COMPARACION     reduce using rule 61 (expresion -> arrayfunctions .)
    IDENTICO        reduce using rule 61 (expresion -> arrayfunctions .)
    DIFERENTE       reduce using rule 61 (expresion -> arrayfunctions .)
    NOIDENTICO      reduce using rule 61 (expresion -> arrayfunctions .)
    MENOROIGUAL     reduce using rule 61 (expresion -> arrayfunctions .)
    MAYOROIGUAL     reduce using rule 61 (expresion -> arrayfunctions .)
    NAVEESPACIAL    reduce using rule 61 (expresion -> arrayfunctions .)

  ! MAYOR           [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MENOR           [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! COMPARACION     [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! IDENTICO        [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! DIFERENTE       [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! NOIDENTICO      [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MENOROIGUAL     [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! MAYOROIGUAL     [ reduce using rule 110 (valor -> arrayfunctions .) ]
  ! NAVEESPACIAL    [ reduce using rule 110 (valor -> arrayfunctions .) ]


state 140

    (111) valor -> Arreglo .
    (62) expresion -> Arreglo .

  ! reduce/reduce conflict for MAYOR resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MENOR resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 62 (expresion -> Arreglo .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 62 (expresion -> Arreglo .)
    AND             reduce using rule 111 (valor -> Arreglo .)
    XOR             reduce using rule 111 (valor -> Arreglo .)
    OR              reduce using rule 111 (valor -> Arreglo .)
    NOT             reduce using rule 111 (valor -> Arreglo .)
    MAS             reduce using rule 111 (valor -> Arreglo .)
    RESTA           reduce using rule 111 (valor -> Arreglo .)
    PROD            reduce using rule 111 (valor -> Arreglo .)
    DIV             reduce using rule 111 (valor -> Arreglo .)
    MOD             reduce using rule 111 (valor -> Arreglo .)
    POTENCIA        reduce using rule 111 (valor -> Arreglo .)
    MAYOR           reduce using rule 62 (expresion -> Arreglo .)
    MENOR           reduce using rule 62 (expresion -> Arreglo .)
    COMPARACION     reduce using rule 62 (expresion -> Arreglo .)
    IDENTICO        reduce using rule 62 (expresion -> Arreglo .)
    DIFERENTE       reduce using rule 62 (expresion -> Arreglo .)
    NOIDENTICO      reduce using rule 62 (expresion -> Arreglo .)
    MENOROIGUAL     reduce using rule 62 (expresion -> Arreglo .)
    MAYOROIGUAL     reduce using rule 62 (expresion -> Arreglo .)
    NAVEESPACIAL    reduce using rule 62 (expresion -> Arreglo .)

  ! MAYOR           [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MENOR           [ reduce using rule 111 (valor -> Arreglo .) ]
  ! COMPARACION     [ reduce using rule 111 (valor -> Arreglo .) ]
  ! IDENTICO        [ reduce using rule 111 (valor -> Arreglo .) ]
  ! DIFERENTE       [ reduce using rule 111 (valor -> Arreglo .) ]
  ! NOIDENTICO      [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MENOROIGUAL     [ reduce using rule 111 (valor -> Arreglo .) ]
  ! MAYOROIGUAL     [ reduce using rule 111 (valor -> Arreglo .) ]
  ! NAVEESPACIAL    [ reduce using rule 111 (valor -> Arreglo .) ]


state 141

    (129) iteracionFOR -> FOR PIZQ asignacion . condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> FOR PIZQ asignacion . condicion PTOCO adicion PDER LIZQ codigo LDER
    (75) condicion -> . expresion_logica
    (76) condicion -> . expresion_comparativa
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (71) expresion_aritmetica -> . valor operadorM expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER

    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    VARIABLE        shift and go to state 138
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    VARIABLEFUNC    shift and go to state 107

    condicion                      shift and go to state 186
    expresion_logica               shift and go to state 133
    expresion_comparativa          shift and go to state 134
    valor                          shift and go to state 135
    expresion                      shift and go to state 136
    booleano                       shift and go to state 137
    ingresoDatos                   shift and go to state 106
    arrayfunctions                 shift and go to state 139
    Arreglo                        shift and go to state 140
    expresion_aritmetica           shift and go to state 99
    funcAsig                       shift and go to state 102

state 142

    (23) asignacion -> ambito . multiVariable IGUAL expresion PTOCO
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 61

    multiVariable                  shift and go to state 187

state 143

    (24) asignacion -> multiVariable . IGUAL expresion PTOCO

    IGUAL           shift and go to state 62


state 144

    (25) asignacion -> CONST . multiConstante IGUAL expresion PTOCO
    (38) ambito -> CONST .
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante

    VARIABLE        reduce using rule 38 (ambito -> CONST .)
    VARIABLEFUNC    shift and go to state 65

    multiConstante                 shift and go to state 188

state 145

    (26) asignacion -> multiConstante . IGUAL expresion PTOCO

    IGUAL           shift and go to state 66


state 146

    (131) bucleWHILE -> WHILE PIZQ condicion . PDER codigo
    (132) bucleWHILE -> WHILE PIZQ condicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 189


state 147

    (133) bucleDO_WHILE -> DO LIZQ codigo . LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> DO LIZQ codigo . LDER WHILE PIZQ condicion PDER LIZQ codigo LDER

    LDER            shift and go to state 190


state 148

    (138) indexacion -> VARIABLE CIZQ INTEGER . CDER
    (140) indexacion -> VARIABLE CIZQ INTEGER . CDER FUSIONNULL

    CDER            shift and go to state 191


state 149

    (139) indexacion -> VARIABLE CIZQ RESTA . INTEGER CDER
    (141) indexacion -> VARIABLE CIZQ RESTA . INTEGER CDER FUSIONNULL

    INTEGER         shift and go to state 192


state 150

    (32) multiVariable -> VARIABLE COMA multiVariable .

    IGUAL           reduce using rule 32 (multiVariable -> VARIABLE COMA multiVariable .)
    PTOCO           reduce using rule 32 (multiVariable -> VARIABLE COMA multiVariable .)
    PDER            reduce using rule 32 (multiVariable -> VARIABLE COMA multiVariable .)


state 151

    (142) echo -> ECHO VARIABLE PTOCO .

                    reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    CONST           reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    IF              reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    FOR             reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    WHILE           reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    DO              reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    VARIABLE        reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    ECHO            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    LIST            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    BREAK           reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    FUNCTION        reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    VARIABLEFUNC    reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    GET             reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    POST            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    KEY             reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    CURRENT         reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    NEXT            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    STATIC          reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    VAR             reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    GLOBAL          reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    INTEGER         reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    STRING          reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    FLOAT           reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    BOOLEAN         reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    NULL            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    TRUE            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    FALSE           reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    ARRAY           reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    FIN             reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    LDER            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    ELSE            reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)
    ELSEIF          reduce using rule 142 (echo -> ECHO VARIABLE PTOCO .)


state 152

    (143) echo -> ECHO expresion PTOCO .

                    reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    CONST           reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    IF              reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    FOR             reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    WHILE           reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    DO              reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    VARIABLE        reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    ECHO            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    LIST            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    BREAK           reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    FUNCTION        reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    GET             reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    POST            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    KEY             reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    CURRENT         reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    NEXT            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    STATIC          reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    VAR             reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    GLOBAL          reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    INTEGER         reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    STRING          reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    FLOAT           reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    BOOLEAN         reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    NULL            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    TRUE            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    FALSE           reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    ARRAY           reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    FIN             reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    LDER            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    ELSE            reduce using rule 143 (echo -> ECHO expresion PTOCO .)
    ELSEIF          reduce using rule 143 (echo -> ECHO expresion PTOCO .)


state 153

    (74) expresion_comparativa -> expresion operadorC . expresion
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 193
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 154

    (71) expresion_aritmetica -> valor operadorM . expresion
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    valor                          shift and go to state 98
    expresion                      shift and go to state 194
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 155

    (72) expresion_logica -> valor operadorL . expresion
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    valor                          shift and go to state 98
    expresion                      shift and go to state 195
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 156

    (48) funcAsig -> VARIABLEFUNC PIZQ . multiVariable PDER
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 61

    multiVariable                  shift and go to state 196

state 157

    (68) arrayfunctions -> KEY PIZQ . avInner PDER
    (63) avInner -> . Arreglo
    (64) avInner -> . VARIABLE
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    VARIABLE        shift and go to state 172
    ARRAY           shift and go to state 57

    avInner                        shift and go to state 197
    Arreglo                        shift and go to state 171

state 158

    (69) arrayfunctions -> CURRENT PIZQ . avInner PDER
    (63) avInner -> . Arreglo
    (64) avInner -> . VARIABLE
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    VARIABLE        shift and go to state 172
    ARRAY           shift and go to state 57

    avInner                        shift and go to state 198
    Arreglo                        shift and go to state 171

state 159

    (70) arrayfunctions -> NEXT PIZQ . avInner PDER
    (63) avInner -> . Arreglo
    (64) avInner -> . VARIABLE
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    VARIABLE        shift and go to state 172
    ARRAY           shift and go to state 57

    avInner                        shift and go to state 199
    Arreglo                        shift and go to state 171

state 160

    (135) list -> LIST PIZQ valoresList . PDER IGUAL VARIABLE PTOCO

    PDER            shift and go to state 200


state 161

    (136) valoresList -> VARIABLE . COMA valoresList
    (137) valoresList -> VARIABLE .

    COMA            shift and go to state 201
    PDER            reduce using rule 137 (valoresList -> VARIABLE .)


state 162

    (81) funciones -> FUNCTION VARIABLEFUNC PIZQ . multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> FUNCTION VARIABLEFUNC PIZQ . PDER LIZQ dentroFUNC LDER
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable

    PDER            shift and go to state 203
    VARIABLE        shift and go to state 61

    multiVariable                  shift and go to state 202

state 163

    (46) funcCOD -> VARIABLEFUNC PIZQ multiIngreso . PDER PTOCO

    PDER            shift and go to state 204


state 164

    (47) funcCOD -> VARIABLEFUNC PIZQ PDER . PTOCO

    PTOCO           shift and go to state 205


state 165

    (42) multiIngreso -> VARIABLE .
    (44) multiIngreso -> VARIABLE . COMA multiIngreso
    (59) expresion -> VARIABLE .
    (107) valor -> VARIABLE .

  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for PDER resolved using rule 42 (multiIngreso -> VARIABLE .)
  ! shift/reduce conflict for COMA resolved as shift
  ! reduce/reduce conflict for MAYOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for PDER resolved using rule 42 (multiIngreso -> VARIABLE .)
    PDER            reduce using rule 42 (multiIngreso -> VARIABLE .)
    COMA            shift and go to state 206
    MAYOR           reduce using rule 59 (expresion -> VARIABLE .)
    MENOR           reduce using rule 59 (expresion -> VARIABLE .)
    COMPARACION     reduce using rule 59 (expresion -> VARIABLE .)
    IDENTICO        reduce using rule 59 (expresion -> VARIABLE .)
    DIFERENTE       reduce using rule 59 (expresion -> VARIABLE .)
    NOIDENTICO      reduce using rule 59 (expresion -> VARIABLE .)
    MENOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 59 (expresion -> VARIABLE .)
    MAS             reduce using rule 107 (valor -> VARIABLE .)
    RESTA           reduce using rule 107 (valor -> VARIABLE .)
    PROD            reduce using rule 107 (valor -> VARIABLE .)
    DIV             reduce using rule 107 (valor -> VARIABLE .)
    MOD             reduce using rule 107 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 107 (valor -> VARIABLE .)
    AND             reduce using rule 107 (valor -> VARIABLE .)
    XOR             reduce using rule 107 (valor -> VARIABLE .)
    OR              reduce using rule 107 (valor -> VARIABLE .)
    NOT             reduce using rule 107 (valor -> VARIABLE .)

  ! COMA            [ reduce using rule 59 (expresion -> VARIABLE .) ]
  ! PDER            [ reduce using rule 59 (expresion -> VARIABLE .) ]
  ! COMA            [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! COMPARACION     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! IDENTICO        [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! DIFERENTE       [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NOIDENTICO      [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NAVEESPACIAL    [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! PDER            [ reduce using rule 107 (valor -> VARIABLE .) ]


state 166

    (43) multiIngreso -> expresion .
    (45) multiIngreso -> expresion . COMA multiIngreso
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PDER            reduce using rule 43 (multiIngreso -> expresion .)
    COMA            shift and go to state 207
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 167

    (34) multiConstante -> VARIABLEFUNC COMA multiConstante .

    IGUAL           reduce using rule 34 (multiConstante -> VARIABLEFUNC COMA multiConstante .)
    PTOCO           reduce using rule 34 (multiConstante -> VARIABLEFUNC COMA multiConstante .)


state 168

    (113) ingresoDatos -> GET CIZQ STRING . CDER

    CDER            shift and go to state 208


state 169

    (114) ingresoDatos -> POST CIZQ STRING . CDER

    CDER            shift and go to state 209


state 170

    (65) arrayfunctionsC -> KEY PIZQ avInner . PDER PTOCO
    (68) arrayfunctions -> KEY PIZQ avInner . PDER

    PDER            shift and go to state 210


state 171

    (63) avInner -> Arreglo .

    PDER            reduce using rule 63 (avInner -> Arreglo .)


state 172

    (64) avInner -> VARIABLE .

    PDER            reduce using rule 64 (avInner -> VARIABLE .)


state 173

    (66) arrayfunctionsC -> CURRENT PIZQ avInner . PDER PTOCO
    (69) arrayfunctions -> CURRENT PIZQ avInner . PDER

    PDER            shift and go to state 211


state 174

    (67) arrayfunctionsC -> NEXT PIZQ avInner . PDER PTOCO
    (70) arrayfunctions -> NEXT PIZQ avInner . PDER

    PDER            shift and go to state 212


state 175

    (49) Arreglo -> ARRAY PIZQ innerColection . PDER

    PDER            shift and go to state 213


state 176

    (51) innerColection -> expresion .
    (53) innerColection -> expresion . COMA innerColection
    (50) Asig -> expresion . FLECHA expresion
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PDER            reduce using rule 51 (innerColection -> expresion .)
    COMA            shift and go to state 214
    FLECHA          shift and go to state 215
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 177

    (52) innerColection -> Asig .
    (54) innerColection -> Asig . COMA innerColection

    PDER            reduce using rule 52 (innerColection -> Asig .)
    COMA            shift and go to state 216


state 178

    (23) asignacion -> ambito multiVariable IGUAL expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 217
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 179

    (24) asignacion -> multiVariable IGUAL expresion PTOCO .

                    reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    CONST           reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    IF              reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FOR             reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    WHILE           reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    DO              reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ECHO            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    LIST            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    BREAK           reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FUNCTION        reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    GET             reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    POST            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    KEY             reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    CURRENT         reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    NEXT            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    STATIC          reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VAR             reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    STRING          reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    NULL            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    TRUE            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FALSE           reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ARRAY           reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FIN             reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    LDER            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ELSE            reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 24 (asignacion -> multiVariable IGUAL expresion PTOCO .)


state 180

    (25) asignacion -> CONST multiConstante IGUAL expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 218
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 181

    (26) asignacion -> multiConstante IGUAL expresion PTOCO .

                    reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    CONST           reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    IF              reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    FOR             reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    WHILE           reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    DO              reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    ECHO            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    LIST            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    BREAK           reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    FUNCTION        reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    GET             reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    POST            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    KEY             reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    CURRENT         reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    NEXT            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    STATIC          reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    VAR             reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    STRING          reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    NULL            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    TRUE            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    FALSE           reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    ARRAY           reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    FIN             reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    LDER            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    ELSE            reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 26 (asignacion -> multiConstante IGUAL expresion PTOCO .)


state 182

    (39) comparacion -> valor operadorC expresion PTOCO .

                    reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    CONST           reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    IF              reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    FOR             reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    WHILE           reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    DO              reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    VARIABLE        reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    ECHO            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    LIST            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    BREAK           reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    FUNCTION        reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    GET             reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    POST            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    KEY             reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    CURRENT         reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    NEXT            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    STATIC          reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    VAR             reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    GLOBAL          reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    INTEGER         reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    STRING          reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    FLOAT           reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    BOOLEAN         reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    NULL            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    TRUE            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    FALSE           reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    ARRAY           reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    FIN             reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    LDER            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    ELSE            reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)
    ELSEIF          reduce using rule 39 (comparacion -> valor operadorC expresion PTOCO .)


state 183

    (40) comparacion -> valor operadorM expresion PTOCO .

                    reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    CONST           reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    IF              reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    FOR             reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    WHILE           reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    DO              reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    VARIABLE        reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    ECHO            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    LIST            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    BREAK           reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    FUNCTION        reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    GET             reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    POST            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    KEY             reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    CURRENT         reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    NEXT            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    STATIC          reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    VAR             reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    GLOBAL          reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    INTEGER         reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    STRING          reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    FLOAT           reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    BOOLEAN         reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    NULL            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    TRUE            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    FALSE           reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    ARRAY           reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    FIN             reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    LDER            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    ELSE            reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)
    ELSEIF          reduce using rule 40 (comparacion -> valor operadorM expresion PTOCO .)


state 184

    (41) comparacion -> valor operadorL expresion PTOCO .

                    reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    CONST           reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    IF              reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    FOR             reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    WHILE           reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    DO              reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    VARIABLE        reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    ECHO            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    LIST            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    BREAK           reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    FUNCTION        reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    GET             reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    POST            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    KEY             reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    CURRENT         reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    NEXT            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    STATIC          reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    VAR             reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    GLOBAL          reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    INTEGER         reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    STRING          reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    FLOAT           reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    BOOLEAN         reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    NULL            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    TRUE            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    FALSE           reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    ARRAY           reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    FIN             reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    LDER            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    ELSE            reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)
    ELSEIF          reduce using rule 41 (comparacion -> valor operadorL expresion PTOCO .)


state 185

    (121) condicionalIF -> IF PIZQ condicion PDER . LIZQ codigo LDER
    (122) condicionalIF -> IF PIZQ condicion PDER . LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> IF PIZQ condicion PDER . codigo
    (124) condicionalIF -> IF PIZQ condicion PDER . codigo condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    LIZQ            shift and go to state 219
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 220
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 186

    (129) iteracionFOR -> FOR PIZQ asignacion condicion . PTOCO adicion PDER codigo
    (130) iteracionFOR -> FOR PIZQ asignacion condicion . PTOCO adicion PDER LIZQ codigo LDER

    PTOCO           shift and go to state 221


state 187

    (23) asignacion -> ambito multiVariable . IGUAL expresion PTOCO

    IGUAL           shift and go to state 122


state 188

    (25) asignacion -> CONST multiConstante . IGUAL expresion PTOCO

    IGUAL           shift and go to state 126


state 189

    (131) bucleWHILE -> WHILE PIZQ condicion PDER . codigo
    (132) bucleWHILE -> WHILE PIZQ condicion PDER . LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    LIZQ            shift and go to state 223
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 222
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 190

    (133) bucleDO_WHILE -> DO LIZQ codigo LDER . WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> DO LIZQ codigo LDER . WHILE PIZQ condicion PDER LIZQ codigo LDER

    WHILE           shift and go to state 224


state 191

    (138) indexacion -> VARIABLE CIZQ INTEGER CDER .
    (140) indexacion -> VARIABLE CIZQ INTEGER CDER . FUSIONNULL

                    reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    CONST           reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    IF              reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FOR             reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    WHILE           reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    DO              reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VARIABLE        reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ECHO            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    LIST            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    BREAK           reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FUNCTION        reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VARIABLEFUNC    reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    GET             reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    POST            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    KEY             reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    CURRENT         reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    NEXT            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    STATIC          reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VAR             reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    GLOBAL          reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    INTEGER         reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    STRING          reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FLOAT           reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    BOOLEAN         reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    NULL            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    TRUE            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FALSE           reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ARRAY           reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FIN             reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    LDER            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ELSE            reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ELSEIF          reduce using rule 138 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FUSIONNULL      shift and go to state 225


state 192

    (139) indexacion -> VARIABLE CIZQ RESTA INTEGER . CDER
    (141) indexacion -> VARIABLE CIZQ RESTA INTEGER . CDER FUSIONNULL

    CDER            shift and go to state 226


state 193

    (74) expresion_comparativa -> expresion operadorC expresion .
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for COMPARACION resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for NOIDENTICO resolved as shift
  ! shift/reduce conflict for MENOROIGUAL resolved as shift
  ! shift/reduce conflict for MAYOROIGUAL resolved as shift
  ! shift/reduce conflict for NAVEESPACIAL resolved as shift
    PTOCO           reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .)
    PDER            reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .)
    COMA            reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .)
    FLECHA          reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .)
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

  ! MAYOR           [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! MENOR           [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! COMPARACION     [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! IDENTICO        [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! DIFERENTE       [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! NOIDENTICO      [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! MENOROIGUAL     [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! MAYOROIGUAL     [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]
  ! NAVEESPACIAL    [ reduce using rule 74 (expresion_comparativa -> expresion operadorC expresion .) ]

    operadorC                      shift and go to state 153

state 194

    (71) expresion_aritmetica -> valor operadorM expresion .
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for COMPARACION resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for NOIDENTICO resolved as shift
  ! shift/reduce conflict for MENOROIGUAL resolved as shift
  ! shift/reduce conflict for MAYOROIGUAL resolved as shift
  ! shift/reduce conflict for NAVEESPACIAL resolved as shift
    PTOCO           reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .)
    COMA            reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .)
    PDER            reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .)
    FLECHA          reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .)
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

  ! MAYOR           [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! MENOR           [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! COMPARACION     [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! IDENTICO        [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! DIFERENTE       [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! NOIDENTICO      [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! MENOROIGUAL     [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! MAYOROIGUAL     [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]
  ! NAVEESPACIAL    [ reduce using rule 71 (expresion_aritmetica -> valor operadorM expresion .) ]

    operadorC                      shift and go to state 153

state 195

    (72) expresion_logica -> valor operadorL expresion .
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

  ! shift/reduce conflict for MAYOR resolved as shift
  ! shift/reduce conflict for MENOR resolved as shift
  ! shift/reduce conflict for COMPARACION resolved as shift
  ! shift/reduce conflict for IDENTICO resolved as shift
  ! shift/reduce conflict for DIFERENTE resolved as shift
  ! shift/reduce conflict for NOIDENTICO resolved as shift
  ! shift/reduce conflict for MENOROIGUAL resolved as shift
  ! shift/reduce conflict for MAYOROIGUAL resolved as shift
  ! shift/reduce conflict for NAVEESPACIAL resolved as shift
    PTOCO           reduce using rule 72 (expresion_logica -> valor operadorL expresion .)
    PDER            reduce using rule 72 (expresion_logica -> valor operadorL expresion .)
    COMA            reduce using rule 72 (expresion_logica -> valor operadorL expresion .)
    FLECHA          reduce using rule 72 (expresion_logica -> valor operadorL expresion .)
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

  ! MAYOR           [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! MENOR           [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! COMPARACION     [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! IDENTICO        [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! DIFERENTE       [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! NOIDENTICO      [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! MENOROIGUAL     [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! MAYOROIGUAL     [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]
  ! NAVEESPACIAL    [ reduce using rule 72 (expresion_logica -> valor operadorL expresion .) ]

    operadorC                      shift and go to state 153

state 196

    (48) funcAsig -> VARIABLEFUNC PIZQ multiVariable . PDER

    PDER            shift and go to state 227


state 197

    (68) arrayfunctions -> KEY PIZQ avInner . PDER

    PDER            shift and go to state 228


state 198

    (69) arrayfunctions -> CURRENT PIZQ avInner . PDER

    PDER            shift and go to state 229


state 199

    (70) arrayfunctions -> NEXT PIZQ avInner . PDER

    PDER            shift and go to state 230


state 200

    (135) list -> LIST PIZQ valoresList PDER . IGUAL VARIABLE PTOCO

    IGUAL           shift and go to state 231


state 201

    (136) valoresList -> VARIABLE COMA . valoresList
    (136) valoresList -> . VARIABLE COMA valoresList
    (137) valoresList -> . VARIABLE

    VARIABLE        shift and go to state 161

    valoresList                    shift and go to state 232

state 202

    (81) funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable . PDER LIZQ dentroFUNC LDER

    PDER            shift and go to state 233


state 203

    (82) funciones -> FUNCTION VARIABLEFUNC PIZQ PDER . LIZQ dentroFUNC LDER

    LIZQ            shift and go to state 234


state 204

    (46) funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER . PTOCO

    PTOCO           shift and go to state 235


state 205

    (47) funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .

                    reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    CONST           reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    IF              reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    FOR             reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    WHILE           reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    DO              reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    VARIABLE        reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    ECHO            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    LIST            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    BREAK           reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    FUNCTION        reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    VARIABLEFUNC    reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    GET             reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    POST            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    KEY             reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    CURRENT         reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    NEXT            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    STATIC          reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    VAR             reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    GLOBAL          reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    INTEGER         reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    STRING          reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    FLOAT           reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    BOOLEAN         reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    NULL            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    TRUE            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    FALSE           reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    ARRAY           reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    FIN             reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    LDER            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    ELSE            reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)
    ELSEIF          reduce using rule 47 (funcCOD -> VARIABLEFUNC PIZQ PDER PTOCO .)


state 206

    (44) multiIngreso -> VARIABLE COMA . multiIngreso
    (42) multiIngreso -> . VARIABLE
    (43) multiIngreso -> . expresion
    (44) multiIngreso -> . VARIABLE COMA multiIngreso
    (45) multiIngreso -> . expresion COMA multiIngreso
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 165
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    multiIngreso                   shift and go to state 236
    expresion                      shift and go to state 166
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 207

    (45) multiIngreso -> expresion COMA . multiIngreso
    (42) multiIngreso -> . VARIABLE
    (43) multiIngreso -> . expresion
    (44) multiIngreso -> . VARIABLE COMA multiIngreso
    (45) multiIngreso -> . expresion COMA multiIngreso
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 165
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 166
    multiIngreso                   shift and go to state 237
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 208

    (113) ingresoDatos -> GET CIZQ STRING CDER .

                    reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    CONST           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    IF              reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    FOR             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    WHILE           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    DO              reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    VARIABLE        reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    ECHO            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    LIST            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    BREAK           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    FUNCTION        reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    VARIABLEFUNC    reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    GET             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    POST            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    KEY             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    CURRENT         reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    NEXT            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    STATIC          reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    VAR             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    GLOBAL          reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    INTEGER         reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    STRING          reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    FLOAT           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    BOOLEAN         reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    NULL            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    TRUE            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    FALSE           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    ARRAY           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    FIN             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    MAYOR           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    MENOR           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    COMPARACION     reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    IDENTICO        reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    DIFERENTE       reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    NOIDENTICO      reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    MENOROIGUAL     reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    MAYOROIGUAL     reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    NAVEESPACIAL    reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    MAS             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    RESTA           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    PROD            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    DIV             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    MOD             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    POTENCIA        reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    AND             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    XOR             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    OR              reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    NOT             reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    LDER            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    ELSE            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    ELSEIF          reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    PTOCO           reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    COMA            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    PDER            reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)
    FLECHA          reduce using rule 113 (ingresoDatos -> GET CIZQ STRING CDER .)


state 209

    (114) ingresoDatos -> POST CIZQ STRING CDER .

                    reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    CONST           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    IF              reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    FOR             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    WHILE           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    DO              reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    VARIABLE        reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    ECHO            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    LIST            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    BREAK           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    FUNCTION        reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    VARIABLEFUNC    reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    GET             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    POST            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    KEY             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    CURRENT         reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    NEXT            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    STATIC          reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    VAR             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    GLOBAL          reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    INTEGER         reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    STRING          reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    FLOAT           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    BOOLEAN         reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    NULL            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    TRUE            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    FALSE           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    ARRAY           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    FIN             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    MAYOR           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    MENOR           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    COMPARACION     reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    IDENTICO        reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    DIFERENTE       reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    NOIDENTICO      reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    MENOROIGUAL     reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    MAYOROIGUAL     reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    NAVEESPACIAL    reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    MAS             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    RESTA           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    PROD            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    DIV             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    MOD             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    POTENCIA        reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    AND             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    XOR             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    OR              reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    NOT             reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    LDER            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    ELSE            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    ELSEIF          reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    PTOCO           reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    COMA            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    PDER            reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)
    FLECHA          reduce using rule 114 (ingresoDatos -> POST CIZQ STRING CDER .)


state 210

    (65) arrayfunctionsC -> KEY PIZQ avInner PDER . PTOCO
    (68) arrayfunctions -> KEY PIZQ avInner PDER .

    PTOCO           shift and go to state 238
    MAYOR           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MENOR           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    COMPARACION     reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    IDENTICO        reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    DIFERENTE       reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    NOIDENTICO      reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MENOROIGUAL     reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MAYOROIGUAL     reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    NAVEESPACIAL    reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MAS             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    RESTA           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    PROD            reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    DIV             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MOD             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    POTENCIA        reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    AND             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    XOR             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    OR              reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    NOT             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)


state 211

    (66) arrayfunctionsC -> CURRENT PIZQ avInner PDER . PTOCO
    (69) arrayfunctions -> CURRENT PIZQ avInner PDER .

    PTOCO           shift and go to state 239
    MAYOR           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MENOR           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    COMPARACION     reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    IDENTICO        reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    DIFERENTE       reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    NOIDENTICO      reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MENOROIGUAL     reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MAYOROIGUAL     reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    NAVEESPACIAL    reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MAS             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    RESTA           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    PROD            reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    DIV             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MOD             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    POTENCIA        reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    AND             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    XOR             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    OR              reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    NOT             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)


state 212

    (67) arrayfunctionsC -> NEXT PIZQ avInner PDER . PTOCO
    (70) arrayfunctions -> NEXT PIZQ avInner PDER .

    PTOCO           shift and go to state 240
    MAYOR           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MENOR           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    COMPARACION     reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    IDENTICO        reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    DIFERENTE       reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    NOIDENTICO      reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MENOROIGUAL     reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MAYOROIGUAL     reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    NAVEESPACIAL    reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MAS             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    RESTA           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    PROD            reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    DIV             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MOD             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    POTENCIA        reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    AND             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    XOR             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    OR              reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    NOT             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)


state 213

    (49) Arreglo -> ARRAY PIZQ innerColection PDER .

    MAYOR           reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    MENOR           reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    COMPARACION     reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    IDENTICO        reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    DIFERENTE       reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    NOIDENTICO      reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    MENOROIGUAL     reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    MAYOROIGUAL     reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    NAVEESPACIAL    reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    MAS             reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    RESTA           reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    PROD            reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    DIV             reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    MOD             reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    POTENCIA        reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    AND             reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    XOR             reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    OR              reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    NOT             reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    PTOCO           reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    COMA            reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    PDER            reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)
    FLECHA          reduce using rule 49 (Arreglo -> ARRAY PIZQ innerColection PDER .)


state 214

    (53) innerColection -> expresion COMA . innerColection
    (51) innerColection -> . expresion
    (52) innerColection -> . Asig
    (53) innerColection -> . expresion COMA innerColection
    (54) innerColection -> . Asig COMA innerColection
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (50) Asig -> . expresion FLECHA expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 176
    innerColection                 shift and go to state 241
    Asig                           shift and go to state 177
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 215

    (50) Asig -> expresion FLECHA . expresion
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    expresion                      shift and go to state 242
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 216

    (54) innerColection -> Asig COMA . innerColection
    (51) innerColection -> . expresion
    (52) innerColection -> . Asig
    (53) innerColection -> . expresion COMA innerColection
    (54) innerColection -> . Asig COMA innerColection
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (50) Asig -> . expresion FLECHA expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 125
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    Asig                           shift and go to state 177
    innerColection                 shift and go to state 243
    expresion                      shift and go to state 176
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 217

    (23) asignacion -> ambito multiVariable IGUAL expresion PTOCO .

                    reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    CONST           reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    IF              reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FOR             reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    WHILE           reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    DO              reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ECHO            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    LIST            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    BREAK           reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FUNCTION        reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    GET             reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    POST            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    KEY             reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    CURRENT         reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    NEXT            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    STATIC          reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VAR             reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    STRING          reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    NULL            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    TRUE            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FALSE           reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ARRAY           reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FIN             reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    LDER            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ELSE            reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 23 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)


state 218

    (25) asignacion -> CONST multiConstante IGUAL expresion PTOCO .

                    reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    CONST           reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    IF              reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    FOR             reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    WHILE           reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    DO              reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    ECHO            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    LIST            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    BREAK           reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    FUNCTION        reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    VARIABLEFUNC    reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    GET             reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    POST            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    KEY             reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    CURRENT         reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    NEXT            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    STATIC          reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    VAR             reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    STRING          reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    NULL            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    TRUE            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    FALSE           reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    ARRAY           reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    FIN             reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    LDER            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    ELSE            reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 25 (asignacion -> CONST multiConstante IGUAL expresion PTOCO .)


state 219

    (121) condicionalIF -> IF PIZQ condicion PDER LIZQ . codigo LDER
    (122) condicionalIF -> IF PIZQ condicion PDER LIZQ . codigo LDER condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 244
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 220

    (123) condicionalIF -> IF PIZQ condicion PDER codigo .
    (124) condicionalIF -> IF PIZQ condicion PDER codigo . condicionalELSE
    (125) condicionalELSE -> . ELSE LIZQ codigo LDER
    (126) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (127) condicionalELSE -> . ELSE codigo
    (128) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
                    reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    CONST           reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    IF              reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FOR             reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    DO              reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    LIST            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FUNCTION        reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VARIABLEFUNC    reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    GET             reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    POST            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    KEY             reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    CURRENT         reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    NEXT            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VAR             reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    STRING          reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    NULL            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ARRAY           reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FIN             reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    LDER            reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ELSE            shift and go to state 246
    ELSEIF          shift and go to state 247

  ! ELSE            [ reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .) ]
  ! ELSEIF          [ reduce using rule 123 (condicionalIF -> IF PIZQ condicion PDER codigo .) ]

    condicionalELSE                shift and go to state 245

state 221

    (129) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO . adicion PDER codigo
    (130) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO . adicion PDER LIZQ codigo LDER
    (117) adicion -> . MAS MAS VARIABLE
    (118) adicion -> . MENOS MENOS VARIABLE
    (119) adicion -> . VARIABLE MAS MAS
    (120) adicion -> . VARIABLE MENOS MENOS

    MAS             shift and go to state 249
    MENOS           shift and go to state 251
    VARIABLE        shift and go to state 250

    adicion                        shift and go to state 248

state 222

    (131) bucleWHILE -> WHILE PIZQ condicion PDER codigo .

                    reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    CONST           reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    IF              reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FOR             reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    DO              reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    LIST            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FUNCTION        reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VARIABLEFUNC    reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    GET             reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    POST            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    KEY             reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    CURRENT         reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    NEXT            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VAR             reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    STRING          reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    NULL            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ARRAY           reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FIN             reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    LDER            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ELSE            reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ELSEIF          reduce using rule 131 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)


state 223

    (132) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 252
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 224

    (133) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE . PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE . PIZQ condicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 253


state 225

    (140) indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .

                    reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    CONST           reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    IF              reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FOR             reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    WHILE           reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    DO              reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VARIABLE        reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ECHO            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    LIST            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    BREAK           reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FUNCTION        reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VARIABLEFUNC    reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    GET             reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    POST            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    KEY             reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    CURRENT         reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    NEXT            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    STATIC          reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VAR             reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    GLOBAL          reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    INTEGER         reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    STRING          reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FLOAT           reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    BOOLEAN         reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    NULL            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    TRUE            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FALSE           reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ARRAY           reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FIN             reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    LDER            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ELSE            reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ELSEIF          reduce using rule 140 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)


state 226

    (139) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .
    (141) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER . FUSIONNULL

                    reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    CONST           reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    IF              reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FOR             reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    WHILE           reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    DO              reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VARIABLE        reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ECHO            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    LIST            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    BREAK           reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FUNCTION        reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VARIABLEFUNC    reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    GET             reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    POST            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    KEY             reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    CURRENT         reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    NEXT            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    STATIC          reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VAR             reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    GLOBAL          reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    INTEGER         reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    STRING          reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FLOAT           reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    BOOLEAN         reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    NULL            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    TRUE            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FALSE           reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ARRAY           reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FIN             reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    LDER            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ELSE            reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ELSEIF          reduce using rule 139 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FUSIONNULL      shift and go to state 254


state 227

    (48) funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .

    PTOCO           reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    MAYOR           reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    MENOR           reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    COMPARACION     reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    IDENTICO        reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    DIFERENTE       reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    NOIDENTICO      reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    MENOROIGUAL     reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    MAYOROIGUAL     reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    NAVEESPACIAL    reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    COMA            reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    PDER            reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)
    FLECHA          reduce using rule 48 (funcAsig -> VARIABLEFUNC PIZQ multiVariable PDER .)


state 228

    (68) arrayfunctions -> KEY PIZQ avInner PDER .

    PTOCO           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MAYOR           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MENOR           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    COMPARACION     reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    IDENTICO        reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    DIFERENTE       reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    NOIDENTICO      reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MENOROIGUAL     reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MAYOROIGUAL     reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    NAVEESPACIAL    reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MAS             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    RESTA           reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    PROD            reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    DIV             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    MOD             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    POTENCIA        reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    AND             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    XOR             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    OR              reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    NOT             reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    COMA            reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    PDER            reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)
    FLECHA          reduce using rule 68 (arrayfunctions -> KEY PIZQ avInner PDER .)


state 229

    (69) arrayfunctions -> CURRENT PIZQ avInner PDER .

    PTOCO           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MAYOR           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MENOR           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    COMPARACION     reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    IDENTICO        reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    DIFERENTE       reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    NOIDENTICO      reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MENOROIGUAL     reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MAYOROIGUAL     reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    NAVEESPACIAL    reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MAS             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    RESTA           reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    PROD            reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    DIV             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    MOD             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    POTENCIA        reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    AND             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    XOR             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    OR              reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    NOT             reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    COMA            reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    PDER            reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)
    FLECHA          reduce using rule 69 (arrayfunctions -> CURRENT PIZQ avInner PDER .)


state 230

    (70) arrayfunctions -> NEXT PIZQ avInner PDER .

    PTOCO           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MAYOR           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MENOR           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    COMPARACION     reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    IDENTICO        reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    DIFERENTE       reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    NOIDENTICO      reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MENOROIGUAL     reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MAYOROIGUAL     reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    NAVEESPACIAL    reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MAS             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    RESTA           reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    PROD            reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    DIV             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    MOD             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    POTENCIA        reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    AND             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    XOR             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    OR              reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    NOT             reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    COMA            reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    PDER            reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)
    FLECHA          reduce using rule 70 (arrayfunctions -> NEXT PIZQ avInner PDER .)


state 231

    (135) list -> LIST PIZQ valoresList PDER IGUAL . VARIABLE PTOCO

    VARIABLE        shift and go to state 255


state 232

    (136) valoresList -> VARIABLE COMA valoresList .

    PDER            reduce using rule 136 (valoresList -> VARIABLE COMA valoresList .)


state 233

    (81) funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER . LIZQ dentroFUNC LDER

    LIZQ            shift and go to state 256


state 234

    (82) funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ . dentroFUNC LDER
    (79) dentroFUNC -> . retorno
    (80) dentroFUNC -> . codigo
    (77) retorno -> . RETURN multiVariable PTOCO
    (78) retorno -> . RETURN expresion PTOCO
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    RETURN          shift and go to state 260
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    dentroFUNC                     shift and go to state 257
    retorno                        shift and go to state 258
    codigo                         shift and go to state 259
    multiVariable                  shift and go to state 25
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 235

    (46) funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .

                    reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    CONST           reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    IF              reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    FOR             reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    WHILE           reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    DO              reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    VARIABLE        reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    ECHO            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    LIST            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    BREAK           reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    FUNCTION        reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    VARIABLEFUNC    reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    GET             reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    POST            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    KEY             reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    CURRENT         reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    NEXT            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    STATIC          reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    VAR             reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    GLOBAL          reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    INTEGER         reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    STRING          reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    FLOAT           reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    BOOLEAN         reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    NULL            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    TRUE            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    FALSE           reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    ARRAY           reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    FIN             reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    LDER            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    ELSE            reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)
    ELSEIF          reduce using rule 46 (funcCOD -> VARIABLEFUNC PIZQ multiIngreso PDER PTOCO .)


state 236

    (44) multiIngreso -> VARIABLE COMA multiIngreso .

    PDER            reduce using rule 44 (multiIngreso -> VARIABLE COMA multiIngreso .)


state 237

    (45) multiIngreso -> expresion COMA multiIngreso .

    PDER            reduce using rule 45 (multiIngreso -> expresion COMA multiIngreso .)


state 238

    (65) arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .

                    reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    CONST           reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    IF              reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    FOR             reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    WHILE           reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    DO              reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    VARIABLE        reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    ECHO            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    LIST            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    BREAK           reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    FUNCTION        reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    VARIABLEFUNC    reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    GET             reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    POST            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    KEY             reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    CURRENT         reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    NEXT            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    STATIC          reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    VAR             reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    GLOBAL          reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    INTEGER         reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    STRING          reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    FLOAT           reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    BOOLEAN         reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    NULL            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    TRUE            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    FALSE           reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    ARRAY           reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    FIN             reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    LDER            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    ELSE            reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)
    ELSEIF          reduce using rule 65 (arrayfunctionsC -> KEY PIZQ avInner PDER PTOCO .)


state 239

    (66) arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .

                    reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    CONST           reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    IF              reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    FOR             reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    WHILE           reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    DO              reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    VARIABLE        reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    ECHO            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    LIST            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    BREAK           reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    FUNCTION        reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    VARIABLEFUNC    reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    GET             reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    POST            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    KEY             reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    CURRENT         reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    NEXT            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    STATIC          reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    VAR             reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    GLOBAL          reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    INTEGER         reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    STRING          reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    FLOAT           reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    BOOLEAN         reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    NULL            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    TRUE            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    FALSE           reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    ARRAY           reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    FIN             reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    LDER            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    ELSE            reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)
    ELSEIF          reduce using rule 66 (arrayfunctionsC -> CURRENT PIZQ avInner PDER PTOCO .)


state 240

    (67) arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .

                    reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    CONST           reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    IF              reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    FOR             reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    WHILE           reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    DO              reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    VARIABLE        reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    ECHO            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    LIST            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    BREAK           reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    FUNCTION        reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    VARIABLEFUNC    reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    GET             reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    POST            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    KEY             reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    CURRENT         reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    NEXT            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    STATIC          reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    VAR             reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    GLOBAL          reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    INTEGER         reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    STRING          reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    FLOAT           reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    BOOLEAN         reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    NULL            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    TRUE            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    FALSE           reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    ARRAY           reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    FIN             reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    LDER            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    ELSE            reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)
    ELSEIF          reduce using rule 67 (arrayfunctionsC -> NEXT PIZQ avInner PDER PTOCO .)


state 241

    (53) innerColection -> expresion COMA innerColection .

    PDER            reduce using rule 53 (innerColection -> expresion COMA innerColection .)


state 242

    (50) Asig -> expresion FLECHA expresion .
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    COMA            reduce using rule 50 (Asig -> expresion FLECHA expresion .)
    PDER            reduce using rule 50 (Asig -> expresion FLECHA expresion .)
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 243

    (54) innerColection -> Asig COMA innerColection .

    PDER            reduce using rule 54 (innerColection -> Asig COMA innerColection .)


state 244

    (121) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo . LDER
    (122) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo . LDER condicionalELSE

    LDER            shift and go to state 261


state 245

    (124) condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .

                    reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    CONST           reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    IF              reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FOR             reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    WHILE           reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    DO              reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLE        reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ECHO            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    LIST            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    BREAK           reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FUNCTION        reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLEFUNC    reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    GET             reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    POST            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    KEY             reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    CURRENT         reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    NEXT            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    STATIC          reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VAR             reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    GLOBAL          reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    INTEGER         reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    STRING          reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FLOAT           reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    BOOLEAN         reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    NULL            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    TRUE            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FALSE           reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ARRAY           reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FIN             reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    LDER            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ELSE            reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ELSEIF          reduce using rule 124 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)


state 246

    (125) condicionalELSE -> ELSE . LIZQ codigo LDER
    (127) condicionalELSE -> ELSE . codigo
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    LIZQ            shift and go to state 262
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 263
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 247

    (126) condicionalELSE -> ELSEIF . PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (128) condicionalELSE -> ELSEIF . PIZQ condicion PDER codigo condicionalELSE

    PIZQ            shift and go to state 264


state 248

    (129) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion . PDER codigo
    (130) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 265


state 249

    (117) adicion -> MAS . MAS VARIABLE

    MAS             shift and go to state 266


state 250

    (119) adicion -> VARIABLE . MAS MAS
    (120) adicion -> VARIABLE . MENOS MENOS

    MAS             shift and go to state 267
    MENOS           shift and go to state 268


state 251

    (118) adicion -> MENOS . MENOS VARIABLE

    MENOS           shift and go to state 269


state 252

    (132) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 270


state 253

    (133) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ . condicion PDER codigo
    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ . condicion PDER LIZQ codigo LDER
    (75) condicion -> . expresion_logica
    (76) condicion -> . expresion_comparativa
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (71) expresion_aritmetica -> . valor operadorM expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER

    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    VARIABLE        shift and go to state 138
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    VARIABLEFUNC    shift and go to state 107

    condicion                      shift and go to state 271
    expresion_logica               shift and go to state 133
    expresion_comparativa          shift and go to state 134
    valor                          shift and go to state 135
    expresion                      shift and go to state 136
    booleano                       shift and go to state 137
    ingresoDatos                   shift and go to state 106
    arrayfunctions                 shift and go to state 139
    Arreglo                        shift and go to state 140
    expresion_aritmetica           shift and go to state 99
    funcAsig                       shift and go to state 102

state 254

    (141) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .

                    reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    CONST           reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    IF              reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FOR             reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    WHILE           reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    DO              reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VARIABLE        reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ECHO            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    LIST            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    BREAK           reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FUNCTION        reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VARIABLEFUNC    reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    GET             reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    POST            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    KEY             reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    CURRENT         reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    NEXT            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    STATIC          reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VAR             reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    GLOBAL          reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    INTEGER         reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    STRING          reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FLOAT           reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    BOOLEAN         reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    NULL            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    TRUE            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FALSE           reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ARRAY           reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FIN             reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    LDER            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ELSE            reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ELSEIF          reduce using rule 141 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)


state 255

    (135) list -> LIST PIZQ valoresList PDER IGUAL VARIABLE . PTOCO

    PTOCO           shift and go to state 272


state 256

    (81) funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ . dentroFUNC LDER
    (79) dentroFUNC -> . retorno
    (80) dentroFUNC -> . codigo
    (77) retorno -> . RETURN multiVariable PTOCO
    (78) retorno -> . RETURN expresion PTOCO
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    RETURN          shift and go to state 260
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    multiVariable                  shift and go to state 25
    dentroFUNC                     shift and go to state 273
    retorno                        shift and go to state 258
    codigo                         shift and go to state 259
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 257

    (82) funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC . LDER

    LDER            shift and go to state 274


state 258

    (79) dentroFUNC -> retorno .

    LDER            reduce using rule 79 (dentroFUNC -> retorno .)


state 259

    (80) dentroFUNC -> codigo .

    LDER            reduce using rule 80 (dentroFUNC -> codigo .)


state 260

    (77) retorno -> RETURN . multiVariable PTOCO
    (78) retorno -> RETURN . expresion PTOCO
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (71) expresion_aritmetica -> . valor operadorM expresion
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER

    VARIABLE        shift and go to state 277
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    VARIABLEFUNC    shift and go to state 107
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42

    multiVariable                  shift and go to state 275
    expresion                      shift and go to state 276
    valor                          shift and go to state 98
    expresion_aritmetica           shift and go to state 99
    expresion_logica               shift and go to state 100
    expresion_comparativa          shift and go to state 101
    funcAsig                       shift and go to state 102
    arrayfunctions                 shift and go to state 103
    Arreglo                        shift and go to state 104
    booleano                       shift and go to state 105
    ingresoDatos                   shift and go to state 106

state 261

    (121) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .
    (122) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER . condicionalELSE
    (125) condicionalELSE -> . ELSE LIZQ codigo LDER
    (126) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (127) condicionalELSE -> . ELSE codigo
    (128) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
                    reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    LIST            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FUNCTION        reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLEFUNC    reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    GET             reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    POST            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    KEY             reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    CURRENT         reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    NEXT            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    NULL            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ARRAY           reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            shift and go to state 246
    ELSEIF          shift and go to state 247

  ! ELSE            [ reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .) ]
  ! ELSEIF          [ reduce using rule 121 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .) ]

    condicionalELSE                shift and go to state 278

state 262

    (125) condicionalELSE -> ELSE LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 279
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 263

    (127) condicionalELSE -> ELSE codigo .

    FIN             reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    LDER            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    ELSE            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    ELSEIF          reduce using rule 127 (condicionalELSE -> ELSE codigo .)
                    reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    CONST           reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    IF              reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    FOR             reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    WHILE           reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    DO              reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    VARIABLE        reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    ECHO            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    LIST            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    BREAK           reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    FUNCTION        reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    VARIABLEFUNC    reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    GET             reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    POST            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    KEY             reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    CURRENT         reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    NEXT            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    STATIC          reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    VAR             reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    GLOBAL          reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    INTEGER         reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    STRING          reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    FLOAT           reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    BOOLEAN         reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    NULL            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    TRUE            reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    FALSE           reduce using rule 127 (condicionalELSE -> ELSE codigo .)
    ARRAY           reduce using rule 127 (condicionalELSE -> ELSE codigo .)


state 264

    (126) condicionalELSE -> ELSEIF PIZQ . condicion PDER LIZQ codigo LDER condicionalELSE
    (128) condicionalELSE -> ELSEIF PIZQ . condicion PDER codigo condicionalELSE
    (75) condicion -> . expresion_logica
    (76) condicion -> . expresion_comparativa
    (72) expresion_logica -> . valor operadorL expresion
    (73) expresion_logica -> . booleano
    (74) expresion_comparativa -> . expresion operadorC expresion
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (55) expresion -> . valor
    (56) expresion -> . expresion_aritmetica
    (57) expresion -> . expresion_logica
    (58) expresion -> . expresion_comparativa
    (59) expresion -> . VARIABLE
    (60) expresion -> . funcAsig
    (61) expresion -> . arrayfunctions
    (62) expresion -> . Arreglo
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER
    (71) expresion_aritmetica -> . valor operadorM expresion
    (48) funcAsig -> . VARIABLEFUNC PIZQ multiVariable PDER

    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    VARIABLE        shift and go to state 138
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 108
    CURRENT         shift and go to state 109
    NEXT            shift and go to state 110
    ARRAY           shift and go to state 57
    VARIABLEFUNC    shift and go to state 107

    condicion                      shift and go to state 280
    expresion_logica               shift and go to state 133
    expresion_comparativa          shift and go to state 134
    valor                          shift and go to state 135
    expresion                      shift and go to state 136
    booleano                       shift and go to state 137
    ingresoDatos                   shift and go to state 106
    arrayfunctions                 shift and go to state 139
    Arreglo                        shift and go to state 140
    expresion_aritmetica           shift and go to state 99
    funcAsig                       shift and go to state 102

state 265

    (129) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER . codigo
    (130) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER . LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    LIZQ            shift and go to state 282
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    asignacion                     shift and go to state 9
    codigo                         shift and go to state 281
    algoritmo                      shift and go to state 6
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 266

    (117) adicion -> MAS MAS . VARIABLE

    VARIABLE        shift and go to state 283


state 267

    (119) adicion -> VARIABLE MAS . MAS

    MAS             shift and go to state 284


state 268

    (120) adicion -> VARIABLE MENOS . MENOS

    MENOS           shift and go to state 285


state 269

    (118) adicion -> MENOS MENOS . VARIABLE

    VARIABLE        shift and go to state 286


state 270

    (132) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .

                    reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LIST            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FUNCTION        reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLEFUNC    reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GET             reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    POST            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    KEY             reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CURRENT         reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    NEXT            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    NULL            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ARRAY           reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 132 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)


state 271

    (133) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion . PDER codigo
    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 287


state 272

    (135) list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .

                    reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    CONST           reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    IF              reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    FOR             reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    WHILE           reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    DO              reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    VARIABLE        reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    ECHO            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    LIST            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    BREAK           reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    FUNCTION        reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    VARIABLEFUNC    reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    GET             reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    POST            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    KEY             reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    CURRENT         reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    NEXT            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    STATIC          reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    VAR             reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    GLOBAL          reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    INTEGER         reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    STRING          reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    FLOAT           reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    BOOLEAN         reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    NULL            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    TRUE            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    FALSE           reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    ARRAY           reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    FIN             reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    LDER            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    ELSE            reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)
    ELSEIF          reduce using rule 135 (list -> LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO .)


state 273

    (81) funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC . LDER

    LDER            shift and go to state 288


state 274

    (82) funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .

                    reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    CONST           reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    IF              reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    FOR             reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    WHILE           reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    DO              reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    VARIABLE        reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    ECHO            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    LIST            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    BREAK           reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    FUNCTION        reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    VARIABLEFUNC    reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    GET             reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    POST            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    KEY             reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    CURRENT         reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    NEXT            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    STATIC          reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    VAR             reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    GLOBAL          reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    INTEGER         reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    STRING          reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    FLOAT           reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    BOOLEAN         reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    NULL            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    TRUE            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    FALSE           reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    ARRAY           reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    FIN             reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    LDER            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    ELSE            reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)
    ELSEIF          reduce using rule 82 (funciones -> FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER .)


state 275

    (77) retorno -> RETURN multiVariable . PTOCO

    PTOCO           shift and go to state 289


state 276

    (78) retorno -> RETURN expresion . PTOCO
    (74) expresion_comparativa -> expresion . operadorC expresion
    (89) operadorC -> . MAYOR
    (90) operadorC -> . MENOR
    (91) operadorC -> . COMPARACION
    (92) operadorC -> . IDENTICO
    (93) operadorC -> . DIFERENTE
    (94) operadorC -> . NOIDENTICO
    (95) operadorC -> . MENOROIGUAL
    (96) operadorC -> . MAYOROIGUAL
    (97) operadorC -> . NAVEESPACIAL

    PTOCO           shift and go to state 290
    MAYOR           shift and go to state 71
    MENOR           shift and go to state 72
    COMPARACION     shift and go to state 73
    IDENTICO        shift and go to state 74
    DIFERENTE       shift and go to state 75
    NOIDENTICO      shift and go to state 76
    MENOROIGUAL     shift and go to state 77
    MAYOROIGUAL     shift and go to state 78
    NAVEESPACIAL    shift and go to state 79

    operadorC                      shift and go to state 153

state 277

    (31) multiVariable -> VARIABLE .
    (32) multiVariable -> VARIABLE . COMA multiVariable
    (59) expresion -> VARIABLE .
    (107) valor -> VARIABLE .

  ! reduce/reduce conflict for PTOCO resolved using rule 31 (multiVariable -> VARIABLE .)
  ! reduce/reduce conflict for PTOCO resolved using rule 31 (multiVariable -> VARIABLE .)
  ! reduce/reduce conflict for MAYOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOR resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for COMPARACION resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for IDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for DIFERENTE resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NOIDENTICO resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MENOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for MAYOROIGUAL resolved using rule 59 (expresion -> VARIABLE .)
  ! reduce/reduce conflict for NAVEESPACIAL resolved using rule 59 (expresion -> VARIABLE .)
    PTOCO           reduce using rule 31 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 95
    MAYOR           reduce using rule 59 (expresion -> VARIABLE .)
    MENOR           reduce using rule 59 (expresion -> VARIABLE .)
    COMPARACION     reduce using rule 59 (expresion -> VARIABLE .)
    IDENTICO        reduce using rule 59 (expresion -> VARIABLE .)
    DIFERENTE       reduce using rule 59 (expresion -> VARIABLE .)
    NOIDENTICO      reduce using rule 59 (expresion -> VARIABLE .)
    MENOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 59 (expresion -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 59 (expresion -> VARIABLE .)
    MAS             reduce using rule 107 (valor -> VARIABLE .)
    RESTA           reduce using rule 107 (valor -> VARIABLE .)
    PROD            reduce using rule 107 (valor -> VARIABLE .)
    DIV             reduce using rule 107 (valor -> VARIABLE .)
    MOD             reduce using rule 107 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 107 (valor -> VARIABLE .)
    AND             reduce using rule 107 (valor -> VARIABLE .)
    XOR             reduce using rule 107 (valor -> VARIABLE .)
    OR              reduce using rule 107 (valor -> VARIABLE .)
    NOT             reduce using rule 107 (valor -> VARIABLE .)

  ! PTOCO           [ reduce using rule 59 (expresion -> VARIABLE .) ]
  ! PTOCO           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOR           [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! COMPARACION     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! IDENTICO        [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! DIFERENTE       [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NOIDENTICO      [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MENOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! MAYOROIGUAL     [ reduce using rule 107 (valor -> VARIABLE .) ]
  ! NAVEESPACIAL    [ reduce using rule 107 (valor -> VARIABLE .) ]


state 278

    (122) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .

                    reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CONST           reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    IF              reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FOR             reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    WHILE           reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    DO              reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLE        reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ECHO            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LIST            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BREAK           reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FUNCTION        reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLEFUNC    reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GET             reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    POST            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    KEY             reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CURRENT         reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    NEXT            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STATIC          reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VAR             reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GLOBAL          reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    INTEGER         reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STRING          reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FLOAT           reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BOOLEAN         reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    NULL            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    TRUE            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FALSE           reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ARRAY           reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FIN             reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LDER            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSE            reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSEIF          reduce using rule 122 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)


state 279

    (125) condicionalELSE -> ELSE LIZQ codigo . LDER

    LDER            shift and go to state 291


state 280

    (126) condicionalELSE -> ELSEIF PIZQ condicion . PDER LIZQ codigo LDER condicionalELSE
    (128) condicionalELSE -> ELSEIF PIZQ condicion . PDER codigo condicionalELSE

    PDER            shift and go to state 292


state 281

    (129) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .

                    reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    CONST           reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    IF              reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FOR             reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    WHILE           reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    DO              reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VARIABLE        reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ECHO            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    LIST            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    BREAK           reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FUNCTION        reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VARIABLEFUNC    reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    GET             reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    POST            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    KEY             reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    CURRENT         reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    NEXT            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    STATIC          reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VAR             reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    GLOBAL          reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    INTEGER         reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    STRING          reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FLOAT           reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    BOOLEAN         reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    NULL            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    TRUE            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FALSE           reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ARRAY           reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FIN             reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    LDER            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ELSE            reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ELSEIF          reduce using rule 129 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)


state 282

    (130) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    asignacion                     shift and go to state 9
    codigo                         shift and go to state 293
    algoritmo                      shift and go to state 6
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 283

    (117) adicion -> MAS MAS VARIABLE .

    PDER            reduce using rule 117 (adicion -> MAS MAS VARIABLE .)


state 284

    (119) adicion -> VARIABLE MAS MAS .

    PDER            reduce using rule 119 (adicion -> VARIABLE MAS MAS .)


state 285

    (120) adicion -> VARIABLE MENOS MENOS .

    PDER            reduce using rule 120 (adicion -> VARIABLE MENOS MENOS .)


state 286

    (118) adicion -> MENOS MENOS VARIABLE .

    PDER            reduce using rule 118 (adicion -> MENOS MENOS VARIABLE .)


state 287

    (133) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER . codigo
    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER . LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    LIZQ            shift and go to state 294
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 295
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 288

    (81) funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .

                    reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    CONST           reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    IF              reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    FOR             reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    WHILE           reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    DO              reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    VARIABLE        reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    ECHO            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    LIST            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    BREAK           reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    FUNCTION        reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    VARIABLEFUNC    reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    GET             reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    POST            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    KEY             reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    CURRENT         reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    NEXT            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    STATIC          reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    VAR             reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    GLOBAL          reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    INTEGER         reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    STRING          reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    FLOAT           reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    BOOLEAN         reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    NULL            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    TRUE            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    FALSE           reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    ARRAY           reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    FIN             reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    LDER            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    ELSE            reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)
    ELSEIF          reduce using rule 81 (funciones -> FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER .)


state 289

    (77) retorno -> RETURN multiVariable PTOCO .

    LDER            reduce using rule 77 (retorno -> RETURN multiVariable PTOCO .)


state 290

    (78) retorno -> RETURN expresion PTOCO .

    LDER            reduce using rule 78 (retorno -> RETURN expresion PTOCO .)


state 291

    (125) condicionalELSE -> ELSE LIZQ codigo LDER .

    FIN             reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    LDER            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ELSE            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ELSEIF          reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
                    reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    CONST           reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    IF              reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FOR             reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    WHILE           reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    DO              reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VARIABLE        reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ECHO            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    LIST            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    BREAK           reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FUNCTION        reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VARIABLEFUNC    reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    GET             reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    POST            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    KEY             reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    CURRENT         reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    NEXT            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    STATIC          reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VAR             reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    GLOBAL          reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    INTEGER         reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    STRING          reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FLOAT           reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    NULL            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    TRUE            reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FALSE           reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ARRAY           reduce using rule 125 (condicionalELSE -> ELSE LIZQ codigo LDER .)


state 292

    (126) condicionalELSE -> ELSEIF PIZQ condicion PDER . LIZQ codigo LDER condicionalELSE
    (128) condicionalELSE -> ELSEIF PIZQ condicion PDER . codigo condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

    LIZQ            shift and go to state 296
                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 297
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 293

    (130) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 298


state 294

    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 299
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 295

    (133) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .

                    reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    CONST           reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    IF              reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FOR             reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    DO              reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    LIST            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FUNCTION        reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VARIABLEFUNC    reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    GET             reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    POST            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    KEY             reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    CURRENT         reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    NEXT            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VAR             reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    STRING          reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    NULL            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ARRAY           reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FIN             reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    LDER            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ELSE            reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ELSEIF          reduce using rule 133 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)


state 296

    (126) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ . codigo LDER condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . list
    (18) algoritmo -> . terminar
    (19) algoritmo -> . funciones
    (20) algoritmo -> . funcCOD
    (21) algoritmo -> . ingresoDatos
    (22) algoritmo -> . arrayfunctionsC
    (23) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (24) asignacion -> . multiVariable IGUAL expresion PTOCO
    (25) asignacion -> . CONST multiConstante IGUAL expresion PTOCO
    (26) asignacion -> . multiConstante IGUAL expresion PTOCO
    (27) declaracion -> . ambito multiVariable PTOCO
    (28) declaracion -> . multiVariable PTOCO
    (29) declaracion -> . CONST multiConstante PTOCO
    (30) declaracion -> . multiConstante PTOCO
    (39) comparacion -> . valor operadorC expresion PTOCO
    (40) comparacion -> . valor operadorM expresion PTOCO
    (41) comparacion -> . valor operadorL expresion PTOCO
    (121) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (122) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (123) condicionalIF -> . IF PIZQ condicion PDER codigo
    (124) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (129) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (130) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (131) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (132) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (133) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (134) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (138) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (139) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (140) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (141) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (142) echo -> . ECHO VARIABLE PTOCO
    (143) echo -> . ECHO expresion PTOCO
    (135) list -> . LIST PIZQ valoresList PDER IGUAL VARIABLE PTOCO
    (98) terminar -> . BREAK PTOCO
    (81) funciones -> . FUNCTION VARIABLEFUNC PIZQ multiVariable PDER LIZQ dentroFUNC LDER
    (82) funciones -> . FUNCTION VARIABLEFUNC PIZQ PDER LIZQ dentroFUNC LDER
    (46) funcCOD -> . VARIABLEFUNC PIZQ multiIngreso PDER PTOCO
    (47) funcCOD -> . VARIABLEFUNC PIZQ PDER PTOCO
    (113) ingresoDatos -> . GET CIZQ STRING CDER
    (114) ingresoDatos -> . POST CIZQ STRING CDER
    (65) arrayfunctionsC -> . KEY PIZQ avInner PDER PTOCO
    (66) arrayfunctionsC -> . CURRENT PIZQ avInner PDER PTOCO
    (67) arrayfunctionsC -> . NEXT PIZQ avInner PDER PTOCO
    (35) ambito -> . STATIC
    (36) ambito -> . VAR
    (37) ambito -> . GLOBAL
    (38) ambito -> . CONST
    (31) multiVariable -> . VARIABLE
    (32) multiVariable -> . VARIABLE COMA multiVariable
    (33) multiConstante -> . VARIABLEFUNC
    (34) multiConstante -> . VARIABLEFUNC COMA multiConstante
    (103) valor -> . INTEGER
    (104) valor -> . booleano
    (105) valor -> . STRING
    (106) valor -> . FLOAT
    (107) valor -> . VARIABLE
    (108) valor -> . BOOLEAN
    (109) valor -> . ingresoDatos
    (110) valor -> . arrayfunctions
    (111) valor -> . Arreglo
    (112) valor -> . NULL
    (115) booleano -> . TRUE
    (116) booleano -> . FALSE
    (68) arrayfunctions -> . KEY PIZQ avInner PDER
    (69) arrayfunctions -> . CURRENT PIZQ avInner PDER
    (70) arrayfunctions -> . NEXT PIZQ avInner PDER
    (49) Arreglo -> . ARRAY PIZQ innerColection PDER

                    shift and go to state 7
    CONST           shift and go to state 26
    IF              shift and go to state 29
    FOR             shift and go to state 30
    WHILE           shift and go to state 31
    DO              shift and go to state 32
    VARIABLE        shift and go to state 33
    ECHO            shift and go to state 35
    LIST            shift and go to state 36
    BREAK           shift and go to state 37
    FUNCTION        shift and go to state 38
    VARIABLEFUNC    shift and go to state 39
    GET             shift and go to state 40
    POST            shift and go to state 42
    KEY             shift and go to state 43
    CURRENT         shift and go to state 44
    NEXT            shift and go to state 45
    STATIC          shift and go to state 46
    VAR             shift and go to state 47
    GLOBAL          shift and go to state 48
    INTEGER         shift and go to state 34
    STRING          shift and go to state 41
    FLOAT           shift and go to state 50
    BOOLEAN         shift and go to state 51
    NULL            shift and go to state 54
    TRUE            shift and go to state 55
    FALSE           shift and go to state 56
    ARRAY           shift and go to state 57

    codigo                         shift and go to state 300
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    list                           shift and go to state 18
    terminar                       shift and go to state 19
    funciones                      shift and go to state 20
    funcCOD                        shift and go to state 21
    ingresoDatos                   shift and go to state 22
    arrayfunctionsC                shift and go to state 23
    ambito                         shift and go to state 24
    multiVariable                  shift and go to state 25
    multiConstante                 shift and go to state 27
    valor                          shift and go to state 28
    booleano                       shift and go to state 49
    arrayfunctions                 shift and go to state 52
    Arreglo                        shift and go to state 53

state 297

    (128) condicionalELSE -> ELSEIF PIZQ condicion PDER codigo . condicionalELSE
    (125) condicionalELSE -> . ELSE LIZQ codigo LDER
    (126) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (127) condicionalELSE -> . ELSE codigo
    (128) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

    ELSE            shift and go to state 246
    ELSEIF          shift and go to state 247

    condicionalELSE                shift and go to state 301

state 298

    (130) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .

                    reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    LIST            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FUNCTION        reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VARIABLEFUNC    reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    GET             reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    POST            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    KEY             reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    CURRENT         reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    NEXT            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    NULL            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ARRAY           reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 130 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)


state 299

    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 302


state 300

    (126) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo . LDER condicionalELSE

    LDER            shift and go to state 303


state 301

    (128) condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .

    FIN             reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    LDER            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ELSE            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ELSEIF          reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
                    reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    CONST           reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    IF              reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FOR             reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    WHILE           reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    DO              reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLE        reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ECHO            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    LIST            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    BREAK           reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FUNCTION        reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLEFUNC    reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    GET             reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    POST            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    KEY             reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    CURRENT         reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    NEXT            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    STATIC          reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VAR             reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    GLOBAL          reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    INTEGER         reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    STRING          reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FLOAT           reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    BOOLEAN         reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    NULL            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    TRUE            reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FALSE           reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ARRAY           reduce using rule 128 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)


state 302

    (134) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .

                    reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LIST            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FUNCTION        reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLEFUNC    reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GET             reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    POST            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    KEY             reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CURRENT         reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    NEXT            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    NULL            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ARRAY           reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 134 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)


state 303

    (126) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER . condicionalELSE
    (125) condicionalELSE -> . ELSE LIZQ codigo LDER
    (126) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (127) condicionalELSE -> . ELSE codigo
    (128) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

    ELSE            shift and go to state 246
    ELSEIF          shift and go to state 247

    condicionalELSE                shift and go to state 304

state 304

    (126) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .

    FIN             reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LDER            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSE            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSEIF          reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
                    reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CONST           reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    IF              reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FOR             reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    WHILE           reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    DO              reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLE        reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ECHO            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LIST            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BREAK           reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FUNCTION        reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLEFUNC    reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GET             reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    POST            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    KEY             reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CURRENT         reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    NEXT            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STATIC          reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VAR             reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GLOBAL          reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    INTEGER         reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STRING          reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FLOAT           reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BOOLEAN         reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    NULL            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    TRUE            reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FALSE           reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ARRAY           reduce using rule 126 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for  in state 6 resolved as shift
WARNING: shift/reduce conflict for CONST in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 6 resolved as shift
WARNING: shift/reduce conflict for FOR in state 6 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for DO in state 6 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 6 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 6 resolved as shift
WARNING: shift/reduce conflict for LIST in state 6 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 6 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 6 resolved as shift
WARNING: shift/reduce conflict for VARIABLEFUNC in state 6 resolved as shift
WARNING: shift/reduce conflict for GET in state 6 resolved as shift
WARNING: shift/reduce conflict for POST in state 6 resolved as shift
WARNING: shift/reduce conflict for KEY in state 6 resolved as shift
WARNING: shift/reduce conflict for CURRENT in state 6 resolved as shift
WARNING: shift/reduce conflict for NEXT in state 6 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 6 resolved as shift
WARNING: shift/reduce conflict for VAR in state 6 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 6 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 6 resolved as shift
WARNING: shift/reduce conflict for STRING in state 6 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 6 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 6 resolved as shift
WARNING: shift/reduce conflict for NULL in state 6 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 6 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 6 resolved as shift
WARNING: shift/reduce conflict for ARRAY in state 6 resolved as shift
WARNING: shift/reduce conflict for PTOCO in state 96 resolved as shift
WARNING: shift/reduce conflict for PTOCO in state 96 resolved as shift
WARNING: shift/reduce conflict for COMA in state 165 resolved as shift
WARNING: shift/reduce conflict for COMA in state 165 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 193 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 193 resolved as shift
WARNING: shift/reduce conflict for COMPARACION in state 193 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 193 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 193 resolved as shift
WARNING: shift/reduce conflict for NOIDENTICO in state 193 resolved as shift
WARNING: shift/reduce conflict for MENOROIGUAL in state 193 resolved as shift
WARNING: shift/reduce conflict for MAYOROIGUAL in state 193 resolved as shift
WARNING: shift/reduce conflict for NAVEESPACIAL in state 193 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 194 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 194 resolved as shift
WARNING: shift/reduce conflict for COMPARACION in state 194 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 194 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 194 resolved as shift
WARNING: shift/reduce conflict for NOIDENTICO in state 194 resolved as shift
WARNING: shift/reduce conflict for MENOROIGUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for MAYOROIGUAL in state 194 resolved as shift
WARNING: shift/reduce conflict for NAVEESPACIAL in state 194 resolved as shift
WARNING: shift/reduce conflict for MAYOR in state 195 resolved as shift
WARNING: shift/reduce conflict for MENOR in state 195 resolved as shift
WARNING: shift/reduce conflict for COMPARACION in state 195 resolved as shift
WARNING: shift/reduce conflict for IDENTICO in state 195 resolved as shift
WARNING: shift/reduce conflict for DIFERENTE in state 195 resolved as shift
WARNING: shift/reduce conflict for NOIDENTICO in state 195 resolved as shift
WARNING: shift/reduce conflict for MENOROIGUAL in state 195 resolved as shift
WARNING: shift/reduce conflict for MAYOROIGUAL in state 195 resolved as shift
WARNING: shift/reduce conflict for NAVEESPACIAL in state 195 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 220 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 220 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 261 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 261 resolved as shift
WARNING: reduce/reduce conflict in state 96 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 96
WARNING: reduce/reduce conflict in state 103 resolved using rule (expresion -> arrayfunctions)
WARNING: rejected rule (valor -> arrayfunctions) in state 103
WARNING: reduce/reduce conflict in state 104 resolved using rule (expresion -> Arreglo)
WARNING: rejected rule (valor -> Arreglo) in state 104
WARNING: reduce/reduce conflict in state 105 resolved using rule (expresion_logica -> booleano)
WARNING: rejected rule (valor -> booleano) in state 105
WARNING: reduce/reduce conflict in state 125 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 125
WARNING: reduce/reduce conflict in state 137 resolved using rule (expresion_logica -> booleano)
WARNING: rejected rule (valor -> booleano) in state 137
WARNING: reduce/reduce conflict in state 138 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 138
WARNING: reduce/reduce conflict in state 139 resolved using rule (expresion -> arrayfunctions)
WARNING: rejected rule (valor -> arrayfunctions) in state 139
WARNING: reduce/reduce conflict in state 140 resolved using rule (expresion -> Arreglo)
WARNING: rejected rule (valor -> Arreglo) in state 140
WARNING: reduce/reduce conflict in state 165 resolved using rule (multiIngreso -> VARIABLE)
WARNING: rejected rule (expresion -> VARIABLE) in state 165
WARNING: reduce/reduce conflict in state 165 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 165
WARNING: reduce/reduce conflict in state 165 resolved using rule (multiIngreso -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 165
WARNING: reduce/reduce conflict in state 277 resolved using rule (multiVariable -> VARIABLE)
WARNING: rejected rule (expresion -> VARIABLE) in state 277
WARNING: reduce/reduce conflict in state 277 resolved using rule (multiVariable -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 277
WARNING: reduce/reduce conflict in state 277 resolved using rule (expresion -> VARIABLE)
WARNING: rejected rule (valor -> VARIABLE) in state 277
