Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    DOLAR
    PHP
    PREG

Grammar

Rule 0     S' -> phpSyntax
Rule 1     phpSyntax -> inicio codigo fin
Rule 2     phpSyntax -> inicio fin
Rule 3     codigo -> algoritmo
Rule 4     codigo -> algoritmo codigo
Rule 5     codigo -> 
Rule 6     inicio -> INICIO
Rule 7     fin -> FIN
Rule 8     algoritmo -> asignacion
Rule 9     algoritmo -> declaracion
Rule 10    algoritmo -> comparacion
Rule 11    algoritmo -> condicionalIF
Rule 12    algoritmo -> iteracionFOR
Rule 13    algoritmo -> bucleWHILE
Rule 14    algoritmo -> bucleDO_WHILE
Rule 15    algoritmo -> indexacion
Rule 16    algoritmo -> echo
Rule 17    algoritmo -> terminar
Rule 18    asignacion -> ambito multiVariable IGUAL expresion PTOCO
Rule 19    asignacion -> multiVariable IGUAL expresion PTOCO
Rule 20    declaracion -> ambito multiVariable PTOCO
Rule 21    declaracion -> multiVariable PTOCO
Rule 22    multiVariable -> VARIABLE
Rule 23    multiVariable -> VARIABLE COMA multiVariable
Rule 24    ambito -> STATIC
Rule 25    ambito -> VAR
Rule 26    ambito -> GLOBAL
Rule 27    ambito -> CONST
Rule 28    comparacion -> valor operadorC expresion PTOCO
Rule 29    comparacion -> valor operadorM expresion PTOCO
Rule 30    comparacion -> valor operadorL expresion PTOCO
Rule 31    expresion -> valor
Rule 32    expresion -> expresion_aritmetica
Rule 33    expresion -> expresion_logica
Rule 34    expresion -> expresion_comparativa
Rule 35    expresion_aritmetica -> valor operadorM expresion
Rule 36    expresion_logica -> valor operadorL expresion
Rule 37    expresion_logica -> booleano
Rule 38    expresion_comparativa -> valor operadorC expresion
Rule 39    condicion -> expresion_logica
Rule 40    condicion -> expresion_comparativa
Rule 41    operadorM -> MAS
Rule 42    operadorM -> RESTA
Rule 43    operadorM -> PROD
Rule 44    operadorM -> DIV
Rule 45    operadorM -> MOD
Rule 46    operadorM -> POTENCIA
Rule 47    operadorC -> MAYOR
Rule 48    operadorC -> MENOR
Rule 49    operadorC -> COMPARACION
Rule 50    operadorC -> IDENTICO
Rule 51    operadorC -> DIFERENTE
Rule 52    operadorC -> NOIDENTICO
Rule 53    operadorC -> MENOROIGUAL
Rule 54    operadorC -> MAYOROIGUAL
Rule 55    operadorC -> NAVEESPACIAL
Rule 56    terminar -> BREAK PTOCO
Rule 57    operadorL -> AND
Rule 58    operadorL -> XOR
Rule 59    operadorL -> OR
Rule 60    operadorL -> NOT
Rule 61    valor -> INTEGER
Rule 62    valor -> booleano
Rule 63    valor -> STRING
Rule 64    valor -> FLOAT
Rule 65    valor -> VARIABLE
Rule 66    valor -> BOOLEAN
Rule 67    booleano -> TRUE
Rule 68    booleano -> FALSE
Rule 69    adicion -> MAS MAS VARIABLE
Rule 70    adicion -> MENOS MENOS VARIABLE
Rule 71    adicion -> VARIABLE MAS MAS
Rule 72    adicion -> VARIABLE MENOS MENOS
Rule 73    condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER
Rule 74    condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
Rule 75    condicionalIF -> IF PIZQ condicion PDER codigo
Rule 76    condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE
Rule 77    condicionalELSE -> ELSE LIZQ codigo LDER
Rule 78    condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
Rule 79    condicionalELSE -> ELSE codigo
Rule 80    condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE
Rule 81    iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
Rule 82    iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
Rule 83    bucleWHILE -> WHILE PIZQ condicion PDER codigo
Rule 84    bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER
Rule 85    bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
Rule 86    bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
Rule 87    indexacion -> VARIABLE CIZQ INTEGER CDER
Rule 88    indexacion -> VARIABLE CIZQ RESTA INTEGER CDER
Rule 89    indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL
Rule 90    indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
Rule 91    echo -> ECHO VARIABLE PTOCO
Rule 92    echo -> ECHO expresion PTOCO

Terminals, with rules where they appear

                     : 5
AND                  : 57
BOOLEAN              : 66
BREAK                : 56
CDER                 : 87 88 89 90
CIZQ                 : 87 88 89 90
COMA                 : 23
COMPARACION          : 49
CONST                : 27
DIFERENTE            : 51
DIV                  : 44
DO                   : 85 86
DOLAR                : 
ECHO                 : 91 92
ELSE                 : 77 79
ELSEIF               : 78 80
FALSE                : 68
FIN                  : 7
FLOAT                : 64
FOR                  : 81 82
FUSIONNULL           : 89 90
GLOBAL               : 26
IDENTICO             : 50
IF                   : 73 74 75 76
IGUAL                : 18 19
INICIO               : 6
INTEGER              : 61 87 88 89 90
LDER                 : 73 74 77 78 82 84 85 86 86
LIZQ                 : 73 74 77 78 82 84 85 86 86
MAS                  : 41 69 69 71 71
MAYOR                : 47
MAYOROIGUAL          : 54
MENOR                : 48
MENOROIGUAL          : 53
MENOS                : 70 70 72 72
MOD                  : 45
NAVEESPACIAL         : 55
NOIDENTICO           : 52
NOT                  : 60
OR                   : 59
PDER                 : 73 74 75 76 78 80 81 82 83 84 85 86
PHP                  : 
PIZQ                 : 73 74 75 76 78 80 81 82 83 84 85 86
POTENCIA             : 46
PREG                 : 
PROD                 : 43
PTOCO                : 18 19 20 21 28 29 30 56 81 82 91 92
RESTA                : 42 88 90
STATIC               : 24
STRING               : 63
TRUE                 : 67
VAR                  : 25
VARIABLE             : 22 23 65 69 70 71 72 87 88 89 90 91
WHILE                : 83 84 85 86
XOR                  : 58
error                : 

Nonterminals, with rules where they appear

adicion              : 81 82
algoritmo            : 3 4
ambito               : 18 20
asignacion           : 8 81 82
booleano             : 37 62
bucleDO_WHILE        : 14
bucleWHILE           : 13
codigo               : 1 4 73 74 75 76 77 78 79 80 81 82 83 84 85 85 86 86
comparacion          : 10
condicion            : 73 74 75 76 78 80 81 82 83 84 85 86
condicionalELSE      : 74 76 78 80
condicionalIF        : 11
declaracion          : 9
echo                 : 16
expresion            : 18 19 28 29 30 35 36 38 92
expresion_aritmetica : 32
expresion_comparativa : 34 40
expresion_logica     : 33 39
fin                  : 1 2
indexacion           : 15
inicio               : 1 2
iteracionFOR         : 12
multiVariable        : 18 19 20 21 23
operadorC            : 28 38
operadorL            : 30 36
operadorM            : 29 35
phpSyntax            : 0
terminar             : 17
valor                : 28 29 30 31 35 36 38

Parsing method: LALR

state 0

    (0) S' -> . phpSyntax
    (1) phpSyntax -> . inicio codigo fin
    (2) phpSyntax -> . inicio fin
    (6) inicio -> . INICIO

    INICIO          shift and go to state 3

    phpSyntax                      shift and go to state 1
    inicio                         shift and go to state 2

state 1

    (0) S' -> phpSyntax .



state 2

    (1) phpSyntax -> inicio . codigo fin
    (2) phpSyntax -> inicio . fin
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (7) fin -> . FIN
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    FIN             shift and go to state 8
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 4
    fin                            shift and go to state 5
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 3

    (6) inicio -> INICIO .

                    reduce using rule 6 (inicio -> INICIO .)
    FIN             reduce using rule 6 (inicio -> INICIO .)
    IF              reduce using rule 6 (inicio -> INICIO .)
    FOR             reduce using rule 6 (inicio -> INICIO .)
    WHILE           reduce using rule 6 (inicio -> INICIO .)
    DO              reduce using rule 6 (inicio -> INICIO .)
    VARIABLE        reduce using rule 6 (inicio -> INICIO .)
    ECHO            reduce using rule 6 (inicio -> INICIO .)
    BREAK           reduce using rule 6 (inicio -> INICIO .)
    STATIC          reduce using rule 6 (inicio -> INICIO .)
    VAR             reduce using rule 6 (inicio -> INICIO .)
    GLOBAL          reduce using rule 6 (inicio -> INICIO .)
    CONST           reduce using rule 6 (inicio -> INICIO .)
    INTEGER         reduce using rule 6 (inicio -> INICIO .)
    STRING          reduce using rule 6 (inicio -> INICIO .)
    FLOAT           reduce using rule 6 (inicio -> INICIO .)
    BOOLEAN         reduce using rule 6 (inicio -> INICIO .)
    TRUE            reduce using rule 6 (inicio -> INICIO .)
    FALSE           reduce using rule 6 (inicio -> INICIO .)


state 4

    (1) phpSyntax -> inicio codigo . fin
    (7) fin -> . FIN

    FIN             shift and go to state 8

    fin                            shift and go to state 40

state 5

    (2) phpSyntax -> inicio fin .

    $end            reduce using rule 2 (phpSyntax -> inicio fin .)


state 6

    (3) codigo -> algoritmo .
    (4) codigo -> algoritmo . codigo
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

  ! shift/reduce conflict for  resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    FIN             reduce using rule 3 (codigo -> algoritmo .)
    LDER            reduce using rule 3 (codigo -> algoritmo .)
    ELSE            reduce using rule 3 (codigo -> algoritmo .)
    ELSEIF          reduce using rule 3 (codigo -> algoritmo .)
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

  !                 [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! IF              [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FOR             [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! WHILE           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! DO              [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! VARIABLE        [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! ECHO            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! BREAK           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! STATIC          [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! VAR             [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! GLOBAL          [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! CONST           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! INTEGER         [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! STRING          [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FLOAT           [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! BOOLEAN         [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! TRUE            [ reduce using rule 3 (codigo -> algoritmo .) ]
  ! FALSE           [ reduce using rule 3 (codigo -> algoritmo .) ]

    algoritmo                      shift and go to state 6
    codigo                         shift and go to state 41
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 7

    (5) codigo ->  .

    FIN             reduce using rule 5 (codigo ->  .)
    LDER            reduce using rule 5 (codigo ->  .)
    ELSE            reduce using rule 5 (codigo ->  .)
    ELSEIF          reduce using rule 5 (codigo ->  .)
                    reduce using rule 5 (codigo ->  .)
    IF              reduce using rule 5 (codigo ->  .)
    FOR             reduce using rule 5 (codigo ->  .)
    WHILE           reduce using rule 5 (codigo ->  .)
    DO              reduce using rule 5 (codigo ->  .)
    VARIABLE        reduce using rule 5 (codigo ->  .)
    ECHO            reduce using rule 5 (codigo ->  .)
    BREAK           reduce using rule 5 (codigo ->  .)
    STATIC          reduce using rule 5 (codigo ->  .)
    VAR             reduce using rule 5 (codigo ->  .)
    GLOBAL          reduce using rule 5 (codigo ->  .)
    CONST           reduce using rule 5 (codigo ->  .)
    INTEGER         reduce using rule 5 (codigo ->  .)
    STRING          reduce using rule 5 (codigo ->  .)
    FLOAT           reduce using rule 5 (codigo ->  .)
    BOOLEAN         reduce using rule 5 (codigo ->  .)
    TRUE            reduce using rule 5 (codigo ->  .)
    FALSE           reduce using rule 5 (codigo ->  .)


state 8

    (7) fin -> FIN .

    $end            reduce using rule 7 (fin -> FIN .)


state 9

    (8) algoritmo -> asignacion .

                    reduce using rule 8 (algoritmo -> asignacion .)
    IF              reduce using rule 8 (algoritmo -> asignacion .)
    FOR             reduce using rule 8 (algoritmo -> asignacion .)
    WHILE           reduce using rule 8 (algoritmo -> asignacion .)
    DO              reduce using rule 8 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 8 (algoritmo -> asignacion .)
    ECHO            reduce using rule 8 (algoritmo -> asignacion .)
    BREAK           reduce using rule 8 (algoritmo -> asignacion .)
    STATIC          reduce using rule 8 (algoritmo -> asignacion .)
    VAR             reduce using rule 8 (algoritmo -> asignacion .)
    GLOBAL          reduce using rule 8 (algoritmo -> asignacion .)
    CONST           reduce using rule 8 (algoritmo -> asignacion .)
    INTEGER         reduce using rule 8 (algoritmo -> asignacion .)
    STRING          reduce using rule 8 (algoritmo -> asignacion .)
    FLOAT           reduce using rule 8 (algoritmo -> asignacion .)
    BOOLEAN         reduce using rule 8 (algoritmo -> asignacion .)
    TRUE            reduce using rule 8 (algoritmo -> asignacion .)
    FALSE           reduce using rule 8 (algoritmo -> asignacion .)
    FIN             reduce using rule 8 (algoritmo -> asignacion .)
    LDER            reduce using rule 8 (algoritmo -> asignacion .)
    ELSE            reduce using rule 8 (algoritmo -> asignacion .)
    ELSEIF          reduce using rule 8 (algoritmo -> asignacion .)


state 10

    (9) algoritmo -> declaracion .

                    reduce using rule 9 (algoritmo -> declaracion .)
    IF              reduce using rule 9 (algoritmo -> declaracion .)
    FOR             reduce using rule 9 (algoritmo -> declaracion .)
    WHILE           reduce using rule 9 (algoritmo -> declaracion .)
    DO              reduce using rule 9 (algoritmo -> declaracion .)
    VARIABLE        reduce using rule 9 (algoritmo -> declaracion .)
    ECHO            reduce using rule 9 (algoritmo -> declaracion .)
    BREAK           reduce using rule 9 (algoritmo -> declaracion .)
    STATIC          reduce using rule 9 (algoritmo -> declaracion .)
    VAR             reduce using rule 9 (algoritmo -> declaracion .)
    GLOBAL          reduce using rule 9 (algoritmo -> declaracion .)
    CONST           reduce using rule 9 (algoritmo -> declaracion .)
    INTEGER         reduce using rule 9 (algoritmo -> declaracion .)
    STRING          reduce using rule 9 (algoritmo -> declaracion .)
    FLOAT           reduce using rule 9 (algoritmo -> declaracion .)
    BOOLEAN         reduce using rule 9 (algoritmo -> declaracion .)
    TRUE            reduce using rule 9 (algoritmo -> declaracion .)
    FALSE           reduce using rule 9 (algoritmo -> declaracion .)
    FIN             reduce using rule 9 (algoritmo -> declaracion .)
    LDER            reduce using rule 9 (algoritmo -> declaracion .)
    ELSE            reduce using rule 9 (algoritmo -> declaracion .)
    ELSEIF          reduce using rule 9 (algoritmo -> declaracion .)


state 11

    (10) algoritmo -> comparacion .

                    reduce using rule 10 (algoritmo -> comparacion .)
    IF              reduce using rule 10 (algoritmo -> comparacion .)
    FOR             reduce using rule 10 (algoritmo -> comparacion .)
    WHILE           reduce using rule 10 (algoritmo -> comparacion .)
    DO              reduce using rule 10 (algoritmo -> comparacion .)
    VARIABLE        reduce using rule 10 (algoritmo -> comparacion .)
    ECHO            reduce using rule 10 (algoritmo -> comparacion .)
    BREAK           reduce using rule 10 (algoritmo -> comparacion .)
    STATIC          reduce using rule 10 (algoritmo -> comparacion .)
    VAR             reduce using rule 10 (algoritmo -> comparacion .)
    GLOBAL          reduce using rule 10 (algoritmo -> comparacion .)
    CONST           reduce using rule 10 (algoritmo -> comparacion .)
    INTEGER         reduce using rule 10 (algoritmo -> comparacion .)
    STRING          reduce using rule 10 (algoritmo -> comparacion .)
    FLOAT           reduce using rule 10 (algoritmo -> comparacion .)
    BOOLEAN         reduce using rule 10 (algoritmo -> comparacion .)
    TRUE            reduce using rule 10 (algoritmo -> comparacion .)
    FALSE           reduce using rule 10 (algoritmo -> comparacion .)
    FIN             reduce using rule 10 (algoritmo -> comparacion .)
    LDER            reduce using rule 10 (algoritmo -> comparacion .)
    ELSE            reduce using rule 10 (algoritmo -> comparacion .)
    ELSEIF          reduce using rule 10 (algoritmo -> comparacion .)


state 12

    (11) algoritmo -> condicionalIF .

                    reduce using rule 11 (algoritmo -> condicionalIF .)
    IF              reduce using rule 11 (algoritmo -> condicionalIF .)
    FOR             reduce using rule 11 (algoritmo -> condicionalIF .)
    WHILE           reduce using rule 11 (algoritmo -> condicionalIF .)
    DO              reduce using rule 11 (algoritmo -> condicionalIF .)
    VARIABLE        reduce using rule 11 (algoritmo -> condicionalIF .)
    ECHO            reduce using rule 11 (algoritmo -> condicionalIF .)
    BREAK           reduce using rule 11 (algoritmo -> condicionalIF .)
    STATIC          reduce using rule 11 (algoritmo -> condicionalIF .)
    VAR             reduce using rule 11 (algoritmo -> condicionalIF .)
    GLOBAL          reduce using rule 11 (algoritmo -> condicionalIF .)
    CONST           reduce using rule 11 (algoritmo -> condicionalIF .)
    INTEGER         reduce using rule 11 (algoritmo -> condicionalIF .)
    STRING          reduce using rule 11 (algoritmo -> condicionalIF .)
    FLOAT           reduce using rule 11 (algoritmo -> condicionalIF .)
    BOOLEAN         reduce using rule 11 (algoritmo -> condicionalIF .)
    TRUE            reduce using rule 11 (algoritmo -> condicionalIF .)
    FALSE           reduce using rule 11 (algoritmo -> condicionalIF .)
    FIN             reduce using rule 11 (algoritmo -> condicionalIF .)
    LDER            reduce using rule 11 (algoritmo -> condicionalIF .)
    ELSE            reduce using rule 11 (algoritmo -> condicionalIF .)
    ELSEIF          reduce using rule 11 (algoritmo -> condicionalIF .)


state 13

    (12) algoritmo -> iteracionFOR .

                    reduce using rule 12 (algoritmo -> iteracionFOR .)
    IF              reduce using rule 12 (algoritmo -> iteracionFOR .)
    FOR             reduce using rule 12 (algoritmo -> iteracionFOR .)
    WHILE           reduce using rule 12 (algoritmo -> iteracionFOR .)
    DO              reduce using rule 12 (algoritmo -> iteracionFOR .)
    VARIABLE        reduce using rule 12 (algoritmo -> iteracionFOR .)
    ECHO            reduce using rule 12 (algoritmo -> iteracionFOR .)
    BREAK           reduce using rule 12 (algoritmo -> iteracionFOR .)
    STATIC          reduce using rule 12 (algoritmo -> iteracionFOR .)
    VAR             reduce using rule 12 (algoritmo -> iteracionFOR .)
    GLOBAL          reduce using rule 12 (algoritmo -> iteracionFOR .)
    CONST           reduce using rule 12 (algoritmo -> iteracionFOR .)
    INTEGER         reduce using rule 12 (algoritmo -> iteracionFOR .)
    STRING          reduce using rule 12 (algoritmo -> iteracionFOR .)
    FLOAT           reduce using rule 12 (algoritmo -> iteracionFOR .)
    BOOLEAN         reduce using rule 12 (algoritmo -> iteracionFOR .)
    TRUE            reduce using rule 12 (algoritmo -> iteracionFOR .)
    FALSE           reduce using rule 12 (algoritmo -> iteracionFOR .)
    FIN             reduce using rule 12 (algoritmo -> iteracionFOR .)
    LDER            reduce using rule 12 (algoritmo -> iteracionFOR .)
    ELSE            reduce using rule 12 (algoritmo -> iteracionFOR .)
    ELSEIF          reduce using rule 12 (algoritmo -> iteracionFOR .)


state 14

    (13) algoritmo -> bucleWHILE .

                    reduce using rule 13 (algoritmo -> bucleWHILE .)
    IF              reduce using rule 13 (algoritmo -> bucleWHILE .)
    FOR             reduce using rule 13 (algoritmo -> bucleWHILE .)
    WHILE           reduce using rule 13 (algoritmo -> bucleWHILE .)
    DO              reduce using rule 13 (algoritmo -> bucleWHILE .)
    VARIABLE        reduce using rule 13 (algoritmo -> bucleWHILE .)
    ECHO            reduce using rule 13 (algoritmo -> bucleWHILE .)
    BREAK           reduce using rule 13 (algoritmo -> bucleWHILE .)
    STATIC          reduce using rule 13 (algoritmo -> bucleWHILE .)
    VAR             reduce using rule 13 (algoritmo -> bucleWHILE .)
    GLOBAL          reduce using rule 13 (algoritmo -> bucleWHILE .)
    CONST           reduce using rule 13 (algoritmo -> bucleWHILE .)
    INTEGER         reduce using rule 13 (algoritmo -> bucleWHILE .)
    STRING          reduce using rule 13 (algoritmo -> bucleWHILE .)
    FLOAT           reduce using rule 13 (algoritmo -> bucleWHILE .)
    BOOLEAN         reduce using rule 13 (algoritmo -> bucleWHILE .)
    TRUE            reduce using rule 13 (algoritmo -> bucleWHILE .)
    FALSE           reduce using rule 13 (algoritmo -> bucleWHILE .)
    FIN             reduce using rule 13 (algoritmo -> bucleWHILE .)
    LDER            reduce using rule 13 (algoritmo -> bucleWHILE .)
    ELSE            reduce using rule 13 (algoritmo -> bucleWHILE .)
    ELSEIF          reduce using rule 13 (algoritmo -> bucleWHILE .)


state 15

    (14) algoritmo -> bucleDO_WHILE .

                    reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    IF              reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FOR             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    WHILE           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    DO              reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    VARIABLE        reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ECHO            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    BREAK           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    STATIC          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    VAR             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    GLOBAL          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    CONST           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    INTEGER         reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    STRING          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FLOAT           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    BOOLEAN         reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    TRUE            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FALSE           reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    FIN             reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    LDER            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ELSE            reduce using rule 14 (algoritmo -> bucleDO_WHILE .)
    ELSEIF          reduce using rule 14 (algoritmo -> bucleDO_WHILE .)


state 16

    (15) algoritmo -> indexacion .

                    reduce using rule 15 (algoritmo -> indexacion .)
    IF              reduce using rule 15 (algoritmo -> indexacion .)
    FOR             reduce using rule 15 (algoritmo -> indexacion .)
    WHILE           reduce using rule 15 (algoritmo -> indexacion .)
    DO              reduce using rule 15 (algoritmo -> indexacion .)
    VARIABLE        reduce using rule 15 (algoritmo -> indexacion .)
    ECHO            reduce using rule 15 (algoritmo -> indexacion .)
    BREAK           reduce using rule 15 (algoritmo -> indexacion .)
    STATIC          reduce using rule 15 (algoritmo -> indexacion .)
    VAR             reduce using rule 15 (algoritmo -> indexacion .)
    GLOBAL          reduce using rule 15 (algoritmo -> indexacion .)
    CONST           reduce using rule 15 (algoritmo -> indexacion .)
    INTEGER         reduce using rule 15 (algoritmo -> indexacion .)
    STRING          reduce using rule 15 (algoritmo -> indexacion .)
    FLOAT           reduce using rule 15 (algoritmo -> indexacion .)
    BOOLEAN         reduce using rule 15 (algoritmo -> indexacion .)
    TRUE            reduce using rule 15 (algoritmo -> indexacion .)
    FALSE           reduce using rule 15 (algoritmo -> indexacion .)
    FIN             reduce using rule 15 (algoritmo -> indexacion .)
    LDER            reduce using rule 15 (algoritmo -> indexacion .)
    ELSE            reduce using rule 15 (algoritmo -> indexacion .)
    ELSEIF          reduce using rule 15 (algoritmo -> indexacion .)


state 17

    (16) algoritmo -> echo .

                    reduce using rule 16 (algoritmo -> echo .)
    IF              reduce using rule 16 (algoritmo -> echo .)
    FOR             reduce using rule 16 (algoritmo -> echo .)
    WHILE           reduce using rule 16 (algoritmo -> echo .)
    DO              reduce using rule 16 (algoritmo -> echo .)
    VARIABLE        reduce using rule 16 (algoritmo -> echo .)
    ECHO            reduce using rule 16 (algoritmo -> echo .)
    BREAK           reduce using rule 16 (algoritmo -> echo .)
    STATIC          reduce using rule 16 (algoritmo -> echo .)
    VAR             reduce using rule 16 (algoritmo -> echo .)
    GLOBAL          reduce using rule 16 (algoritmo -> echo .)
    CONST           reduce using rule 16 (algoritmo -> echo .)
    INTEGER         reduce using rule 16 (algoritmo -> echo .)
    STRING          reduce using rule 16 (algoritmo -> echo .)
    FLOAT           reduce using rule 16 (algoritmo -> echo .)
    BOOLEAN         reduce using rule 16 (algoritmo -> echo .)
    TRUE            reduce using rule 16 (algoritmo -> echo .)
    FALSE           reduce using rule 16 (algoritmo -> echo .)
    FIN             reduce using rule 16 (algoritmo -> echo .)
    LDER            reduce using rule 16 (algoritmo -> echo .)
    ELSE            reduce using rule 16 (algoritmo -> echo .)
    ELSEIF          reduce using rule 16 (algoritmo -> echo .)


state 18

    (17) algoritmo -> terminar .

                    reduce using rule 17 (algoritmo -> terminar .)
    IF              reduce using rule 17 (algoritmo -> terminar .)
    FOR             reduce using rule 17 (algoritmo -> terminar .)
    WHILE           reduce using rule 17 (algoritmo -> terminar .)
    DO              reduce using rule 17 (algoritmo -> terminar .)
    VARIABLE        reduce using rule 17 (algoritmo -> terminar .)
    ECHO            reduce using rule 17 (algoritmo -> terminar .)
    BREAK           reduce using rule 17 (algoritmo -> terminar .)
    STATIC          reduce using rule 17 (algoritmo -> terminar .)
    VAR             reduce using rule 17 (algoritmo -> terminar .)
    GLOBAL          reduce using rule 17 (algoritmo -> terminar .)
    CONST           reduce using rule 17 (algoritmo -> terminar .)
    INTEGER         reduce using rule 17 (algoritmo -> terminar .)
    STRING          reduce using rule 17 (algoritmo -> terminar .)
    FLOAT           reduce using rule 17 (algoritmo -> terminar .)
    BOOLEAN         reduce using rule 17 (algoritmo -> terminar .)
    TRUE            reduce using rule 17 (algoritmo -> terminar .)
    FALSE           reduce using rule 17 (algoritmo -> terminar .)
    FIN             reduce using rule 17 (algoritmo -> terminar .)
    LDER            reduce using rule 17 (algoritmo -> terminar .)
    ELSE            reduce using rule 17 (algoritmo -> terminar .)
    ELSEIF          reduce using rule 17 (algoritmo -> terminar .)


state 19

    (18) asignacion -> ambito . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> ambito . multiVariable PTOCO
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 43

    multiVariable                  shift and go to state 42

state 20

    (19) asignacion -> multiVariable . IGUAL expresion PTOCO
    (21) declaracion -> multiVariable . PTOCO

    IGUAL           shift and go to state 44
    PTOCO           shift and go to state 45


state 21

    (28) comparacion -> valor . operadorC expresion PTOCO
    (29) comparacion -> valor . operadorM expresion PTOCO
    (30) comparacion -> valor . operadorL expresion PTOCO
    (47) operadorC -> . MAYOR
    (48) operadorC -> . MENOR
    (49) operadorC -> . COMPARACION
    (50) operadorC -> . IDENTICO
    (51) operadorC -> . DIFERENTE
    (52) operadorC -> . NOIDENTICO
    (53) operadorC -> . MENOROIGUAL
    (54) operadorC -> . MAYOROIGUAL
    (55) operadorC -> . NAVEESPACIAL
    (41) operadorM -> . MAS
    (42) operadorM -> . RESTA
    (43) operadorM -> . PROD
    (44) operadorM -> . DIV
    (45) operadorM -> . MOD
    (46) operadorM -> . POTENCIA
    (57) operadorL -> . AND
    (58) operadorL -> . XOR
    (59) operadorL -> . OR
    (60) operadorL -> . NOT

    MAYOR           shift and go to state 49
    MENOR           shift and go to state 50
    COMPARACION     shift and go to state 51
    IDENTICO        shift and go to state 52
    DIFERENTE       shift and go to state 53
    NOIDENTICO      shift and go to state 54
    MENOROIGUAL     shift and go to state 55
    MAYOROIGUAL     shift and go to state 56
    NAVEESPACIAL    shift and go to state 57
    MAS             shift and go to state 58
    RESTA           shift and go to state 59
    PROD            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    POTENCIA        shift and go to state 63
    AND             shift and go to state 64
    XOR             shift and go to state 65
    OR              shift and go to state 66
    NOT             shift and go to state 67

    operadorC                      shift and go to state 46
    operadorM                      shift and go to state 47
    operadorL                      shift and go to state 48

state 22

    (73) condicionalIF -> IF . PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> IF . PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> IF . PIZQ condicion PDER codigo
    (76) condicionalIF -> IF . PIZQ condicion PDER codigo condicionalELSE

    PIZQ            shift and go to state 68


state 23

    (81) iteracionFOR -> FOR . PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> FOR . PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 69


state 24

    (83) bucleWHILE -> WHILE . PIZQ condicion PDER codigo
    (84) bucleWHILE -> WHILE . PIZQ condicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 70


state 25

    (85) bucleDO_WHILE -> DO . LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> DO . LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER

    LIZQ            shift and go to state 71


state 26

    (87) indexacion -> VARIABLE . CIZQ INTEGER CDER
    (88) indexacion -> VARIABLE . CIZQ RESTA INTEGER CDER
    (89) indexacion -> VARIABLE . CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> VARIABLE . CIZQ RESTA INTEGER CDER FUSIONNULL
    (22) multiVariable -> VARIABLE .
    (23) multiVariable -> VARIABLE . COMA multiVariable
    (65) valor -> VARIABLE .

    CIZQ            shift and go to state 72
    IGUAL           reduce using rule 22 (multiVariable -> VARIABLE .)
    PTOCO           reduce using rule 22 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 73
    MAYOR           reduce using rule 65 (valor -> VARIABLE .)
    MENOR           reduce using rule 65 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 65 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 65 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 65 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 65 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 65 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 65 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 65 (valor -> VARIABLE .)
    MAS             reduce using rule 65 (valor -> VARIABLE .)
    RESTA           reduce using rule 65 (valor -> VARIABLE .)
    PROD            reduce using rule 65 (valor -> VARIABLE .)
    DIV             reduce using rule 65 (valor -> VARIABLE .)
    MOD             reduce using rule 65 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 65 (valor -> VARIABLE .)
    AND             reduce using rule 65 (valor -> VARIABLE .)
    XOR             reduce using rule 65 (valor -> VARIABLE .)
    OR              reduce using rule 65 (valor -> VARIABLE .)
    NOT             reduce using rule 65 (valor -> VARIABLE .)


state 27

    (61) valor -> INTEGER .

    MAYOR           reduce using rule 61 (valor -> INTEGER .)
    MENOR           reduce using rule 61 (valor -> INTEGER .)
    COMPARACION     reduce using rule 61 (valor -> INTEGER .)
    IDENTICO        reduce using rule 61 (valor -> INTEGER .)
    DIFERENTE       reduce using rule 61 (valor -> INTEGER .)
    NOIDENTICO      reduce using rule 61 (valor -> INTEGER .)
    MENOROIGUAL     reduce using rule 61 (valor -> INTEGER .)
    MAYOROIGUAL     reduce using rule 61 (valor -> INTEGER .)
    NAVEESPACIAL    reduce using rule 61 (valor -> INTEGER .)
    MAS             reduce using rule 61 (valor -> INTEGER .)
    RESTA           reduce using rule 61 (valor -> INTEGER .)
    PROD            reduce using rule 61 (valor -> INTEGER .)
    DIV             reduce using rule 61 (valor -> INTEGER .)
    MOD             reduce using rule 61 (valor -> INTEGER .)
    POTENCIA        reduce using rule 61 (valor -> INTEGER .)
    AND             reduce using rule 61 (valor -> INTEGER .)
    XOR             reduce using rule 61 (valor -> INTEGER .)
    OR              reduce using rule 61 (valor -> INTEGER .)
    NOT             reduce using rule 61 (valor -> INTEGER .)
    PTOCO           reduce using rule 61 (valor -> INTEGER .)
    PDER            reduce using rule 61 (valor -> INTEGER .)


state 28

    (91) echo -> ECHO . VARIABLE PTOCO
    (92) echo -> ECHO . expresion PTOCO
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    VARIABLE        shift and go to state 74
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 75
    valor                          shift and go to state 76
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 29

    (56) terminar -> BREAK . PTOCO

    PTOCO           shift and go to state 81


state 30

    (24) ambito -> STATIC .

    VARIABLE        reduce using rule 24 (ambito -> STATIC .)


state 31

    (25) ambito -> VAR .

    VARIABLE        reduce using rule 25 (ambito -> VAR .)


state 32

    (26) ambito -> GLOBAL .

    VARIABLE        reduce using rule 26 (ambito -> GLOBAL .)


state 33

    (27) ambito -> CONST .

    VARIABLE        reduce using rule 27 (ambito -> CONST .)


state 34

    (62) valor -> booleano .

    MAYOR           reduce using rule 62 (valor -> booleano .)
    MENOR           reduce using rule 62 (valor -> booleano .)
    COMPARACION     reduce using rule 62 (valor -> booleano .)
    IDENTICO        reduce using rule 62 (valor -> booleano .)
    DIFERENTE       reduce using rule 62 (valor -> booleano .)
    NOIDENTICO      reduce using rule 62 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 62 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 62 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 62 (valor -> booleano .)
    MAS             reduce using rule 62 (valor -> booleano .)
    RESTA           reduce using rule 62 (valor -> booleano .)
    PROD            reduce using rule 62 (valor -> booleano .)
    DIV             reduce using rule 62 (valor -> booleano .)
    MOD             reduce using rule 62 (valor -> booleano .)
    POTENCIA        reduce using rule 62 (valor -> booleano .)
    AND             reduce using rule 62 (valor -> booleano .)
    XOR             reduce using rule 62 (valor -> booleano .)
    OR              reduce using rule 62 (valor -> booleano .)
    NOT             reduce using rule 62 (valor -> booleano .)


state 35

    (63) valor -> STRING .

    MAYOR           reduce using rule 63 (valor -> STRING .)
    MENOR           reduce using rule 63 (valor -> STRING .)
    COMPARACION     reduce using rule 63 (valor -> STRING .)
    IDENTICO        reduce using rule 63 (valor -> STRING .)
    DIFERENTE       reduce using rule 63 (valor -> STRING .)
    NOIDENTICO      reduce using rule 63 (valor -> STRING .)
    MENOROIGUAL     reduce using rule 63 (valor -> STRING .)
    MAYOROIGUAL     reduce using rule 63 (valor -> STRING .)
    NAVEESPACIAL    reduce using rule 63 (valor -> STRING .)
    MAS             reduce using rule 63 (valor -> STRING .)
    RESTA           reduce using rule 63 (valor -> STRING .)
    PROD            reduce using rule 63 (valor -> STRING .)
    DIV             reduce using rule 63 (valor -> STRING .)
    MOD             reduce using rule 63 (valor -> STRING .)
    POTENCIA        reduce using rule 63 (valor -> STRING .)
    AND             reduce using rule 63 (valor -> STRING .)
    XOR             reduce using rule 63 (valor -> STRING .)
    OR              reduce using rule 63 (valor -> STRING .)
    NOT             reduce using rule 63 (valor -> STRING .)
    PTOCO           reduce using rule 63 (valor -> STRING .)
    PDER            reduce using rule 63 (valor -> STRING .)


state 36

    (64) valor -> FLOAT .

    MAYOR           reduce using rule 64 (valor -> FLOAT .)
    MENOR           reduce using rule 64 (valor -> FLOAT .)
    COMPARACION     reduce using rule 64 (valor -> FLOAT .)
    IDENTICO        reduce using rule 64 (valor -> FLOAT .)
    DIFERENTE       reduce using rule 64 (valor -> FLOAT .)
    NOIDENTICO      reduce using rule 64 (valor -> FLOAT .)
    MENOROIGUAL     reduce using rule 64 (valor -> FLOAT .)
    MAYOROIGUAL     reduce using rule 64 (valor -> FLOAT .)
    NAVEESPACIAL    reduce using rule 64 (valor -> FLOAT .)
    MAS             reduce using rule 64 (valor -> FLOAT .)
    RESTA           reduce using rule 64 (valor -> FLOAT .)
    PROD            reduce using rule 64 (valor -> FLOAT .)
    DIV             reduce using rule 64 (valor -> FLOAT .)
    MOD             reduce using rule 64 (valor -> FLOAT .)
    POTENCIA        reduce using rule 64 (valor -> FLOAT .)
    AND             reduce using rule 64 (valor -> FLOAT .)
    XOR             reduce using rule 64 (valor -> FLOAT .)
    OR              reduce using rule 64 (valor -> FLOAT .)
    NOT             reduce using rule 64 (valor -> FLOAT .)
    PTOCO           reduce using rule 64 (valor -> FLOAT .)
    PDER            reduce using rule 64 (valor -> FLOAT .)


state 37

    (66) valor -> BOOLEAN .

    MAYOR           reduce using rule 66 (valor -> BOOLEAN .)
    MENOR           reduce using rule 66 (valor -> BOOLEAN .)
    COMPARACION     reduce using rule 66 (valor -> BOOLEAN .)
    IDENTICO        reduce using rule 66 (valor -> BOOLEAN .)
    DIFERENTE       reduce using rule 66 (valor -> BOOLEAN .)
    NOIDENTICO      reduce using rule 66 (valor -> BOOLEAN .)
    MENOROIGUAL     reduce using rule 66 (valor -> BOOLEAN .)
    MAYOROIGUAL     reduce using rule 66 (valor -> BOOLEAN .)
    NAVEESPACIAL    reduce using rule 66 (valor -> BOOLEAN .)
    MAS             reduce using rule 66 (valor -> BOOLEAN .)
    RESTA           reduce using rule 66 (valor -> BOOLEAN .)
    PROD            reduce using rule 66 (valor -> BOOLEAN .)
    DIV             reduce using rule 66 (valor -> BOOLEAN .)
    MOD             reduce using rule 66 (valor -> BOOLEAN .)
    POTENCIA        reduce using rule 66 (valor -> BOOLEAN .)
    AND             reduce using rule 66 (valor -> BOOLEAN .)
    XOR             reduce using rule 66 (valor -> BOOLEAN .)
    OR              reduce using rule 66 (valor -> BOOLEAN .)
    NOT             reduce using rule 66 (valor -> BOOLEAN .)
    PTOCO           reduce using rule 66 (valor -> BOOLEAN .)
    PDER            reduce using rule 66 (valor -> BOOLEAN .)


state 38

    (67) booleano -> TRUE .

    MAYOR           reduce using rule 67 (booleano -> TRUE .)
    MENOR           reduce using rule 67 (booleano -> TRUE .)
    COMPARACION     reduce using rule 67 (booleano -> TRUE .)
    IDENTICO        reduce using rule 67 (booleano -> TRUE .)
    DIFERENTE       reduce using rule 67 (booleano -> TRUE .)
    NOIDENTICO      reduce using rule 67 (booleano -> TRUE .)
    MENOROIGUAL     reduce using rule 67 (booleano -> TRUE .)
    MAYOROIGUAL     reduce using rule 67 (booleano -> TRUE .)
    NAVEESPACIAL    reduce using rule 67 (booleano -> TRUE .)
    MAS             reduce using rule 67 (booleano -> TRUE .)
    RESTA           reduce using rule 67 (booleano -> TRUE .)
    PROD            reduce using rule 67 (booleano -> TRUE .)
    DIV             reduce using rule 67 (booleano -> TRUE .)
    MOD             reduce using rule 67 (booleano -> TRUE .)
    POTENCIA        reduce using rule 67 (booleano -> TRUE .)
    AND             reduce using rule 67 (booleano -> TRUE .)
    XOR             reduce using rule 67 (booleano -> TRUE .)
    OR              reduce using rule 67 (booleano -> TRUE .)
    NOT             reduce using rule 67 (booleano -> TRUE .)
    PTOCO           reduce using rule 67 (booleano -> TRUE .)
    PDER            reduce using rule 67 (booleano -> TRUE .)


state 39

    (68) booleano -> FALSE .

    MAYOR           reduce using rule 68 (booleano -> FALSE .)
    MENOR           reduce using rule 68 (booleano -> FALSE .)
    COMPARACION     reduce using rule 68 (booleano -> FALSE .)
    IDENTICO        reduce using rule 68 (booleano -> FALSE .)
    DIFERENTE       reduce using rule 68 (booleano -> FALSE .)
    NOIDENTICO      reduce using rule 68 (booleano -> FALSE .)
    MENOROIGUAL     reduce using rule 68 (booleano -> FALSE .)
    MAYOROIGUAL     reduce using rule 68 (booleano -> FALSE .)
    NAVEESPACIAL    reduce using rule 68 (booleano -> FALSE .)
    MAS             reduce using rule 68 (booleano -> FALSE .)
    RESTA           reduce using rule 68 (booleano -> FALSE .)
    PROD            reduce using rule 68 (booleano -> FALSE .)
    DIV             reduce using rule 68 (booleano -> FALSE .)
    MOD             reduce using rule 68 (booleano -> FALSE .)
    POTENCIA        reduce using rule 68 (booleano -> FALSE .)
    AND             reduce using rule 68 (booleano -> FALSE .)
    XOR             reduce using rule 68 (booleano -> FALSE .)
    OR              reduce using rule 68 (booleano -> FALSE .)
    NOT             reduce using rule 68 (booleano -> FALSE .)
    PTOCO           reduce using rule 68 (booleano -> FALSE .)
    PDER            reduce using rule 68 (booleano -> FALSE .)


state 40

    (1) phpSyntax -> inicio codigo fin .

    $end            reduce using rule 1 (phpSyntax -> inicio codigo fin .)


state 41

    (4) codigo -> algoritmo codigo .

    FIN             reduce using rule 4 (codigo -> algoritmo codigo .)
    LDER            reduce using rule 4 (codigo -> algoritmo codigo .)
    ELSE            reduce using rule 4 (codigo -> algoritmo codigo .)
    ELSEIF          reduce using rule 4 (codigo -> algoritmo codigo .)
                    reduce using rule 4 (codigo -> algoritmo codigo .)
    IF              reduce using rule 4 (codigo -> algoritmo codigo .)
    FOR             reduce using rule 4 (codigo -> algoritmo codigo .)
    WHILE           reduce using rule 4 (codigo -> algoritmo codigo .)
    DO              reduce using rule 4 (codigo -> algoritmo codigo .)
    VARIABLE        reduce using rule 4 (codigo -> algoritmo codigo .)
    ECHO            reduce using rule 4 (codigo -> algoritmo codigo .)
    BREAK           reduce using rule 4 (codigo -> algoritmo codigo .)
    STATIC          reduce using rule 4 (codigo -> algoritmo codigo .)
    VAR             reduce using rule 4 (codigo -> algoritmo codigo .)
    GLOBAL          reduce using rule 4 (codigo -> algoritmo codigo .)
    CONST           reduce using rule 4 (codigo -> algoritmo codigo .)
    INTEGER         reduce using rule 4 (codigo -> algoritmo codigo .)
    STRING          reduce using rule 4 (codigo -> algoritmo codigo .)
    FLOAT           reduce using rule 4 (codigo -> algoritmo codigo .)
    BOOLEAN         reduce using rule 4 (codigo -> algoritmo codigo .)
    TRUE            reduce using rule 4 (codigo -> algoritmo codigo .)
    FALSE           reduce using rule 4 (codigo -> algoritmo codigo .)


state 42

    (18) asignacion -> ambito multiVariable . IGUAL expresion PTOCO
    (20) declaracion -> ambito multiVariable . PTOCO

    IGUAL           shift and go to state 82
    PTOCO           shift and go to state 83


state 43

    (22) multiVariable -> VARIABLE .
    (23) multiVariable -> VARIABLE . COMA multiVariable

    IGUAL           reduce using rule 22 (multiVariable -> VARIABLE .)
    PTOCO           reduce using rule 22 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 73


state 44

    (19) asignacion -> multiVariable IGUAL . expresion PTOCO
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 84
    valor                          shift and go to state 76
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 45

    (21) declaracion -> multiVariable PTOCO .

                    reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    IF              reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    FOR             reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    WHILE           reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    DO              reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    VARIABLE        reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    ECHO            reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    BREAK           reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    STATIC          reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    VAR             reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    GLOBAL          reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    CONST           reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    INTEGER         reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    STRING          reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    FLOAT           reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    BOOLEAN         reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    TRUE            reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    FALSE           reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    FIN             reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    LDER            reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    ELSE            reduce using rule 21 (declaracion -> multiVariable PTOCO .)
    ELSEIF          reduce using rule 21 (declaracion -> multiVariable PTOCO .)


state 46

    (28) comparacion -> valor operadorC . expresion PTOCO
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    valor                          shift and go to state 76
    expresion                      shift and go to state 86
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 47

    (29) comparacion -> valor operadorM . expresion PTOCO
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    valor                          shift and go to state 76
    expresion                      shift and go to state 87
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 48

    (30) comparacion -> valor operadorL . expresion PTOCO
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    valor                          shift and go to state 76
    expresion                      shift and go to state 88
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 49

    (47) operadorC -> MAYOR .

    INTEGER         reduce using rule 47 (operadorC -> MAYOR .)
    STRING          reduce using rule 47 (operadorC -> MAYOR .)
    FLOAT           reduce using rule 47 (operadorC -> MAYOR .)
    VARIABLE        reduce using rule 47 (operadorC -> MAYOR .)
    BOOLEAN         reduce using rule 47 (operadorC -> MAYOR .)
    TRUE            reduce using rule 47 (operadorC -> MAYOR .)
    FALSE           reduce using rule 47 (operadorC -> MAYOR .)


state 50

    (48) operadorC -> MENOR .

    INTEGER         reduce using rule 48 (operadorC -> MENOR .)
    STRING          reduce using rule 48 (operadorC -> MENOR .)
    FLOAT           reduce using rule 48 (operadorC -> MENOR .)
    VARIABLE        reduce using rule 48 (operadorC -> MENOR .)
    BOOLEAN         reduce using rule 48 (operadorC -> MENOR .)
    TRUE            reduce using rule 48 (operadorC -> MENOR .)
    FALSE           reduce using rule 48 (operadorC -> MENOR .)


state 51

    (49) operadorC -> COMPARACION .

    INTEGER         reduce using rule 49 (operadorC -> COMPARACION .)
    STRING          reduce using rule 49 (operadorC -> COMPARACION .)
    FLOAT           reduce using rule 49 (operadorC -> COMPARACION .)
    VARIABLE        reduce using rule 49 (operadorC -> COMPARACION .)
    BOOLEAN         reduce using rule 49 (operadorC -> COMPARACION .)
    TRUE            reduce using rule 49 (operadorC -> COMPARACION .)
    FALSE           reduce using rule 49 (operadorC -> COMPARACION .)


state 52

    (50) operadorC -> IDENTICO .

    INTEGER         reduce using rule 50 (operadorC -> IDENTICO .)
    STRING          reduce using rule 50 (operadorC -> IDENTICO .)
    FLOAT           reduce using rule 50 (operadorC -> IDENTICO .)
    VARIABLE        reduce using rule 50 (operadorC -> IDENTICO .)
    BOOLEAN         reduce using rule 50 (operadorC -> IDENTICO .)
    TRUE            reduce using rule 50 (operadorC -> IDENTICO .)
    FALSE           reduce using rule 50 (operadorC -> IDENTICO .)


state 53

    (51) operadorC -> DIFERENTE .

    INTEGER         reduce using rule 51 (operadorC -> DIFERENTE .)
    STRING          reduce using rule 51 (operadorC -> DIFERENTE .)
    FLOAT           reduce using rule 51 (operadorC -> DIFERENTE .)
    VARIABLE        reduce using rule 51 (operadorC -> DIFERENTE .)
    BOOLEAN         reduce using rule 51 (operadorC -> DIFERENTE .)
    TRUE            reduce using rule 51 (operadorC -> DIFERENTE .)
    FALSE           reduce using rule 51 (operadorC -> DIFERENTE .)


state 54

    (52) operadorC -> NOIDENTICO .

    INTEGER         reduce using rule 52 (operadorC -> NOIDENTICO .)
    STRING          reduce using rule 52 (operadorC -> NOIDENTICO .)
    FLOAT           reduce using rule 52 (operadorC -> NOIDENTICO .)
    VARIABLE        reduce using rule 52 (operadorC -> NOIDENTICO .)
    BOOLEAN         reduce using rule 52 (operadorC -> NOIDENTICO .)
    TRUE            reduce using rule 52 (operadorC -> NOIDENTICO .)
    FALSE           reduce using rule 52 (operadorC -> NOIDENTICO .)


state 55

    (53) operadorC -> MENOROIGUAL .

    INTEGER         reduce using rule 53 (operadorC -> MENOROIGUAL .)
    STRING          reduce using rule 53 (operadorC -> MENOROIGUAL .)
    FLOAT           reduce using rule 53 (operadorC -> MENOROIGUAL .)
    VARIABLE        reduce using rule 53 (operadorC -> MENOROIGUAL .)
    BOOLEAN         reduce using rule 53 (operadorC -> MENOROIGUAL .)
    TRUE            reduce using rule 53 (operadorC -> MENOROIGUAL .)
    FALSE           reduce using rule 53 (operadorC -> MENOROIGUAL .)


state 56

    (54) operadorC -> MAYOROIGUAL .

    INTEGER         reduce using rule 54 (operadorC -> MAYOROIGUAL .)
    STRING          reduce using rule 54 (operadorC -> MAYOROIGUAL .)
    FLOAT           reduce using rule 54 (operadorC -> MAYOROIGUAL .)
    VARIABLE        reduce using rule 54 (operadorC -> MAYOROIGUAL .)
    BOOLEAN         reduce using rule 54 (operadorC -> MAYOROIGUAL .)
    TRUE            reduce using rule 54 (operadorC -> MAYOROIGUAL .)
    FALSE           reduce using rule 54 (operadorC -> MAYOROIGUAL .)


state 57

    (55) operadorC -> NAVEESPACIAL .

    INTEGER         reduce using rule 55 (operadorC -> NAVEESPACIAL .)
    STRING          reduce using rule 55 (operadorC -> NAVEESPACIAL .)
    FLOAT           reduce using rule 55 (operadorC -> NAVEESPACIAL .)
    VARIABLE        reduce using rule 55 (operadorC -> NAVEESPACIAL .)
    BOOLEAN         reduce using rule 55 (operadorC -> NAVEESPACIAL .)
    TRUE            reduce using rule 55 (operadorC -> NAVEESPACIAL .)
    FALSE           reduce using rule 55 (operadorC -> NAVEESPACIAL .)


state 58

    (41) operadorM -> MAS .

    INTEGER         reduce using rule 41 (operadorM -> MAS .)
    STRING          reduce using rule 41 (operadorM -> MAS .)
    FLOAT           reduce using rule 41 (operadorM -> MAS .)
    VARIABLE        reduce using rule 41 (operadorM -> MAS .)
    BOOLEAN         reduce using rule 41 (operadorM -> MAS .)
    TRUE            reduce using rule 41 (operadorM -> MAS .)
    FALSE           reduce using rule 41 (operadorM -> MAS .)


state 59

    (42) operadorM -> RESTA .

    INTEGER         reduce using rule 42 (operadorM -> RESTA .)
    STRING          reduce using rule 42 (operadorM -> RESTA .)
    FLOAT           reduce using rule 42 (operadorM -> RESTA .)
    VARIABLE        reduce using rule 42 (operadorM -> RESTA .)
    BOOLEAN         reduce using rule 42 (operadorM -> RESTA .)
    TRUE            reduce using rule 42 (operadorM -> RESTA .)
    FALSE           reduce using rule 42 (operadorM -> RESTA .)


state 60

    (43) operadorM -> PROD .

    INTEGER         reduce using rule 43 (operadorM -> PROD .)
    STRING          reduce using rule 43 (operadorM -> PROD .)
    FLOAT           reduce using rule 43 (operadorM -> PROD .)
    VARIABLE        reduce using rule 43 (operadorM -> PROD .)
    BOOLEAN         reduce using rule 43 (operadorM -> PROD .)
    TRUE            reduce using rule 43 (operadorM -> PROD .)
    FALSE           reduce using rule 43 (operadorM -> PROD .)


state 61

    (44) operadorM -> DIV .

    INTEGER         reduce using rule 44 (operadorM -> DIV .)
    STRING          reduce using rule 44 (operadorM -> DIV .)
    FLOAT           reduce using rule 44 (operadorM -> DIV .)
    VARIABLE        reduce using rule 44 (operadorM -> DIV .)
    BOOLEAN         reduce using rule 44 (operadorM -> DIV .)
    TRUE            reduce using rule 44 (operadorM -> DIV .)
    FALSE           reduce using rule 44 (operadorM -> DIV .)


state 62

    (45) operadorM -> MOD .

    INTEGER         reduce using rule 45 (operadorM -> MOD .)
    STRING          reduce using rule 45 (operadorM -> MOD .)
    FLOAT           reduce using rule 45 (operadorM -> MOD .)
    VARIABLE        reduce using rule 45 (operadorM -> MOD .)
    BOOLEAN         reduce using rule 45 (operadorM -> MOD .)
    TRUE            reduce using rule 45 (operadorM -> MOD .)
    FALSE           reduce using rule 45 (operadorM -> MOD .)


state 63

    (46) operadorM -> POTENCIA .

    INTEGER         reduce using rule 46 (operadorM -> POTENCIA .)
    STRING          reduce using rule 46 (operadorM -> POTENCIA .)
    FLOAT           reduce using rule 46 (operadorM -> POTENCIA .)
    VARIABLE        reduce using rule 46 (operadorM -> POTENCIA .)
    BOOLEAN         reduce using rule 46 (operadorM -> POTENCIA .)
    TRUE            reduce using rule 46 (operadorM -> POTENCIA .)
    FALSE           reduce using rule 46 (operadorM -> POTENCIA .)


state 64

    (57) operadorL -> AND .

    INTEGER         reduce using rule 57 (operadorL -> AND .)
    STRING          reduce using rule 57 (operadorL -> AND .)
    FLOAT           reduce using rule 57 (operadorL -> AND .)
    VARIABLE        reduce using rule 57 (operadorL -> AND .)
    BOOLEAN         reduce using rule 57 (operadorL -> AND .)
    TRUE            reduce using rule 57 (operadorL -> AND .)
    FALSE           reduce using rule 57 (operadorL -> AND .)


state 65

    (58) operadorL -> XOR .

    INTEGER         reduce using rule 58 (operadorL -> XOR .)
    STRING          reduce using rule 58 (operadorL -> XOR .)
    FLOAT           reduce using rule 58 (operadorL -> XOR .)
    VARIABLE        reduce using rule 58 (operadorL -> XOR .)
    BOOLEAN         reduce using rule 58 (operadorL -> XOR .)
    TRUE            reduce using rule 58 (operadorL -> XOR .)
    FALSE           reduce using rule 58 (operadorL -> XOR .)


state 66

    (59) operadorL -> OR .

    INTEGER         reduce using rule 59 (operadorL -> OR .)
    STRING          reduce using rule 59 (operadorL -> OR .)
    FLOAT           reduce using rule 59 (operadorL -> OR .)
    VARIABLE        reduce using rule 59 (operadorL -> OR .)
    BOOLEAN         reduce using rule 59 (operadorL -> OR .)
    TRUE            reduce using rule 59 (operadorL -> OR .)
    FALSE           reduce using rule 59 (operadorL -> OR .)


state 67

    (60) operadorL -> NOT .

    INTEGER         reduce using rule 60 (operadorL -> NOT .)
    STRING          reduce using rule 60 (operadorL -> NOT .)
    FLOAT           reduce using rule 60 (operadorL -> NOT .)
    VARIABLE        reduce using rule 60 (operadorL -> NOT .)
    BOOLEAN         reduce using rule 60 (operadorL -> NOT .)
    TRUE            reduce using rule 60 (operadorL -> NOT .)
    FALSE           reduce using rule 60 (operadorL -> NOT .)


state 68

    (73) condicionalIF -> IF PIZQ . condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> IF PIZQ . condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> IF PIZQ . condicion PDER codigo
    (76) condicionalIF -> IF PIZQ . condicion PDER codigo condicionalELSE
    (39) condicion -> . expresion_logica
    (40) condicion -> . expresion_comparativa
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    condicion                      shift and go to state 89
    expresion_logica               shift and go to state 90
    expresion_comparativa          shift and go to state 91
    valor                          shift and go to state 92
    booleano                       shift and go to state 93

state 69

    (81) iteracionFOR -> FOR PIZQ . asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> FOR PIZQ . asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable

    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    VARIABLE        shift and go to state 43

    asignacion                     shift and go to state 94
    ambito                         shift and go to state 95
    multiVariable                  shift and go to state 96

state 70

    (83) bucleWHILE -> WHILE PIZQ . condicion PDER codigo
    (84) bucleWHILE -> WHILE PIZQ . condicion PDER LIZQ codigo LDER
    (39) condicion -> . expresion_logica
    (40) condicion -> . expresion_comparativa
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    condicion                      shift and go to state 97
    expresion_logica               shift and go to state 90
    expresion_comparativa          shift and go to state 91
    valor                          shift and go to state 92
    booleano                       shift and go to state 93

state 71

    (85) bucleDO_WHILE -> DO LIZQ . codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> DO LIZQ . codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 98
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 72

    (87) indexacion -> VARIABLE CIZQ . INTEGER CDER
    (88) indexacion -> VARIABLE CIZQ . RESTA INTEGER CDER
    (89) indexacion -> VARIABLE CIZQ . INTEGER CDER FUSIONNULL
    (90) indexacion -> VARIABLE CIZQ . RESTA INTEGER CDER FUSIONNULL

    INTEGER         shift and go to state 99
    RESTA           shift and go to state 100


state 73

    (23) multiVariable -> VARIABLE COMA . multiVariable
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 43

    multiVariable                  shift and go to state 101

state 74

    (91) echo -> ECHO VARIABLE . PTOCO
    (65) valor -> VARIABLE .

  ! shift/reduce conflict for PTOCO resolved as shift
    PTOCO           shift and go to state 102
    MAS             reduce using rule 65 (valor -> VARIABLE .)
    RESTA           reduce using rule 65 (valor -> VARIABLE .)
    PROD            reduce using rule 65 (valor -> VARIABLE .)
    DIV             reduce using rule 65 (valor -> VARIABLE .)
    MOD             reduce using rule 65 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 65 (valor -> VARIABLE .)
    AND             reduce using rule 65 (valor -> VARIABLE .)
    XOR             reduce using rule 65 (valor -> VARIABLE .)
    OR              reduce using rule 65 (valor -> VARIABLE .)
    NOT             reduce using rule 65 (valor -> VARIABLE .)
    MAYOR           reduce using rule 65 (valor -> VARIABLE .)
    MENOR           reduce using rule 65 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 65 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 65 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 65 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 65 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 65 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 65 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 65 (valor -> VARIABLE .)

  ! PTOCO           [ reduce using rule 65 (valor -> VARIABLE .) ]


state 75

    (92) echo -> ECHO expresion . PTOCO

    PTOCO           shift and go to state 103


state 76

    (31) expresion -> valor .
    (35) expresion_aritmetica -> valor . operadorM expresion
    (36) expresion_logica -> valor . operadorL expresion
    (38) expresion_comparativa -> valor . operadorC expresion
    (41) operadorM -> . MAS
    (42) operadorM -> . RESTA
    (43) operadorM -> . PROD
    (44) operadorM -> . DIV
    (45) operadorM -> . MOD
    (46) operadorM -> . POTENCIA
    (57) operadorL -> . AND
    (58) operadorL -> . XOR
    (59) operadorL -> . OR
    (60) operadorL -> . NOT
    (47) operadorC -> . MAYOR
    (48) operadorC -> . MENOR
    (49) operadorC -> . COMPARACION
    (50) operadorC -> . IDENTICO
    (51) operadorC -> . DIFERENTE
    (52) operadorC -> . NOIDENTICO
    (53) operadorC -> . MENOROIGUAL
    (54) operadorC -> . MAYOROIGUAL
    (55) operadorC -> . NAVEESPACIAL

    PTOCO           reduce using rule 31 (expresion -> valor .)
    PDER            reduce using rule 31 (expresion -> valor .)
    MAS             shift and go to state 58
    RESTA           shift and go to state 59
    PROD            shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    POTENCIA        shift and go to state 63
    AND             shift and go to state 64
    XOR             shift and go to state 65
    OR              shift and go to state 66
    NOT             shift and go to state 67
    MAYOR           shift and go to state 49
    MENOR           shift and go to state 50
    COMPARACION     shift and go to state 51
    IDENTICO        shift and go to state 52
    DIFERENTE       shift and go to state 53
    NOIDENTICO      shift and go to state 54
    MENOROIGUAL     shift and go to state 55
    MAYOROIGUAL     shift and go to state 56
    NAVEESPACIAL    shift and go to state 57

    operadorM                      shift and go to state 104
    operadorL                      shift and go to state 105
    operadorC                      shift and go to state 106

state 77

    (32) expresion -> expresion_aritmetica .

    PTOCO           reduce using rule 32 (expresion -> expresion_aritmetica .)
    PDER            reduce using rule 32 (expresion -> expresion_aritmetica .)


state 78

    (33) expresion -> expresion_logica .

    PTOCO           reduce using rule 33 (expresion -> expresion_logica .)
    PDER            reduce using rule 33 (expresion -> expresion_logica .)


state 79

    (34) expresion -> expresion_comparativa .

    PTOCO           reduce using rule 34 (expresion -> expresion_comparativa .)
    PDER            reduce using rule 34 (expresion -> expresion_comparativa .)


state 80

    (62) valor -> booleano .
    (37) expresion_logica -> booleano .

  ! reduce/reduce conflict for PTOCO resolved using rule 37 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for PDER resolved using rule 37 (expresion_logica -> booleano .)
    MAS             reduce using rule 62 (valor -> booleano .)
    RESTA           reduce using rule 62 (valor -> booleano .)
    PROD            reduce using rule 62 (valor -> booleano .)
    DIV             reduce using rule 62 (valor -> booleano .)
    MOD             reduce using rule 62 (valor -> booleano .)
    POTENCIA        reduce using rule 62 (valor -> booleano .)
    AND             reduce using rule 62 (valor -> booleano .)
    XOR             reduce using rule 62 (valor -> booleano .)
    OR              reduce using rule 62 (valor -> booleano .)
    NOT             reduce using rule 62 (valor -> booleano .)
    MAYOR           reduce using rule 62 (valor -> booleano .)
    MENOR           reduce using rule 62 (valor -> booleano .)
    COMPARACION     reduce using rule 62 (valor -> booleano .)
    IDENTICO        reduce using rule 62 (valor -> booleano .)
    DIFERENTE       reduce using rule 62 (valor -> booleano .)
    NOIDENTICO      reduce using rule 62 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 62 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 62 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 62 (valor -> booleano .)
    PTOCO           reduce using rule 37 (expresion_logica -> booleano .)
    PDER            reduce using rule 37 (expresion_logica -> booleano .)

  ! PTOCO           [ reduce using rule 62 (valor -> booleano .) ]
  ! PDER            [ reduce using rule 62 (valor -> booleano .) ]


state 81

    (56) terminar -> BREAK PTOCO .

                    reduce using rule 56 (terminar -> BREAK PTOCO .)
    IF              reduce using rule 56 (terminar -> BREAK PTOCO .)
    FOR             reduce using rule 56 (terminar -> BREAK PTOCO .)
    WHILE           reduce using rule 56 (terminar -> BREAK PTOCO .)
    DO              reduce using rule 56 (terminar -> BREAK PTOCO .)
    VARIABLE        reduce using rule 56 (terminar -> BREAK PTOCO .)
    ECHO            reduce using rule 56 (terminar -> BREAK PTOCO .)
    BREAK           reduce using rule 56 (terminar -> BREAK PTOCO .)
    STATIC          reduce using rule 56 (terminar -> BREAK PTOCO .)
    VAR             reduce using rule 56 (terminar -> BREAK PTOCO .)
    GLOBAL          reduce using rule 56 (terminar -> BREAK PTOCO .)
    CONST           reduce using rule 56 (terminar -> BREAK PTOCO .)
    INTEGER         reduce using rule 56 (terminar -> BREAK PTOCO .)
    STRING          reduce using rule 56 (terminar -> BREAK PTOCO .)
    FLOAT           reduce using rule 56 (terminar -> BREAK PTOCO .)
    BOOLEAN         reduce using rule 56 (terminar -> BREAK PTOCO .)
    TRUE            reduce using rule 56 (terminar -> BREAK PTOCO .)
    FALSE           reduce using rule 56 (terminar -> BREAK PTOCO .)
    FIN             reduce using rule 56 (terminar -> BREAK PTOCO .)
    LDER            reduce using rule 56 (terminar -> BREAK PTOCO .)
    ELSE            reduce using rule 56 (terminar -> BREAK PTOCO .)
    ELSEIF          reduce using rule 56 (terminar -> BREAK PTOCO .)


state 82

    (18) asignacion -> ambito multiVariable IGUAL . expresion PTOCO
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    expresion                      shift and go to state 107
    valor                          shift and go to state 76
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 83

    (20) declaracion -> ambito multiVariable PTOCO .

                    reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    IF              reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    FOR             reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    WHILE           reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    DO              reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    VARIABLE        reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    ECHO            reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    BREAK           reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    STATIC          reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    VAR             reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    GLOBAL          reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    CONST           reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    INTEGER         reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    STRING          reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    FLOAT           reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    BOOLEAN         reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    TRUE            reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    FALSE           reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    FIN             reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    LDER            reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    ELSE            reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)
    ELSEIF          reduce using rule 20 (declaracion -> ambito multiVariable PTOCO .)


state 84

    (19) asignacion -> multiVariable IGUAL expresion . PTOCO

    PTOCO           shift and go to state 108


state 85

    (65) valor -> VARIABLE .

    MAS             reduce using rule 65 (valor -> VARIABLE .)
    RESTA           reduce using rule 65 (valor -> VARIABLE .)
    PROD            reduce using rule 65 (valor -> VARIABLE .)
    DIV             reduce using rule 65 (valor -> VARIABLE .)
    MOD             reduce using rule 65 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 65 (valor -> VARIABLE .)
    AND             reduce using rule 65 (valor -> VARIABLE .)
    XOR             reduce using rule 65 (valor -> VARIABLE .)
    OR              reduce using rule 65 (valor -> VARIABLE .)
    NOT             reduce using rule 65 (valor -> VARIABLE .)
    MAYOR           reduce using rule 65 (valor -> VARIABLE .)
    MENOR           reduce using rule 65 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 65 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 65 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 65 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 65 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 65 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 65 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 65 (valor -> VARIABLE .)
    PTOCO           reduce using rule 65 (valor -> VARIABLE .)
    PDER            reduce using rule 65 (valor -> VARIABLE .)


state 86

    (28) comparacion -> valor operadorC expresion . PTOCO

    PTOCO           shift and go to state 109


state 87

    (29) comparacion -> valor operadorM expresion . PTOCO

    PTOCO           shift and go to state 110


state 88

    (30) comparacion -> valor operadorL expresion . PTOCO

    PTOCO           shift and go to state 111


state 89

    (73) condicionalIF -> IF PIZQ condicion . PDER LIZQ codigo LDER
    (74) condicionalIF -> IF PIZQ condicion . PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> IF PIZQ condicion . PDER codigo
    (76) condicionalIF -> IF PIZQ condicion . PDER codigo condicionalELSE

    PDER            shift and go to state 112


state 90

    (39) condicion -> expresion_logica .

    PDER            reduce using rule 39 (condicion -> expresion_logica .)
    PTOCO           reduce using rule 39 (condicion -> expresion_logica .)


state 91

    (40) condicion -> expresion_comparativa .

    PDER            reduce using rule 40 (condicion -> expresion_comparativa .)
    PTOCO           reduce using rule 40 (condicion -> expresion_comparativa .)


state 92

    (36) expresion_logica -> valor . operadorL expresion
    (38) expresion_comparativa -> valor . operadorC expresion
    (57) operadorL -> . AND
    (58) operadorL -> . XOR
    (59) operadorL -> . OR
    (60) operadorL -> . NOT
    (47) operadorC -> . MAYOR
    (48) operadorC -> . MENOR
    (49) operadorC -> . COMPARACION
    (50) operadorC -> . IDENTICO
    (51) operadorC -> . DIFERENTE
    (52) operadorC -> . NOIDENTICO
    (53) operadorC -> . MENOROIGUAL
    (54) operadorC -> . MAYOROIGUAL
    (55) operadorC -> . NAVEESPACIAL

    AND             shift and go to state 64
    XOR             shift and go to state 65
    OR              shift and go to state 66
    NOT             shift and go to state 67
    MAYOR           shift and go to state 49
    MENOR           shift and go to state 50
    COMPARACION     shift and go to state 51
    IDENTICO        shift and go to state 52
    DIFERENTE       shift and go to state 53
    NOIDENTICO      shift and go to state 54
    MENOROIGUAL     shift and go to state 55
    MAYOROIGUAL     shift and go to state 56
    NAVEESPACIAL    shift and go to state 57

    operadorL                      shift and go to state 105
    operadorC                      shift and go to state 106

state 93

    (37) expresion_logica -> booleano .
    (62) valor -> booleano .

    PDER            reduce using rule 37 (expresion_logica -> booleano .)
    PTOCO           reduce using rule 37 (expresion_logica -> booleano .)
    AND             reduce using rule 62 (valor -> booleano .)
    XOR             reduce using rule 62 (valor -> booleano .)
    OR              reduce using rule 62 (valor -> booleano .)
    NOT             reduce using rule 62 (valor -> booleano .)
    MAYOR           reduce using rule 62 (valor -> booleano .)
    MENOR           reduce using rule 62 (valor -> booleano .)
    COMPARACION     reduce using rule 62 (valor -> booleano .)
    IDENTICO        reduce using rule 62 (valor -> booleano .)
    DIFERENTE       reduce using rule 62 (valor -> booleano .)
    NOIDENTICO      reduce using rule 62 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 62 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 62 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 62 (valor -> booleano .)


state 94

    (81) iteracionFOR -> FOR PIZQ asignacion . condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> FOR PIZQ asignacion . condicion PTOCO adicion PDER LIZQ codigo LDER
    (39) condicion -> . expresion_logica
    (40) condicion -> . expresion_comparativa
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    condicion                      shift and go to state 113
    expresion_logica               shift and go to state 90
    expresion_comparativa          shift and go to state 91
    valor                          shift and go to state 92
    booleano                       shift and go to state 93

state 95

    (18) asignacion -> ambito . multiVariable IGUAL expresion PTOCO
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 43

    multiVariable                  shift and go to state 114

state 96

    (19) asignacion -> multiVariable . IGUAL expresion PTOCO

    IGUAL           shift and go to state 44


state 97

    (83) bucleWHILE -> WHILE PIZQ condicion . PDER codigo
    (84) bucleWHILE -> WHILE PIZQ condicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 115


state 98

    (85) bucleDO_WHILE -> DO LIZQ codigo . LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> DO LIZQ codigo . LDER WHILE PIZQ condicion PDER LIZQ codigo LDER

    LDER            shift and go to state 116


state 99

    (87) indexacion -> VARIABLE CIZQ INTEGER . CDER
    (89) indexacion -> VARIABLE CIZQ INTEGER . CDER FUSIONNULL

    CDER            shift and go to state 117


state 100

    (88) indexacion -> VARIABLE CIZQ RESTA . INTEGER CDER
    (90) indexacion -> VARIABLE CIZQ RESTA . INTEGER CDER FUSIONNULL

    INTEGER         shift and go to state 118


state 101

    (23) multiVariable -> VARIABLE COMA multiVariable .

    IGUAL           reduce using rule 23 (multiVariable -> VARIABLE COMA multiVariable .)
    PTOCO           reduce using rule 23 (multiVariable -> VARIABLE COMA multiVariable .)


state 102

    (91) echo -> ECHO VARIABLE PTOCO .

                    reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    IF              reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    FOR             reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    WHILE           reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    DO              reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    VARIABLE        reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    ECHO            reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    BREAK           reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    STATIC          reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    VAR             reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    GLOBAL          reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    CONST           reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    INTEGER         reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    STRING          reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    FLOAT           reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    BOOLEAN         reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    TRUE            reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    FALSE           reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    FIN             reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    LDER            reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    ELSE            reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)
    ELSEIF          reduce using rule 91 (echo -> ECHO VARIABLE PTOCO .)


state 103

    (92) echo -> ECHO expresion PTOCO .

                    reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    IF              reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    FOR             reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    WHILE           reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    DO              reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    VARIABLE        reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    ECHO            reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    BREAK           reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    STATIC          reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    VAR             reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    GLOBAL          reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    CONST           reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    INTEGER         reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    STRING          reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    FLOAT           reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    BOOLEAN         reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    TRUE            reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    FALSE           reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    FIN             reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    LDER            reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    ELSE            reduce using rule 92 (echo -> ECHO expresion PTOCO .)
    ELSEIF          reduce using rule 92 (echo -> ECHO expresion PTOCO .)


state 104

    (35) expresion_aritmetica -> valor operadorM . expresion
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    valor                          shift and go to state 76
    expresion                      shift and go to state 119
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 105

    (36) expresion_logica -> valor operadorL . expresion
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    valor                          shift and go to state 76
    expresion                      shift and go to state 120
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 106

    (38) expresion_comparativa -> valor operadorC . expresion
    (31) expresion -> . valor
    (32) expresion -> . expresion_aritmetica
    (33) expresion -> . expresion_logica
    (34) expresion -> . expresion_comparativa
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (35) expresion_aritmetica -> . valor operadorM expresion
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    valor                          shift and go to state 76
    expresion                      shift and go to state 121
    expresion_aritmetica           shift and go to state 77
    expresion_logica               shift and go to state 78
    expresion_comparativa          shift and go to state 79
    booleano                       shift and go to state 80

state 107

    (18) asignacion -> ambito multiVariable IGUAL expresion . PTOCO

    PTOCO           shift and go to state 122


state 108

    (19) asignacion -> multiVariable IGUAL expresion PTOCO .

                    reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    IF              reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FOR             reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    WHILE           reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    DO              reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ECHO            reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    BREAK           reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    STATIC          reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VAR             reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    CONST           reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    STRING          reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    TRUE            reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FALSE           reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FIN             reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    LDER            reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ELSE            reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 19 (asignacion -> multiVariable IGUAL expresion PTOCO .)


state 109

    (28) comparacion -> valor operadorC expresion PTOCO .

                    reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    IF              reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    FOR             reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    WHILE           reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    DO              reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    VARIABLE        reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    ECHO            reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    BREAK           reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    STATIC          reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    VAR             reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    GLOBAL          reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    CONST           reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    INTEGER         reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    STRING          reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    FLOAT           reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    BOOLEAN         reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    TRUE            reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    FALSE           reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    FIN             reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    LDER            reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    ELSE            reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)
    ELSEIF          reduce using rule 28 (comparacion -> valor operadorC expresion PTOCO .)


state 110

    (29) comparacion -> valor operadorM expresion PTOCO .

                    reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    IF              reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    FOR             reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    WHILE           reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    DO              reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    VARIABLE        reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    ECHO            reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    BREAK           reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    STATIC          reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    VAR             reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    GLOBAL          reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    CONST           reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    INTEGER         reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    STRING          reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    FLOAT           reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    BOOLEAN         reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    TRUE            reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    FALSE           reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    FIN             reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    LDER            reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    ELSE            reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)
    ELSEIF          reduce using rule 29 (comparacion -> valor operadorM expresion PTOCO .)


state 111

    (30) comparacion -> valor operadorL expresion PTOCO .

                    reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    IF              reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    FOR             reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    WHILE           reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    DO              reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    VARIABLE        reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    ECHO            reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    BREAK           reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    STATIC          reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    VAR             reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    GLOBAL          reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    CONST           reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    INTEGER         reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    STRING          reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    FLOAT           reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    BOOLEAN         reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    TRUE            reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    FALSE           reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    FIN             reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    LDER            reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    ELSE            reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)
    ELSEIF          reduce using rule 30 (comparacion -> valor operadorL expresion PTOCO .)


state 112

    (73) condicionalIF -> IF PIZQ condicion PDER . LIZQ codigo LDER
    (74) condicionalIF -> IF PIZQ condicion PDER . LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> IF PIZQ condicion PDER . codigo
    (76) condicionalIF -> IF PIZQ condicion PDER . codigo condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    LIZQ            shift and go to state 123
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 124
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 113

    (81) iteracionFOR -> FOR PIZQ asignacion condicion . PTOCO adicion PDER codigo
    (82) iteracionFOR -> FOR PIZQ asignacion condicion . PTOCO adicion PDER LIZQ codigo LDER

    PTOCO           shift and go to state 125


state 114

    (18) asignacion -> ambito multiVariable . IGUAL expresion PTOCO

    IGUAL           shift and go to state 82


state 115

    (83) bucleWHILE -> WHILE PIZQ condicion PDER . codigo
    (84) bucleWHILE -> WHILE PIZQ condicion PDER . LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    LIZQ            shift and go to state 127
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 126
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 116

    (85) bucleDO_WHILE -> DO LIZQ codigo LDER . WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> DO LIZQ codigo LDER . WHILE PIZQ condicion PDER LIZQ codigo LDER

    WHILE           shift and go to state 128


state 117

    (87) indexacion -> VARIABLE CIZQ INTEGER CDER .
    (89) indexacion -> VARIABLE CIZQ INTEGER CDER . FUSIONNULL

                    reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    IF              reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FOR             reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    WHILE           reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    DO              reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VARIABLE        reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ECHO            reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    BREAK           reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    STATIC          reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VAR             reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    GLOBAL          reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    CONST           reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    INTEGER         reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    STRING          reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FLOAT           reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    BOOLEAN         reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    TRUE            reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FALSE           reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FIN             reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    LDER            reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ELSE            reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ELSEIF          reduce using rule 87 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FUSIONNULL      shift and go to state 129


state 118

    (88) indexacion -> VARIABLE CIZQ RESTA INTEGER . CDER
    (90) indexacion -> VARIABLE CIZQ RESTA INTEGER . CDER FUSIONNULL

    CDER            shift and go to state 130


state 119

    (35) expresion_aritmetica -> valor operadorM expresion .

    PTOCO           reduce using rule 35 (expresion_aritmetica -> valor operadorM expresion .)
    PDER            reduce using rule 35 (expresion_aritmetica -> valor operadorM expresion .)


state 120

    (36) expresion_logica -> valor operadorL expresion .

    PTOCO           reduce using rule 36 (expresion_logica -> valor operadorL expresion .)
    PDER            reduce using rule 36 (expresion_logica -> valor operadorL expresion .)


state 121

    (38) expresion_comparativa -> valor operadorC expresion .

    PTOCO           reduce using rule 38 (expresion_comparativa -> valor operadorC expresion .)
    PDER            reduce using rule 38 (expresion_comparativa -> valor operadorC expresion .)


state 122

    (18) asignacion -> ambito multiVariable IGUAL expresion PTOCO .

                    reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    IF              reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FOR             reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    WHILE           reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    DO              reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ECHO            reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    BREAK           reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    STATIC          reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VAR             reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    CONST           reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    STRING          reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    TRUE            reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FALSE           reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FIN             reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    LDER            reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ELSE            reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 18 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)


state 123

    (73) condicionalIF -> IF PIZQ condicion PDER LIZQ . codigo LDER
    (74) condicionalIF -> IF PIZQ condicion PDER LIZQ . codigo LDER condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 131
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 124

    (75) condicionalIF -> IF PIZQ condicion PDER codigo .
    (76) condicionalIF -> IF PIZQ condicion PDER codigo . condicionalELSE
    (77) condicionalELSE -> . ELSE LIZQ codigo LDER
    (78) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (79) condicionalELSE -> . ELSE codigo
    (80) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
                    reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    IF              reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FOR             reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    DO              reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VAR             reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    CONST           reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    STRING          reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FIN             reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    LDER            reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ELSE            shift and go to state 133
    ELSEIF          shift and go to state 134

  ! ELSE            [ reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .) ]
  ! ELSEIF          [ reduce using rule 75 (condicionalIF -> IF PIZQ condicion PDER codigo .) ]

    condicionalELSE                shift and go to state 132

state 125

    (81) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO . adicion PDER codigo
    (82) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO . adicion PDER LIZQ codigo LDER
    (69) adicion -> . MAS MAS VARIABLE
    (70) adicion -> . MENOS MENOS VARIABLE
    (71) adicion -> . VARIABLE MAS MAS
    (72) adicion -> . VARIABLE MENOS MENOS

    MAS             shift and go to state 136
    MENOS           shift and go to state 138
    VARIABLE        shift and go to state 137

    adicion                        shift and go to state 135

state 126

    (83) bucleWHILE -> WHILE PIZQ condicion PDER codigo .

                    reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    IF              reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FOR             reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    DO              reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VAR             reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    CONST           reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    STRING          reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FIN             reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    LDER            reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ELSE            reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ELSEIF          reduce using rule 83 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)


state 127

    (84) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 139
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 128

    (85) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE . PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE . PIZQ condicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 140


state 129

    (89) indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .

                    reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    IF              reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FOR             reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    WHILE           reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    DO              reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VARIABLE        reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ECHO            reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    BREAK           reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    STATIC          reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VAR             reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    GLOBAL          reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    CONST           reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    INTEGER         reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    STRING          reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FLOAT           reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    BOOLEAN         reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    TRUE            reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FALSE           reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FIN             reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    LDER            reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ELSE            reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ELSEIF          reduce using rule 89 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)


state 130

    (88) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .
    (90) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER . FUSIONNULL

                    reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    IF              reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FOR             reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    WHILE           reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    DO              reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VARIABLE        reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ECHO            reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    BREAK           reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    STATIC          reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VAR             reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    GLOBAL          reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    CONST           reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    INTEGER         reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    STRING          reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FLOAT           reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    BOOLEAN         reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    TRUE            reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FALSE           reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FIN             reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    LDER            reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ELSE            reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ELSEIF          reduce using rule 88 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FUSIONNULL      shift and go to state 141


state 131

    (73) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo . LDER
    (74) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo . LDER condicionalELSE

    LDER            shift and go to state 142


state 132

    (76) condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .

                    reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    IF              reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FOR             reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    WHILE           reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    DO              reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLE        reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ECHO            reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    BREAK           reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    STATIC          reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VAR             reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    GLOBAL          reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    CONST           reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    INTEGER         reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    STRING          reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FLOAT           reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    BOOLEAN         reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    TRUE            reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FALSE           reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FIN             reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    LDER            reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ELSE            reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ELSEIF          reduce using rule 76 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)


state 133

    (77) condicionalELSE -> ELSE . LIZQ codigo LDER
    (79) condicionalELSE -> ELSE . codigo
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    LIZQ            shift and go to state 143
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 144
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 134

    (78) condicionalELSE -> ELSEIF . PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (80) condicionalELSE -> ELSEIF . PIZQ condicion PDER codigo condicionalELSE

    PIZQ            shift and go to state 145


state 135

    (81) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion . PDER codigo
    (82) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 146


state 136

    (69) adicion -> MAS . MAS VARIABLE

    MAS             shift and go to state 147


state 137

    (71) adicion -> VARIABLE . MAS MAS
    (72) adicion -> VARIABLE . MENOS MENOS

    MAS             shift and go to state 148
    MENOS           shift and go to state 149


state 138

    (70) adicion -> MENOS . MENOS VARIABLE

    MENOS           shift and go to state 150


state 139

    (84) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 151


state 140

    (85) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ . condicion PDER codigo
    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ . condicion PDER LIZQ codigo LDER
    (39) condicion -> . expresion_logica
    (40) condicion -> . expresion_comparativa
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    condicion                      shift and go to state 152
    expresion_logica               shift and go to state 90
    expresion_comparativa          shift and go to state 91
    valor                          shift and go to state 92
    booleano                       shift and go to state 93

state 141

    (90) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .

                    reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    IF              reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FOR             reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    WHILE           reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    DO              reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VARIABLE        reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ECHO            reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    BREAK           reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    STATIC          reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VAR             reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    GLOBAL          reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    CONST           reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    INTEGER         reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    STRING          reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FLOAT           reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    BOOLEAN         reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    TRUE            reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FALSE           reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FIN             reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    LDER            reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ELSE            reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ELSEIF          reduce using rule 90 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)


state 142

    (73) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .
    (74) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER . condicionalELSE
    (77) condicionalELSE -> . ELSE LIZQ codigo LDER
    (78) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (79) condicionalELSE -> . ELSE codigo
    (80) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
                    reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            shift and go to state 133
    ELSEIF          shift and go to state 134

  ! ELSE            [ reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .) ]
  ! ELSEIF          [ reduce using rule 73 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .) ]

    condicionalELSE                shift and go to state 153

state 143

    (77) condicionalELSE -> ELSE LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 154
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 144

    (79) condicionalELSE -> ELSE codigo .

    FIN             reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    LDER            reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    ELSE            reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    ELSEIF          reduce using rule 79 (condicionalELSE -> ELSE codigo .)
                    reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    IF              reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    FOR             reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    WHILE           reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    DO              reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    VARIABLE        reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    ECHO            reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    BREAK           reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    STATIC          reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    VAR             reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    GLOBAL          reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    CONST           reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    INTEGER         reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    STRING          reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    FLOAT           reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    BOOLEAN         reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    TRUE            reduce using rule 79 (condicionalELSE -> ELSE codigo .)
    FALSE           reduce using rule 79 (condicionalELSE -> ELSE codigo .)


state 145

    (78) condicionalELSE -> ELSEIF PIZQ . condicion PDER LIZQ codigo LDER condicionalELSE
    (80) condicionalELSE -> ELSEIF PIZQ . condicion PDER codigo condicionalELSE
    (39) condicion -> . expresion_logica
    (40) condicion -> . expresion_comparativa
    (36) expresion_logica -> . valor operadorL expresion
    (37) expresion_logica -> . booleano
    (38) expresion_comparativa -> . valor operadorC expresion
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    VARIABLE        shift and go to state 85
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    condicion                      shift and go to state 155
    expresion_logica               shift and go to state 90
    expresion_comparativa          shift and go to state 91
    valor                          shift and go to state 92
    booleano                       shift and go to state 93

state 146

    (81) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER . codigo
    (82) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER . LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    LIZQ            shift and go to state 157
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    asignacion                     shift and go to state 9
    codigo                         shift and go to state 156
    algoritmo                      shift and go to state 6
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 147

    (69) adicion -> MAS MAS . VARIABLE

    VARIABLE        shift and go to state 158


state 148

    (71) adicion -> VARIABLE MAS . MAS

    MAS             shift and go to state 159


state 149

    (72) adicion -> VARIABLE MENOS . MENOS

    MENOS           shift and go to state 160


state 150

    (70) adicion -> MENOS MENOS . VARIABLE

    VARIABLE        shift and go to state 161


state 151

    (84) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .

                    reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 84 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)


state 152

    (85) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion . PDER codigo
    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 162


state 153

    (74) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .

                    reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    IF              reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FOR             reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    WHILE           reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    DO              reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLE        reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ECHO            reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BREAK           reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STATIC          reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VAR             reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GLOBAL          reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CONST           reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    INTEGER         reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STRING          reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FLOAT           reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BOOLEAN         reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    TRUE            reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FALSE           reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FIN             reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LDER            reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSE            reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSEIF          reduce using rule 74 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)


state 154

    (77) condicionalELSE -> ELSE LIZQ codigo . LDER

    LDER            shift and go to state 163


state 155

    (78) condicionalELSE -> ELSEIF PIZQ condicion . PDER LIZQ codigo LDER condicionalELSE
    (80) condicionalELSE -> ELSEIF PIZQ condicion . PDER codigo condicionalELSE

    PDER            shift and go to state 164


state 156

    (81) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .

                    reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    IF              reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FOR             reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    WHILE           reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    DO              reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VARIABLE        reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ECHO            reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    BREAK           reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    STATIC          reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VAR             reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    GLOBAL          reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    CONST           reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    INTEGER         reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    STRING          reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FLOAT           reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    BOOLEAN         reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    TRUE            reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FALSE           reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FIN             reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    LDER            reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ELSE            reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ELSEIF          reduce using rule 81 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)


state 157

    (82) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    asignacion                     shift and go to state 9
    codigo                         shift and go to state 165
    algoritmo                      shift and go to state 6
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 158

    (69) adicion -> MAS MAS VARIABLE .

    PDER            reduce using rule 69 (adicion -> MAS MAS VARIABLE .)


state 159

    (71) adicion -> VARIABLE MAS MAS .

    PDER            reduce using rule 71 (adicion -> VARIABLE MAS MAS .)


state 160

    (72) adicion -> VARIABLE MENOS MENOS .

    PDER            reduce using rule 72 (adicion -> VARIABLE MENOS MENOS .)


state 161

    (70) adicion -> MENOS MENOS VARIABLE .

    PDER            reduce using rule 70 (adicion -> MENOS MENOS VARIABLE .)


state 162

    (85) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER . codigo
    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER . LIZQ codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    LIZQ            shift and go to state 166
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 167
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 163

    (77) condicionalELSE -> ELSE LIZQ codigo LDER .

    FIN             reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    LDER            reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ELSE            reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ELSEIF          reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
                    reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    IF              reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FOR             reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    WHILE           reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    DO              reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VARIABLE        reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ECHO            reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    BREAK           reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    STATIC          reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VAR             reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    GLOBAL          reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    CONST           reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    INTEGER         reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    STRING          reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FLOAT           reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    TRUE            reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FALSE           reduce using rule 77 (condicionalELSE -> ELSE LIZQ codigo LDER .)


state 164

    (78) condicionalELSE -> ELSEIF PIZQ condicion PDER . LIZQ codigo LDER condicionalELSE
    (80) condicionalELSE -> ELSEIF PIZQ condicion PDER . codigo condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

    LIZQ            shift and go to state 168
                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 169
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 165

    (82) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 170


state 166

    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ . codigo LDER
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 171
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 167

    (85) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .

                    reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    IF              reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FOR             reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    DO              reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VAR             reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    CONST           reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    STRING          reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FIN             reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    LDER            reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ELSE            reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ELSEIF          reduce using rule 85 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)


state 168

    (78) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ . codigo LDER condicionalELSE
    (3) codigo -> . algoritmo
    (4) codigo -> . algoritmo codigo
    (5) codigo -> . 
    (8) algoritmo -> . asignacion
    (9) algoritmo -> . declaracion
    (10) algoritmo -> . comparacion
    (11) algoritmo -> . condicionalIF
    (12) algoritmo -> . iteracionFOR
    (13) algoritmo -> . bucleWHILE
    (14) algoritmo -> . bucleDO_WHILE
    (15) algoritmo -> . indexacion
    (16) algoritmo -> . echo
    (17) algoritmo -> . terminar
    (18) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (19) asignacion -> . multiVariable IGUAL expresion PTOCO
    (20) declaracion -> . ambito multiVariable PTOCO
    (21) declaracion -> . multiVariable PTOCO
    (28) comparacion -> . valor operadorC expresion PTOCO
    (29) comparacion -> . valor operadorM expresion PTOCO
    (30) comparacion -> . valor operadorL expresion PTOCO
    (73) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (74) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalIF -> . IF PIZQ condicion PDER codigo
    (76) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (81) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (82) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (83) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (84) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (85) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (86) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (87) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (88) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (89) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (90) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (91) echo -> . ECHO VARIABLE PTOCO
    (92) echo -> . ECHO expresion PTOCO
    (56) terminar -> . BREAK PTOCO
    (24) ambito -> . STATIC
    (25) ambito -> . VAR
    (26) ambito -> . GLOBAL
    (27) ambito -> . CONST
    (22) multiVariable -> . VARIABLE
    (23) multiVariable -> . VARIABLE COMA multiVariable
    (61) valor -> . INTEGER
    (62) valor -> . booleano
    (63) valor -> . STRING
    (64) valor -> . FLOAT
    (65) valor -> . VARIABLE
    (66) valor -> . BOOLEAN
    (67) booleano -> . TRUE
    (68) booleano -> . FALSE

                    shift and go to state 7
    IF              shift and go to state 22
    FOR             shift and go to state 23
    WHILE           shift and go to state 24
    DO              shift and go to state 25
    VARIABLE        shift and go to state 26
    ECHO            shift and go to state 28
    BREAK           shift and go to state 29
    STATIC          shift and go to state 30
    VAR             shift and go to state 31
    GLOBAL          shift and go to state 32
    CONST           shift and go to state 33
    INTEGER         shift and go to state 27
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    BOOLEAN         shift and go to state 37
    TRUE            shift and go to state 38
    FALSE           shift and go to state 39

    codigo                         shift and go to state 172
    algoritmo                      shift and go to state 6
    asignacion                     shift and go to state 9
    declaracion                    shift and go to state 10
    comparacion                    shift and go to state 11
    condicionalIF                  shift and go to state 12
    iteracionFOR                   shift and go to state 13
    bucleWHILE                     shift and go to state 14
    bucleDO_WHILE                  shift and go to state 15
    indexacion                     shift and go to state 16
    echo                           shift and go to state 17
    terminar                       shift and go to state 18
    ambito                         shift and go to state 19
    multiVariable                  shift and go to state 20
    valor                          shift and go to state 21
    booleano                       shift and go to state 34

state 169

    (80) condicionalELSE -> ELSEIF PIZQ condicion PDER codigo . condicionalELSE
    (77) condicionalELSE -> . ELSE LIZQ codigo LDER
    (78) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (79) condicionalELSE -> . ELSE codigo
    (80) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

    ELSE            shift and go to state 133
    ELSEIF          shift and go to state 134

    condicionalELSE                shift and go to state 173

state 170

    (82) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .

                    reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 82 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)


state 171

    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 174


state 172

    (78) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo . LDER condicionalELSE

    LDER            shift and go to state 175


state 173

    (80) condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .

    FIN             reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    LDER            reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ELSE            reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ELSEIF          reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
                    reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    IF              reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FOR             reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    WHILE           reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    DO              reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLE        reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ECHO            reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    BREAK           reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    STATIC          reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VAR             reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    GLOBAL          reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    CONST           reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    INTEGER         reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    STRING          reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FLOAT           reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    BOOLEAN         reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    TRUE            reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FALSE           reduce using rule 80 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)


state 174

    (86) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .

                    reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    IF              reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 86 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)


state 175

    (78) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER . condicionalELSE
    (77) condicionalELSE -> . ELSE LIZQ codigo LDER
    (78) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (79) condicionalELSE -> . ELSE codigo
    (80) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

    ELSE            shift and go to state 133
    ELSEIF          shift and go to state 134

    condicionalELSE                shift and go to state 176

state 176

    (78) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .

    FIN             reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LDER            reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSE            reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSEIF          reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
                    reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    IF              reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FOR             reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    WHILE           reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    DO              reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLE        reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ECHO            reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BREAK           reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STATIC          reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VAR             reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GLOBAL          reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CONST           reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    INTEGER         reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STRING          reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FLOAT           reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BOOLEAN         reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    TRUE            reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FALSE           reduce using rule 78 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for  in state 6 resolved as shift
WARNING: shift/reduce conflict for IF in state 6 resolved as shift
WARNING: shift/reduce conflict for FOR in state 6 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 6 resolved as shift
WARNING: shift/reduce conflict for DO in state 6 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 6 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 6 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 6 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 6 resolved as shift
WARNING: shift/reduce conflict for VAR in state 6 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 6 resolved as shift
WARNING: shift/reduce conflict for CONST in state 6 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 6 resolved as shift
WARNING: shift/reduce conflict for STRING in state 6 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 6 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 6 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 6 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 6 resolved as shift
WARNING: shift/reduce conflict for PTOCO in state 74 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 124 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 124 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 142 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 142 resolved as shift
WARNING: reduce/reduce conflict in state 80 resolved using rule (expresion_logica -> booleano)
WARNING: rejected rule (valor -> booleano) in state 80
