Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> phpSyntax
Rule 1     phpSyntax -> inicio codigo fin
Rule 2     codigo -> algoritmo
Rule 3     codigo -> algoritmo codigo
Rule 4     inicio -> INICIO
Rule 5     fin -> FIN
Rule 6     algoritmo -> asignacion
Rule 7     algoritmo -> declaracion
Rule 8     algoritmo -> comparacion
Rule 9     algoritmo -> condicionalIF
Rule 10    algoritmo -> iteracionFOR
Rule 11    algoritmo -> bucleWHILE
Rule 12    algoritmo -> bucleDO_WHILE
Rule 13    algoritmo -> indexacion
Rule 14    algoritmo -> echo
Rule 15    algoritmo -> terminar
Rule 16    asignacion -> ambito multiVariable IGUAL expresion PTOCO
Rule 17    asignacion -> multiVariable IGUAL expresion PTOCO
Rule 18    declaracion -> ambito multiVariable PTOCO
Rule 19    declaracion -> multiVariable PTOCO
Rule 20    multiVariable -> VARIABLE
Rule 21    multiVariable -> VARIABLE COMA multiVariable
Rule 22    ambito -> STATIC
Rule 23    ambito -> VAR
Rule 24    ambito -> GLOBAL
Rule 25    ambito -> CONST
Rule 26    comparacion -> valor operadorC expresion PTOCO
Rule 27    comparacion -> valor operadorM expresion PTOCO
Rule 28    comparacion -> valor operadorL expresion PTOCO
Rule 29    expresion -> valor
Rule 30    expresion -> expresion_aritmetica
Rule 31    expresion -> expresion_logica
Rule 32    expresion -> expresion_comparativa
Rule 33    expresion_aritmetica -> valor operadorM expresion
Rule 34    expresion_logica -> valor operadorL expresion
Rule 35    expresion_logica -> booleano
Rule 36    expresion_comparativa -> valor operadorC expresion
Rule 37    condicion -> expresion_logica
Rule 38    condicion -> expresion_comparativa
Rule 39    operadorM -> MAS
Rule 40    operadorM -> RESTA
Rule 41    operadorM -> PROD
Rule 42    operadorM -> DIV
Rule 43    operadorM -> MOD
Rule 44    operadorM -> POTENCIA
Rule 45    operadorC -> MAYOR
Rule 46    operadorC -> MENOR
Rule 47    operadorC -> COMPARACION
Rule 48    operadorC -> IDENTICO
Rule 49    operadorC -> DIFERENTE
Rule 50    operadorC -> NOIDENTICO
Rule 51    operadorC -> MENOROIGUAL
Rule 52    operadorC -> MAYOROIGUAL
Rule 53    operadorC -> NAVEESPACIAL
Rule 54    terminar -> BREAK PTOCO
Rule 55    operadorL -> AND
Rule 56    operadorL -> XOR
Rule 57    operadorL -> OR
Rule 58    operadorL -> NOT
Rule 59    valor -> INTEGER
Rule 60    valor -> booleano
Rule 61    valor -> STRING
Rule 62    valor -> FLOAT
Rule 63    valor -> VARIABLE
Rule 64    valor -> BOOLEAN
Rule 65    booleano -> TRUE
Rule 66    booleano -> FALSE
Rule 67    adicion -> MAS MAS VARIABLE
Rule 68    condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER
Rule 69    condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
Rule 70    condicionalIF -> IF PIZQ condicion PDER codigo
Rule 71    condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE
Rule 72    condicionalELSE -> ELSE LIZQ codigo LDER
Rule 73    condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
Rule 74    condicionalELSE -> ELSE codigo
Rule 75    condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE
Rule 76    iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
Rule 77    iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
Rule 78    bucleWHILE -> WHILE PIZQ condicion PDER codigo
Rule 79    bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER
Rule 80    bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
Rule 81    bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
Rule 82    indexacion -> VARIABLE CIZQ INTEGER CDER
Rule 83    indexacion -> VARIABLE CIZQ RESTA INTEGER CDER
Rule 84    indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL
Rule 85    indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
Rule 86    echo -> ECHO VARIABLE PTOCO
Rule 87    echo -> ECHO expresion PTOCO

Terminals, with rules where they appear

AND                  : 55
BOOLEAN              : 64
BREAK                : 54
CDER                 : 82 83 84 85
CIZQ                 : 82 83 84 85
COMA                 : 21
COMPARACION          : 47
CONST                : 25
DIFERENTE            : 49
DIV                  : 42
DO                   : 80 81
ECHO                 : 86 87
ELSE                 : 72 74
ELSEIF               : 73 75
FALSE                : 66
FIN                  : 5
FLOAT                : 62
FOR                  : 76 77
FUSIONNULL           : 84 85
GLOBAL               : 24
IDENTICO             : 48
IF                   : 68 69 70 71
IGUAL                : 16 17
INICIO               : 4
INTEGER              : 59 82 83 84 85
LDER                 : 68 69 72 73 77 79 80 81 81
LIZQ                 : 68 69 72 73 77 79 80 81 81
MAS                  : 39 67 67
MAYOR                : 45
MAYOROIGUAL          : 52
MENOR                : 46
MENOROIGUAL          : 51
MOD                  : 43
NAVEESPACIAL         : 53
NOIDENTICO           : 50
NOT                  : 58
OR                   : 57
PDER                 : 68 69 70 71 73 75 76 77 78 79 80 81
PIZQ                 : 68 69 70 71 73 75 76 77 78 79 80 81
POTENCIA             : 44
PROD                 : 41
PTOCO                : 16 17 18 19 26 27 28 54 76 77 86 87
RESTA                : 40 83 85
STATIC               : 22
STRING               : 61
TRUE                 : 65
VAR                  : 23
VARIABLE             : 20 21 63 67 82 83 84 85 86
WHILE                : 78 79 80 81
XOR                  : 56
error                : 

Nonterminals, with rules where they appear

adicion              : 76 77
algoritmo            : 2 3
ambito               : 16 18
asignacion           : 6 76 77
booleano             : 35 60
bucleDO_WHILE        : 12
bucleWHILE           : 11
codigo               : 1 3 68 69 70 71 72 73 74 75 76 77 78 79 80 80 81 81
comparacion          : 8
condicion            : 68 69 70 71 73 75 76 77 78 79 80 81
condicionalELSE      : 69 71 73 75
condicionalIF        : 9
declaracion          : 7
echo                 : 14
expresion            : 16 17 26 27 28 33 34 36 87
expresion_aritmetica : 30
expresion_comparativa : 32 38
expresion_logica     : 31 37
fin                  : 1
indexacion           : 13
inicio               : 1
iteracionFOR         : 10
multiVariable        : 16 17 18 19 21
operadorC            : 26 36
operadorL            : 28 34
operadorM            : 27 33
phpSyntax            : 0
terminar             : 15
valor                : 26 27 28 29 33 34 36

Parsing method: LALR

state 0

    (0) S' -> . phpSyntax
    (1) phpSyntax -> . inicio codigo fin
    (4) inicio -> . INICIO

    INICIO          shift and go to state 3

    phpSyntax                      shift and go to state 1
    inicio                         shift and go to state 2

state 1

    (0) S' -> phpSyntax .



state 2

    (1) phpSyntax -> inicio . codigo fin
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 4
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 3

    (4) inicio -> INICIO .

    IF              reduce using rule 4 (inicio -> INICIO .)
    FOR             reduce using rule 4 (inicio -> INICIO .)
    WHILE           reduce using rule 4 (inicio -> INICIO .)
    DO              reduce using rule 4 (inicio -> INICIO .)
    VARIABLE        reduce using rule 4 (inicio -> INICIO .)
    ECHO            reduce using rule 4 (inicio -> INICIO .)
    BREAK           reduce using rule 4 (inicio -> INICIO .)
    STATIC          reduce using rule 4 (inicio -> INICIO .)
    VAR             reduce using rule 4 (inicio -> INICIO .)
    GLOBAL          reduce using rule 4 (inicio -> INICIO .)
    CONST           reduce using rule 4 (inicio -> INICIO .)
    INTEGER         reduce using rule 4 (inicio -> INICIO .)
    STRING          reduce using rule 4 (inicio -> INICIO .)
    FLOAT           reduce using rule 4 (inicio -> INICIO .)
    BOOLEAN         reduce using rule 4 (inicio -> INICIO .)
    TRUE            reduce using rule 4 (inicio -> INICIO .)
    FALSE           reduce using rule 4 (inicio -> INICIO .)


state 4

    (1) phpSyntax -> inicio codigo . fin
    (5) fin -> . FIN

    FIN             shift and go to state 38

    fin                            shift and go to state 37

state 5

    (2) codigo -> algoritmo .
    (3) codigo -> algoritmo . codigo
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for VARIABLE resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! shift/reduce conflict for BREAK resolved as shift
  ! shift/reduce conflict for STATIC resolved as shift
  ! shift/reduce conflict for VAR resolved as shift
  ! shift/reduce conflict for GLOBAL resolved as shift
  ! shift/reduce conflict for CONST resolved as shift
  ! shift/reduce conflict for INTEGER resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for BOOLEAN resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    FIN             reduce using rule 2 (codigo -> algoritmo .)
    LDER            reduce using rule 2 (codigo -> algoritmo .)
    ELSE            reduce using rule 2 (codigo -> algoritmo .)
    ELSEIF          reduce using rule 2 (codigo -> algoritmo .)
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

  ! IF              [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! FOR             [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! WHILE           [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! DO              [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! VARIABLE        [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! ECHO            [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! BREAK           [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! STATIC          [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! VAR             [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! GLOBAL          [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! CONST           [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! INTEGER         [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! STRING          [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! FLOAT           [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! BOOLEAN         [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! TRUE            [ reduce using rule 2 (codigo -> algoritmo .) ]
  ! FALSE           [ reduce using rule 2 (codigo -> algoritmo .) ]

    algoritmo                      shift and go to state 5
    codigo                         shift and go to state 39
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 6

    (6) algoritmo -> asignacion .

    IF              reduce using rule 6 (algoritmo -> asignacion .)
    FOR             reduce using rule 6 (algoritmo -> asignacion .)
    WHILE           reduce using rule 6 (algoritmo -> asignacion .)
    DO              reduce using rule 6 (algoritmo -> asignacion .)
    VARIABLE        reduce using rule 6 (algoritmo -> asignacion .)
    ECHO            reduce using rule 6 (algoritmo -> asignacion .)
    BREAK           reduce using rule 6 (algoritmo -> asignacion .)
    STATIC          reduce using rule 6 (algoritmo -> asignacion .)
    VAR             reduce using rule 6 (algoritmo -> asignacion .)
    GLOBAL          reduce using rule 6 (algoritmo -> asignacion .)
    CONST           reduce using rule 6 (algoritmo -> asignacion .)
    INTEGER         reduce using rule 6 (algoritmo -> asignacion .)
    STRING          reduce using rule 6 (algoritmo -> asignacion .)
    FLOAT           reduce using rule 6 (algoritmo -> asignacion .)
    BOOLEAN         reduce using rule 6 (algoritmo -> asignacion .)
    TRUE            reduce using rule 6 (algoritmo -> asignacion .)
    FALSE           reduce using rule 6 (algoritmo -> asignacion .)
    FIN             reduce using rule 6 (algoritmo -> asignacion .)
    LDER            reduce using rule 6 (algoritmo -> asignacion .)
    ELSE            reduce using rule 6 (algoritmo -> asignacion .)
    ELSEIF          reduce using rule 6 (algoritmo -> asignacion .)


state 7

    (7) algoritmo -> declaracion .

    IF              reduce using rule 7 (algoritmo -> declaracion .)
    FOR             reduce using rule 7 (algoritmo -> declaracion .)
    WHILE           reduce using rule 7 (algoritmo -> declaracion .)
    DO              reduce using rule 7 (algoritmo -> declaracion .)
    VARIABLE        reduce using rule 7 (algoritmo -> declaracion .)
    ECHO            reduce using rule 7 (algoritmo -> declaracion .)
    BREAK           reduce using rule 7 (algoritmo -> declaracion .)
    STATIC          reduce using rule 7 (algoritmo -> declaracion .)
    VAR             reduce using rule 7 (algoritmo -> declaracion .)
    GLOBAL          reduce using rule 7 (algoritmo -> declaracion .)
    CONST           reduce using rule 7 (algoritmo -> declaracion .)
    INTEGER         reduce using rule 7 (algoritmo -> declaracion .)
    STRING          reduce using rule 7 (algoritmo -> declaracion .)
    FLOAT           reduce using rule 7 (algoritmo -> declaracion .)
    BOOLEAN         reduce using rule 7 (algoritmo -> declaracion .)
    TRUE            reduce using rule 7 (algoritmo -> declaracion .)
    FALSE           reduce using rule 7 (algoritmo -> declaracion .)
    FIN             reduce using rule 7 (algoritmo -> declaracion .)
    LDER            reduce using rule 7 (algoritmo -> declaracion .)
    ELSE            reduce using rule 7 (algoritmo -> declaracion .)
    ELSEIF          reduce using rule 7 (algoritmo -> declaracion .)


state 8

    (8) algoritmo -> comparacion .

    IF              reduce using rule 8 (algoritmo -> comparacion .)
    FOR             reduce using rule 8 (algoritmo -> comparacion .)
    WHILE           reduce using rule 8 (algoritmo -> comparacion .)
    DO              reduce using rule 8 (algoritmo -> comparacion .)
    VARIABLE        reduce using rule 8 (algoritmo -> comparacion .)
    ECHO            reduce using rule 8 (algoritmo -> comparacion .)
    BREAK           reduce using rule 8 (algoritmo -> comparacion .)
    STATIC          reduce using rule 8 (algoritmo -> comparacion .)
    VAR             reduce using rule 8 (algoritmo -> comparacion .)
    GLOBAL          reduce using rule 8 (algoritmo -> comparacion .)
    CONST           reduce using rule 8 (algoritmo -> comparacion .)
    INTEGER         reduce using rule 8 (algoritmo -> comparacion .)
    STRING          reduce using rule 8 (algoritmo -> comparacion .)
    FLOAT           reduce using rule 8 (algoritmo -> comparacion .)
    BOOLEAN         reduce using rule 8 (algoritmo -> comparacion .)
    TRUE            reduce using rule 8 (algoritmo -> comparacion .)
    FALSE           reduce using rule 8 (algoritmo -> comparacion .)
    FIN             reduce using rule 8 (algoritmo -> comparacion .)
    LDER            reduce using rule 8 (algoritmo -> comparacion .)
    ELSE            reduce using rule 8 (algoritmo -> comparacion .)
    ELSEIF          reduce using rule 8 (algoritmo -> comparacion .)


state 9

    (9) algoritmo -> condicionalIF .

    IF              reduce using rule 9 (algoritmo -> condicionalIF .)
    FOR             reduce using rule 9 (algoritmo -> condicionalIF .)
    WHILE           reduce using rule 9 (algoritmo -> condicionalIF .)
    DO              reduce using rule 9 (algoritmo -> condicionalIF .)
    VARIABLE        reduce using rule 9 (algoritmo -> condicionalIF .)
    ECHO            reduce using rule 9 (algoritmo -> condicionalIF .)
    BREAK           reduce using rule 9 (algoritmo -> condicionalIF .)
    STATIC          reduce using rule 9 (algoritmo -> condicionalIF .)
    VAR             reduce using rule 9 (algoritmo -> condicionalIF .)
    GLOBAL          reduce using rule 9 (algoritmo -> condicionalIF .)
    CONST           reduce using rule 9 (algoritmo -> condicionalIF .)
    INTEGER         reduce using rule 9 (algoritmo -> condicionalIF .)
    STRING          reduce using rule 9 (algoritmo -> condicionalIF .)
    FLOAT           reduce using rule 9 (algoritmo -> condicionalIF .)
    BOOLEAN         reduce using rule 9 (algoritmo -> condicionalIF .)
    TRUE            reduce using rule 9 (algoritmo -> condicionalIF .)
    FALSE           reduce using rule 9 (algoritmo -> condicionalIF .)
    FIN             reduce using rule 9 (algoritmo -> condicionalIF .)
    LDER            reduce using rule 9 (algoritmo -> condicionalIF .)
    ELSE            reduce using rule 9 (algoritmo -> condicionalIF .)
    ELSEIF          reduce using rule 9 (algoritmo -> condicionalIF .)


state 10

    (10) algoritmo -> iteracionFOR .

    IF              reduce using rule 10 (algoritmo -> iteracionFOR .)
    FOR             reduce using rule 10 (algoritmo -> iteracionFOR .)
    WHILE           reduce using rule 10 (algoritmo -> iteracionFOR .)
    DO              reduce using rule 10 (algoritmo -> iteracionFOR .)
    VARIABLE        reduce using rule 10 (algoritmo -> iteracionFOR .)
    ECHO            reduce using rule 10 (algoritmo -> iteracionFOR .)
    BREAK           reduce using rule 10 (algoritmo -> iteracionFOR .)
    STATIC          reduce using rule 10 (algoritmo -> iteracionFOR .)
    VAR             reduce using rule 10 (algoritmo -> iteracionFOR .)
    GLOBAL          reduce using rule 10 (algoritmo -> iteracionFOR .)
    CONST           reduce using rule 10 (algoritmo -> iteracionFOR .)
    INTEGER         reduce using rule 10 (algoritmo -> iteracionFOR .)
    STRING          reduce using rule 10 (algoritmo -> iteracionFOR .)
    FLOAT           reduce using rule 10 (algoritmo -> iteracionFOR .)
    BOOLEAN         reduce using rule 10 (algoritmo -> iteracionFOR .)
    TRUE            reduce using rule 10 (algoritmo -> iteracionFOR .)
    FALSE           reduce using rule 10 (algoritmo -> iteracionFOR .)
    FIN             reduce using rule 10 (algoritmo -> iteracionFOR .)
    LDER            reduce using rule 10 (algoritmo -> iteracionFOR .)
    ELSE            reduce using rule 10 (algoritmo -> iteracionFOR .)
    ELSEIF          reduce using rule 10 (algoritmo -> iteracionFOR .)


state 11

    (11) algoritmo -> bucleWHILE .

    IF              reduce using rule 11 (algoritmo -> bucleWHILE .)
    FOR             reduce using rule 11 (algoritmo -> bucleWHILE .)
    WHILE           reduce using rule 11 (algoritmo -> bucleWHILE .)
    DO              reduce using rule 11 (algoritmo -> bucleWHILE .)
    VARIABLE        reduce using rule 11 (algoritmo -> bucleWHILE .)
    ECHO            reduce using rule 11 (algoritmo -> bucleWHILE .)
    BREAK           reduce using rule 11 (algoritmo -> bucleWHILE .)
    STATIC          reduce using rule 11 (algoritmo -> bucleWHILE .)
    VAR             reduce using rule 11 (algoritmo -> bucleWHILE .)
    GLOBAL          reduce using rule 11 (algoritmo -> bucleWHILE .)
    CONST           reduce using rule 11 (algoritmo -> bucleWHILE .)
    INTEGER         reduce using rule 11 (algoritmo -> bucleWHILE .)
    STRING          reduce using rule 11 (algoritmo -> bucleWHILE .)
    FLOAT           reduce using rule 11 (algoritmo -> bucleWHILE .)
    BOOLEAN         reduce using rule 11 (algoritmo -> bucleWHILE .)
    TRUE            reduce using rule 11 (algoritmo -> bucleWHILE .)
    FALSE           reduce using rule 11 (algoritmo -> bucleWHILE .)
    FIN             reduce using rule 11 (algoritmo -> bucleWHILE .)
    LDER            reduce using rule 11 (algoritmo -> bucleWHILE .)
    ELSE            reduce using rule 11 (algoritmo -> bucleWHILE .)
    ELSEIF          reduce using rule 11 (algoritmo -> bucleWHILE .)


state 12

    (12) algoritmo -> bucleDO_WHILE .

    IF              reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    FOR             reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    WHILE           reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    DO              reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    VARIABLE        reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    ECHO            reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    BREAK           reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    STATIC          reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    VAR             reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    GLOBAL          reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    CONST           reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    INTEGER         reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    STRING          reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    FLOAT           reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    BOOLEAN         reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    TRUE            reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    FALSE           reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    FIN             reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    LDER            reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    ELSE            reduce using rule 12 (algoritmo -> bucleDO_WHILE .)
    ELSEIF          reduce using rule 12 (algoritmo -> bucleDO_WHILE .)


state 13

    (13) algoritmo -> indexacion .

    IF              reduce using rule 13 (algoritmo -> indexacion .)
    FOR             reduce using rule 13 (algoritmo -> indexacion .)
    WHILE           reduce using rule 13 (algoritmo -> indexacion .)
    DO              reduce using rule 13 (algoritmo -> indexacion .)
    VARIABLE        reduce using rule 13 (algoritmo -> indexacion .)
    ECHO            reduce using rule 13 (algoritmo -> indexacion .)
    BREAK           reduce using rule 13 (algoritmo -> indexacion .)
    STATIC          reduce using rule 13 (algoritmo -> indexacion .)
    VAR             reduce using rule 13 (algoritmo -> indexacion .)
    GLOBAL          reduce using rule 13 (algoritmo -> indexacion .)
    CONST           reduce using rule 13 (algoritmo -> indexacion .)
    INTEGER         reduce using rule 13 (algoritmo -> indexacion .)
    STRING          reduce using rule 13 (algoritmo -> indexacion .)
    FLOAT           reduce using rule 13 (algoritmo -> indexacion .)
    BOOLEAN         reduce using rule 13 (algoritmo -> indexacion .)
    TRUE            reduce using rule 13 (algoritmo -> indexacion .)
    FALSE           reduce using rule 13 (algoritmo -> indexacion .)
    FIN             reduce using rule 13 (algoritmo -> indexacion .)
    LDER            reduce using rule 13 (algoritmo -> indexacion .)
    ELSE            reduce using rule 13 (algoritmo -> indexacion .)
    ELSEIF          reduce using rule 13 (algoritmo -> indexacion .)


state 14

    (14) algoritmo -> echo .

    IF              reduce using rule 14 (algoritmo -> echo .)
    FOR             reduce using rule 14 (algoritmo -> echo .)
    WHILE           reduce using rule 14 (algoritmo -> echo .)
    DO              reduce using rule 14 (algoritmo -> echo .)
    VARIABLE        reduce using rule 14 (algoritmo -> echo .)
    ECHO            reduce using rule 14 (algoritmo -> echo .)
    BREAK           reduce using rule 14 (algoritmo -> echo .)
    STATIC          reduce using rule 14 (algoritmo -> echo .)
    VAR             reduce using rule 14 (algoritmo -> echo .)
    GLOBAL          reduce using rule 14 (algoritmo -> echo .)
    CONST           reduce using rule 14 (algoritmo -> echo .)
    INTEGER         reduce using rule 14 (algoritmo -> echo .)
    STRING          reduce using rule 14 (algoritmo -> echo .)
    FLOAT           reduce using rule 14 (algoritmo -> echo .)
    BOOLEAN         reduce using rule 14 (algoritmo -> echo .)
    TRUE            reduce using rule 14 (algoritmo -> echo .)
    FALSE           reduce using rule 14 (algoritmo -> echo .)
    FIN             reduce using rule 14 (algoritmo -> echo .)
    LDER            reduce using rule 14 (algoritmo -> echo .)
    ELSE            reduce using rule 14 (algoritmo -> echo .)
    ELSEIF          reduce using rule 14 (algoritmo -> echo .)


state 15

    (15) algoritmo -> terminar .

    IF              reduce using rule 15 (algoritmo -> terminar .)
    FOR             reduce using rule 15 (algoritmo -> terminar .)
    WHILE           reduce using rule 15 (algoritmo -> terminar .)
    DO              reduce using rule 15 (algoritmo -> terminar .)
    VARIABLE        reduce using rule 15 (algoritmo -> terminar .)
    ECHO            reduce using rule 15 (algoritmo -> terminar .)
    BREAK           reduce using rule 15 (algoritmo -> terminar .)
    STATIC          reduce using rule 15 (algoritmo -> terminar .)
    VAR             reduce using rule 15 (algoritmo -> terminar .)
    GLOBAL          reduce using rule 15 (algoritmo -> terminar .)
    CONST           reduce using rule 15 (algoritmo -> terminar .)
    INTEGER         reduce using rule 15 (algoritmo -> terminar .)
    STRING          reduce using rule 15 (algoritmo -> terminar .)
    FLOAT           reduce using rule 15 (algoritmo -> terminar .)
    BOOLEAN         reduce using rule 15 (algoritmo -> terminar .)
    TRUE            reduce using rule 15 (algoritmo -> terminar .)
    FALSE           reduce using rule 15 (algoritmo -> terminar .)
    FIN             reduce using rule 15 (algoritmo -> terminar .)
    LDER            reduce using rule 15 (algoritmo -> terminar .)
    ELSE            reduce using rule 15 (algoritmo -> terminar .)
    ELSEIF          reduce using rule 15 (algoritmo -> terminar .)


state 16

    (16) asignacion -> ambito . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> ambito . multiVariable PTOCO
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 41

    multiVariable                  shift and go to state 40

state 17

    (17) asignacion -> multiVariable . IGUAL expresion PTOCO
    (19) declaracion -> multiVariable . PTOCO

    IGUAL           shift and go to state 42
    PTOCO           shift and go to state 43


state 18

    (26) comparacion -> valor . operadorC expresion PTOCO
    (27) comparacion -> valor . operadorM expresion PTOCO
    (28) comparacion -> valor . operadorL expresion PTOCO
    (45) operadorC -> . MAYOR
    (46) operadorC -> . MENOR
    (47) operadorC -> . COMPARACION
    (48) operadorC -> . IDENTICO
    (49) operadorC -> . DIFERENTE
    (50) operadorC -> . NOIDENTICO
    (51) operadorC -> . MENOROIGUAL
    (52) operadorC -> . MAYOROIGUAL
    (53) operadorC -> . NAVEESPACIAL
    (39) operadorM -> . MAS
    (40) operadorM -> . RESTA
    (41) operadorM -> . PROD
    (42) operadorM -> . DIV
    (43) operadorM -> . MOD
    (44) operadorM -> . POTENCIA
    (55) operadorL -> . AND
    (56) operadorL -> . XOR
    (57) operadorL -> . OR
    (58) operadorL -> . NOT

    MAYOR           shift and go to state 47
    MENOR           shift and go to state 48
    COMPARACION     shift and go to state 49
    IDENTICO        shift and go to state 50
    DIFERENTE       shift and go to state 51
    NOIDENTICO      shift and go to state 52
    MENOROIGUAL     shift and go to state 53
    MAYOROIGUAL     shift and go to state 54
    NAVEESPACIAL    shift and go to state 55
    MAS             shift and go to state 56
    RESTA           shift and go to state 57
    PROD            shift and go to state 58
    DIV             shift and go to state 59
    MOD             shift and go to state 60
    POTENCIA        shift and go to state 61
    AND             shift and go to state 62
    XOR             shift and go to state 63
    OR              shift and go to state 64
    NOT             shift and go to state 65

    operadorC                      shift and go to state 44
    operadorM                      shift and go to state 45
    operadorL                      shift and go to state 46

state 19

    (68) condicionalIF -> IF . PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> IF . PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> IF . PIZQ condicion PDER codigo
    (71) condicionalIF -> IF . PIZQ condicion PDER codigo condicionalELSE

    PIZQ            shift and go to state 66


state 20

    (76) iteracionFOR -> FOR . PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> FOR . PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 67


state 21

    (78) bucleWHILE -> WHILE . PIZQ condicion PDER codigo
    (79) bucleWHILE -> WHILE . PIZQ condicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 68


state 22

    (80) bucleDO_WHILE -> DO . LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> DO . LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER

    LIZQ            shift and go to state 69


state 23

    (82) indexacion -> VARIABLE . CIZQ INTEGER CDER
    (83) indexacion -> VARIABLE . CIZQ RESTA INTEGER CDER
    (84) indexacion -> VARIABLE . CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> VARIABLE . CIZQ RESTA INTEGER CDER FUSIONNULL
    (20) multiVariable -> VARIABLE .
    (21) multiVariable -> VARIABLE . COMA multiVariable
    (63) valor -> VARIABLE .

    CIZQ            shift and go to state 70
    IGUAL           reduce using rule 20 (multiVariable -> VARIABLE .)
    PTOCO           reduce using rule 20 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 71
    MAYOR           reduce using rule 63 (valor -> VARIABLE .)
    MENOR           reduce using rule 63 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 63 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 63 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 63 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 63 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 63 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 63 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 63 (valor -> VARIABLE .)
    MAS             reduce using rule 63 (valor -> VARIABLE .)
    RESTA           reduce using rule 63 (valor -> VARIABLE .)
    PROD            reduce using rule 63 (valor -> VARIABLE .)
    DIV             reduce using rule 63 (valor -> VARIABLE .)
    MOD             reduce using rule 63 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 63 (valor -> VARIABLE .)
    AND             reduce using rule 63 (valor -> VARIABLE .)
    XOR             reduce using rule 63 (valor -> VARIABLE .)
    OR              reduce using rule 63 (valor -> VARIABLE .)
    NOT             reduce using rule 63 (valor -> VARIABLE .)


state 24

    (59) valor -> INTEGER .

    MAYOR           reduce using rule 59 (valor -> INTEGER .)
    MENOR           reduce using rule 59 (valor -> INTEGER .)
    COMPARACION     reduce using rule 59 (valor -> INTEGER .)
    IDENTICO        reduce using rule 59 (valor -> INTEGER .)
    DIFERENTE       reduce using rule 59 (valor -> INTEGER .)
    NOIDENTICO      reduce using rule 59 (valor -> INTEGER .)
    MENOROIGUAL     reduce using rule 59 (valor -> INTEGER .)
    MAYOROIGUAL     reduce using rule 59 (valor -> INTEGER .)
    NAVEESPACIAL    reduce using rule 59 (valor -> INTEGER .)
    MAS             reduce using rule 59 (valor -> INTEGER .)
    RESTA           reduce using rule 59 (valor -> INTEGER .)
    PROD            reduce using rule 59 (valor -> INTEGER .)
    DIV             reduce using rule 59 (valor -> INTEGER .)
    MOD             reduce using rule 59 (valor -> INTEGER .)
    POTENCIA        reduce using rule 59 (valor -> INTEGER .)
    AND             reduce using rule 59 (valor -> INTEGER .)
    XOR             reduce using rule 59 (valor -> INTEGER .)
    OR              reduce using rule 59 (valor -> INTEGER .)
    NOT             reduce using rule 59 (valor -> INTEGER .)
    PTOCO           reduce using rule 59 (valor -> INTEGER .)
    PDER            reduce using rule 59 (valor -> INTEGER .)


state 25

    (86) echo -> ECHO . VARIABLE PTOCO
    (87) echo -> ECHO . expresion PTOCO
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    VARIABLE        shift and go to state 72
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    expresion                      shift and go to state 73
    valor                          shift and go to state 74
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 26

    (54) terminar -> BREAK . PTOCO

    PTOCO           shift and go to state 79


state 27

    (22) ambito -> STATIC .

    VARIABLE        reduce using rule 22 (ambito -> STATIC .)


state 28

    (23) ambito -> VAR .

    VARIABLE        reduce using rule 23 (ambito -> VAR .)


state 29

    (24) ambito -> GLOBAL .

    VARIABLE        reduce using rule 24 (ambito -> GLOBAL .)


state 30

    (25) ambito -> CONST .

    VARIABLE        reduce using rule 25 (ambito -> CONST .)


state 31

    (60) valor -> booleano .

    MAYOR           reduce using rule 60 (valor -> booleano .)
    MENOR           reduce using rule 60 (valor -> booleano .)
    COMPARACION     reduce using rule 60 (valor -> booleano .)
    IDENTICO        reduce using rule 60 (valor -> booleano .)
    DIFERENTE       reduce using rule 60 (valor -> booleano .)
    NOIDENTICO      reduce using rule 60 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 60 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 60 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 60 (valor -> booleano .)
    MAS             reduce using rule 60 (valor -> booleano .)
    RESTA           reduce using rule 60 (valor -> booleano .)
    PROD            reduce using rule 60 (valor -> booleano .)
    DIV             reduce using rule 60 (valor -> booleano .)
    MOD             reduce using rule 60 (valor -> booleano .)
    POTENCIA        reduce using rule 60 (valor -> booleano .)
    AND             reduce using rule 60 (valor -> booleano .)
    XOR             reduce using rule 60 (valor -> booleano .)
    OR              reduce using rule 60 (valor -> booleano .)
    NOT             reduce using rule 60 (valor -> booleano .)


state 32

    (61) valor -> STRING .

    MAYOR           reduce using rule 61 (valor -> STRING .)
    MENOR           reduce using rule 61 (valor -> STRING .)
    COMPARACION     reduce using rule 61 (valor -> STRING .)
    IDENTICO        reduce using rule 61 (valor -> STRING .)
    DIFERENTE       reduce using rule 61 (valor -> STRING .)
    NOIDENTICO      reduce using rule 61 (valor -> STRING .)
    MENOROIGUAL     reduce using rule 61 (valor -> STRING .)
    MAYOROIGUAL     reduce using rule 61 (valor -> STRING .)
    NAVEESPACIAL    reduce using rule 61 (valor -> STRING .)
    MAS             reduce using rule 61 (valor -> STRING .)
    RESTA           reduce using rule 61 (valor -> STRING .)
    PROD            reduce using rule 61 (valor -> STRING .)
    DIV             reduce using rule 61 (valor -> STRING .)
    MOD             reduce using rule 61 (valor -> STRING .)
    POTENCIA        reduce using rule 61 (valor -> STRING .)
    AND             reduce using rule 61 (valor -> STRING .)
    XOR             reduce using rule 61 (valor -> STRING .)
    OR              reduce using rule 61 (valor -> STRING .)
    NOT             reduce using rule 61 (valor -> STRING .)
    PTOCO           reduce using rule 61 (valor -> STRING .)
    PDER            reduce using rule 61 (valor -> STRING .)


state 33

    (62) valor -> FLOAT .

    MAYOR           reduce using rule 62 (valor -> FLOAT .)
    MENOR           reduce using rule 62 (valor -> FLOAT .)
    COMPARACION     reduce using rule 62 (valor -> FLOAT .)
    IDENTICO        reduce using rule 62 (valor -> FLOAT .)
    DIFERENTE       reduce using rule 62 (valor -> FLOAT .)
    NOIDENTICO      reduce using rule 62 (valor -> FLOAT .)
    MENOROIGUAL     reduce using rule 62 (valor -> FLOAT .)
    MAYOROIGUAL     reduce using rule 62 (valor -> FLOAT .)
    NAVEESPACIAL    reduce using rule 62 (valor -> FLOAT .)
    MAS             reduce using rule 62 (valor -> FLOAT .)
    RESTA           reduce using rule 62 (valor -> FLOAT .)
    PROD            reduce using rule 62 (valor -> FLOAT .)
    DIV             reduce using rule 62 (valor -> FLOAT .)
    MOD             reduce using rule 62 (valor -> FLOAT .)
    POTENCIA        reduce using rule 62 (valor -> FLOAT .)
    AND             reduce using rule 62 (valor -> FLOAT .)
    XOR             reduce using rule 62 (valor -> FLOAT .)
    OR              reduce using rule 62 (valor -> FLOAT .)
    NOT             reduce using rule 62 (valor -> FLOAT .)
    PTOCO           reduce using rule 62 (valor -> FLOAT .)
    PDER            reduce using rule 62 (valor -> FLOAT .)


state 34

    (64) valor -> BOOLEAN .

    MAYOR           reduce using rule 64 (valor -> BOOLEAN .)
    MENOR           reduce using rule 64 (valor -> BOOLEAN .)
    COMPARACION     reduce using rule 64 (valor -> BOOLEAN .)
    IDENTICO        reduce using rule 64 (valor -> BOOLEAN .)
    DIFERENTE       reduce using rule 64 (valor -> BOOLEAN .)
    NOIDENTICO      reduce using rule 64 (valor -> BOOLEAN .)
    MENOROIGUAL     reduce using rule 64 (valor -> BOOLEAN .)
    MAYOROIGUAL     reduce using rule 64 (valor -> BOOLEAN .)
    NAVEESPACIAL    reduce using rule 64 (valor -> BOOLEAN .)
    MAS             reduce using rule 64 (valor -> BOOLEAN .)
    RESTA           reduce using rule 64 (valor -> BOOLEAN .)
    PROD            reduce using rule 64 (valor -> BOOLEAN .)
    DIV             reduce using rule 64 (valor -> BOOLEAN .)
    MOD             reduce using rule 64 (valor -> BOOLEAN .)
    POTENCIA        reduce using rule 64 (valor -> BOOLEAN .)
    AND             reduce using rule 64 (valor -> BOOLEAN .)
    XOR             reduce using rule 64 (valor -> BOOLEAN .)
    OR              reduce using rule 64 (valor -> BOOLEAN .)
    NOT             reduce using rule 64 (valor -> BOOLEAN .)
    PTOCO           reduce using rule 64 (valor -> BOOLEAN .)
    PDER            reduce using rule 64 (valor -> BOOLEAN .)


state 35

    (65) booleano -> TRUE .

    MAYOR           reduce using rule 65 (booleano -> TRUE .)
    MENOR           reduce using rule 65 (booleano -> TRUE .)
    COMPARACION     reduce using rule 65 (booleano -> TRUE .)
    IDENTICO        reduce using rule 65 (booleano -> TRUE .)
    DIFERENTE       reduce using rule 65 (booleano -> TRUE .)
    NOIDENTICO      reduce using rule 65 (booleano -> TRUE .)
    MENOROIGUAL     reduce using rule 65 (booleano -> TRUE .)
    MAYOROIGUAL     reduce using rule 65 (booleano -> TRUE .)
    NAVEESPACIAL    reduce using rule 65 (booleano -> TRUE .)
    MAS             reduce using rule 65 (booleano -> TRUE .)
    RESTA           reduce using rule 65 (booleano -> TRUE .)
    PROD            reduce using rule 65 (booleano -> TRUE .)
    DIV             reduce using rule 65 (booleano -> TRUE .)
    MOD             reduce using rule 65 (booleano -> TRUE .)
    POTENCIA        reduce using rule 65 (booleano -> TRUE .)
    AND             reduce using rule 65 (booleano -> TRUE .)
    XOR             reduce using rule 65 (booleano -> TRUE .)
    OR              reduce using rule 65 (booleano -> TRUE .)
    NOT             reduce using rule 65 (booleano -> TRUE .)
    PTOCO           reduce using rule 65 (booleano -> TRUE .)
    PDER            reduce using rule 65 (booleano -> TRUE .)


state 36

    (66) booleano -> FALSE .

    MAYOR           reduce using rule 66 (booleano -> FALSE .)
    MENOR           reduce using rule 66 (booleano -> FALSE .)
    COMPARACION     reduce using rule 66 (booleano -> FALSE .)
    IDENTICO        reduce using rule 66 (booleano -> FALSE .)
    DIFERENTE       reduce using rule 66 (booleano -> FALSE .)
    NOIDENTICO      reduce using rule 66 (booleano -> FALSE .)
    MENOROIGUAL     reduce using rule 66 (booleano -> FALSE .)
    MAYOROIGUAL     reduce using rule 66 (booleano -> FALSE .)
    NAVEESPACIAL    reduce using rule 66 (booleano -> FALSE .)
    MAS             reduce using rule 66 (booleano -> FALSE .)
    RESTA           reduce using rule 66 (booleano -> FALSE .)
    PROD            reduce using rule 66 (booleano -> FALSE .)
    DIV             reduce using rule 66 (booleano -> FALSE .)
    MOD             reduce using rule 66 (booleano -> FALSE .)
    POTENCIA        reduce using rule 66 (booleano -> FALSE .)
    AND             reduce using rule 66 (booleano -> FALSE .)
    XOR             reduce using rule 66 (booleano -> FALSE .)
    OR              reduce using rule 66 (booleano -> FALSE .)
    NOT             reduce using rule 66 (booleano -> FALSE .)
    PTOCO           reduce using rule 66 (booleano -> FALSE .)
    PDER            reduce using rule 66 (booleano -> FALSE .)


state 37

    (1) phpSyntax -> inicio codigo fin .

    $end            reduce using rule 1 (phpSyntax -> inicio codigo fin .)


state 38

    (5) fin -> FIN .

    $end            reduce using rule 5 (fin -> FIN .)


state 39

    (3) codigo -> algoritmo codigo .

    FIN             reduce using rule 3 (codigo -> algoritmo codigo .)
    LDER            reduce using rule 3 (codigo -> algoritmo codigo .)
    ELSE            reduce using rule 3 (codigo -> algoritmo codigo .)
    ELSEIF          reduce using rule 3 (codigo -> algoritmo codigo .)
    IF              reduce using rule 3 (codigo -> algoritmo codigo .)
    FOR             reduce using rule 3 (codigo -> algoritmo codigo .)
    WHILE           reduce using rule 3 (codigo -> algoritmo codigo .)
    DO              reduce using rule 3 (codigo -> algoritmo codigo .)
    VARIABLE        reduce using rule 3 (codigo -> algoritmo codigo .)
    ECHO            reduce using rule 3 (codigo -> algoritmo codigo .)
    BREAK           reduce using rule 3 (codigo -> algoritmo codigo .)
    STATIC          reduce using rule 3 (codigo -> algoritmo codigo .)
    VAR             reduce using rule 3 (codigo -> algoritmo codigo .)
    GLOBAL          reduce using rule 3 (codigo -> algoritmo codigo .)
    CONST           reduce using rule 3 (codigo -> algoritmo codigo .)
    INTEGER         reduce using rule 3 (codigo -> algoritmo codigo .)
    STRING          reduce using rule 3 (codigo -> algoritmo codigo .)
    FLOAT           reduce using rule 3 (codigo -> algoritmo codigo .)
    BOOLEAN         reduce using rule 3 (codigo -> algoritmo codigo .)
    TRUE            reduce using rule 3 (codigo -> algoritmo codigo .)
    FALSE           reduce using rule 3 (codigo -> algoritmo codigo .)


state 40

    (16) asignacion -> ambito multiVariable . IGUAL expresion PTOCO
    (18) declaracion -> ambito multiVariable . PTOCO

    IGUAL           shift and go to state 80
    PTOCO           shift and go to state 81


state 41

    (20) multiVariable -> VARIABLE .
    (21) multiVariable -> VARIABLE . COMA multiVariable

    IGUAL           reduce using rule 20 (multiVariable -> VARIABLE .)
    PTOCO           reduce using rule 20 (multiVariable -> VARIABLE .)
    COMA            shift and go to state 71


state 42

    (17) asignacion -> multiVariable IGUAL . expresion PTOCO
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    expresion                      shift and go to state 82
    valor                          shift and go to state 74
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 43

    (19) declaracion -> multiVariable PTOCO .

    IF              reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    FOR             reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    WHILE           reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    DO              reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    VARIABLE        reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    ECHO            reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    BREAK           reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    STATIC          reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    VAR             reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    GLOBAL          reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    CONST           reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    INTEGER         reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    STRING          reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    FLOAT           reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    BOOLEAN         reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    TRUE            reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    FALSE           reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    FIN             reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    LDER            reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    ELSE            reduce using rule 19 (declaracion -> multiVariable PTOCO .)
    ELSEIF          reduce using rule 19 (declaracion -> multiVariable PTOCO .)


state 44

    (26) comparacion -> valor operadorC . expresion PTOCO
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    valor                          shift and go to state 74
    expresion                      shift and go to state 84
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 45

    (27) comparacion -> valor operadorM . expresion PTOCO
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    valor                          shift and go to state 74
    expresion                      shift and go to state 85
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 46

    (28) comparacion -> valor operadorL . expresion PTOCO
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    valor                          shift and go to state 74
    expresion                      shift and go to state 86
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 47

    (45) operadorC -> MAYOR .

    INTEGER         reduce using rule 45 (operadorC -> MAYOR .)
    STRING          reduce using rule 45 (operadorC -> MAYOR .)
    FLOAT           reduce using rule 45 (operadorC -> MAYOR .)
    VARIABLE        reduce using rule 45 (operadorC -> MAYOR .)
    BOOLEAN         reduce using rule 45 (operadorC -> MAYOR .)
    TRUE            reduce using rule 45 (operadorC -> MAYOR .)
    FALSE           reduce using rule 45 (operadorC -> MAYOR .)


state 48

    (46) operadorC -> MENOR .

    INTEGER         reduce using rule 46 (operadorC -> MENOR .)
    STRING          reduce using rule 46 (operadorC -> MENOR .)
    FLOAT           reduce using rule 46 (operadorC -> MENOR .)
    VARIABLE        reduce using rule 46 (operadorC -> MENOR .)
    BOOLEAN         reduce using rule 46 (operadorC -> MENOR .)
    TRUE            reduce using rule 46 (operadorC -> MENOR .)
    FALSE           reduce using rule 46 (operadorC -> MENOR .)


state 49

    (47) operadorC -> COMPARACION .

    INTEGER         reduce using rule 47 (operadorC -> COMPARACION .)
    STRING          reduce using rule 47 (operadorC -> COMPARACION .)
    FLOAT           reduce using rule 47 (operadorC -> COMPARACION .)
    VARIABLE        reduce using rule 47 (operadorC -> COMPARACION .)
    BOOLEAN         reduce using rule 47 (operadorC -> COMPARACION .)
    TRUE            reduce using rule 47 (operadorC -> COMPARACION .)
    FALSE           reduce using rule 47 (operadorC -> COMPARACION .)


state 50

    (48) operadorC -> IDENTICO .

    INTEGER         reduce using rule 48 (operadorC -> IDENTICO .)
    STRING          reduce using rule 48 (operadorC -> IDENTICO .)
    FLOAT           reduce using rule 48 (operadorC -> IDENTICO .)
    VARIABLE        reduce using rule 48 (operadorC -> IDENTICO .)
    BOOLEAN         reduce using rule 48 (operadorC -> IDENTICO .)
    TRUE            reduce using rule 48 (operadorC -> IDENTICO .)
    FALSE           reduce using rule 48 (operadorC -> IDENTICO .)


state 51

    (49) operadorC -> DIFERENTE .

    INTEGER         reduce using rule 49 (operadorC -> DIFERENTE .)
    STRING          reduce using rule 49 (operadorC -> DIFERENTE .)
    FLOAT           reduce using rule 49 (operadorC -> DIFERENTE .)
    VARIABLE        reduce using rule 49 (operadorC -> DIFERENTE .)
    BOOLEAN         reduce using rule 49 (operadorC -> DIFERENTE .)
    TRUE            reduce using rule 49 (operadorC -> DIFERENTE .)
    FALSE           reduce using rule 49 (operadorC -> DIFERENTE .)


state 52

    (50) operadorC -> NOIDENTICO .

    INTEGER         reduce using rule 50 (operadorC -> NOIDENTICO .)
    STRING          reduce using rule 50 (operadorC -> NOIDENTICO .)
    FLOAT           reduce using rule 50 (operadorC -> NOIDENTICO .)
    VARIABLE        reduce using rule 50 (operadorC -> NOIDENTICO .)
    BOOLEAN         reduce using rule 50 (operadorC -> NOIDENTICO .)
    TRUE            reduce using rule 50 (operadorC -> NOIDENTICO .)
    FALSE           reduce using rule 50 (operadorC -> NOIDENTICO .)


state 53

    (51) operadorC -> MENOROIGUAL .

    INTEGER         reduce using rule 51 (operadorC -> MENOROIGUAL .)
    STRING          reduce using rule 51 (operadorC -> MENOROIGUAL .)
    FLOAT           reduce using rule 51 (operadorC -> MENOROIGUAL .)
    VARIABLE        reduce using rule 51 (operadorC -> MENOROIGUAL .)
    BOOLEAN         reduce using rule 51 (operadorC -> MENOROIGUAL .)
    TRUE            reduce using rule 51 (operadorC -> MENOROIGUAL .)
    FALSE           reduce using rule 51 (operadorC -> MENOROIGUAL .)


state 54

    (52) operadorC -> MAYOROIGUAL .

    INTEGER         reduce using rule 52 (operadorC -> MAYOROIGUAL .)
    STRING          reduce using rule 52 (operadorC -> MAYOROIGUAL .)
    FLOAT           reduce using rule 52 (operadorC -> MAYOROIGUAL .)
    VARIABLE        reduce using rule 52 (operadorC -> MAYOROIGUAL .)
    BOOLEAN         reduce using rule 52 (operadorC -> MAYOROIGUAL .)
    TRUE            reduce using rule 52 (operadorC -> MAYOROIGUAL .)
    FALSE           reduce using rule 52 (operadorC -> MAYOROIGUAL .)


state 55

    (53) operadorC -> NAVEESPACIAL .

    INTEGER         reduce using rule 53 (operadorC -> NAVEESPACIAL .)
    STRING          reduce using rule 53 (operadorC -> NAVEESPACIAL .)
    FLOAT           reduce using rule 53 (operadorC -> NAVEESPACIAL .)
    VARIABLE        reduce using rule 53 (operadorC -> NAVEESPACIAL .)
    BOOLEAN         reduce using rule 53 (operadorC -> NAVEESPACIAL .)
    TRUE            reduce using rule 53 (operadorC -> NAVEESPACIAL .)
    FALSE           reduce using rule 53 (operadorC -> NAVEESPACIAL .)


state 56

    (39) operadorM -> MAS .

    INTEGER         reduce using rule 39 (operadorM -> MAS .)
    STRING          reduce using rule 39 (operadorM -> MAS .)
    FLOAT           reduce using rule 39 (operadorM -> MAS .)
    VARIABLE        reduce using rule 39 (operadorM -> MAS .)
    BOOLEAN         reduce using rule 39 (operadorM -> MAS .)
    TRUE            reduce using rule 39 (operadorM -> MAS .)
    FALSE           reduce using rule 39 (operadorM -> MAS .)


state 57

    (40) operadorM -> RESTA .

    INTEGER         reduce using rule 40 (operadorM -> RESTA .)
    STRING          reduce using rule 40 (operadorM -> RESTA .)
    FLOAT           reduce using rule 40 (operadorM -> RESTA .)
    VARIABLE        reduce using rule 40 (operadorM -> RESTA .)
    BOOLEAN         reduce using rule 40 (operadorM -> RESTA .)
    TRUE            reduce using rule 40 (operadorM -> RESTA .)
    FALSE           reduce using rule 40 (operadorM -> RESTA .)


state 58

    (41) operadorM -> PROD .

    INTEGER         reduce using rule 41 (operadorM -> PROD .)
    STRING          reduce using rule 41 (operadorM -> PROD .)
    FLOAT           reduce using rule 41 (operadorM -> PROD .)
    VARIABLE        reduce using rule 41 (operadorM -> PROD .)
    BOOLEAN         reduce using rule 41 (operadorM -> PROD .)
    TRUE            reduce using rule 41 (operadorM -> PROD .)
    FALSE           reduce using rule 41 (operadorM -> PROD .)


state 59

    (42) operadorM -> DIV .

    INTEGER         reduce using rule 42 (operadorM -> DIV .)
    STRING          reduce using rule 42 (operadorM -> DIV .)
    FLOAT           reduce using rule 42 (operadorM -> DIV .)
    VARIABLE        reduce using rule 42 (operadorM -> DIV .)
    BOOLEAN         reduce using rule 42 (operadorM -> DIV .)
    TRUE            reduce using rule 42 (operadorM -> DIV .)
    FALSE           reduce using rule 42 (operadorM -> DIV .)


state 60

    (43) operadorM -> MOD .

    INTEGER         reduce using rule 43 (operadorM -> MOD .)
    STRING          reduce using rule 43 (operadorM -> MOD .)
    FLOAT           reduce using rule 43 (operadorM -> MOD .)
    VARIABLE        reduce using rule 43 (operadorM -> MOD .)
    BOOLEAN         reduce using rule 43 (operadorM -> MOD .)
    TRUE            reduce using rule 43 (operadorM -> MOD .)
    FALSE           reduce using rule 43 (operadorM -> MOD .)


state 61

    (44) operadorM -> POTENCIA .

    INTEGER         reduce using rule 44 (operadorM -> POTENCIA .)
    STRING          reduce using rule 44 (operadorM -> POTENCIA .)
    FLOAT           reduce using rule 44 (operadorM -> POTENCIA .)
    VARIABLE        reduce using rule 44 (operadorM -> POTENCIA .)
    BOOLEAN         reduce using rule 44 (operadorM -> POTENCIA .)
    TRUE            reduce using rule 44 (operadorM -> POTENCIA .)
    FALSE           reduce using rule 44 (operadorM -> POTENCIA .)


state 62

    (55) operadorL -> AND .

    INTEGER         reduce using rule 55 (operadorL -> AND .)
    STRING          reduce using rule 55 (operadorL -> AND .)
    FLOAT           reduce using rule 55 (operadorL -> AND .)
    VARIABLE        reduce using rule 55 (operadorL -> AND .)
    BOOLEAN         reduce using rule 55 (operadorL -> AND .)
    TRUE            reduce using rule 55 (operadorL -> AND .)
    FALSE           reduce using rule 55 (operadorL -> AND .)


state 63

    (56) operadorL -> XOR .

    INTEGER         reduce using rule 56 (operadorL -> XOR .)
    STRING          reduce using rule 56 (operadorL -> XOR .)
    FLOAT           reduce using rule 56 (operadorL -> XOR .)
    VARIABLE        reduce using rule 56 (operadorL -> XOR .)
    BOOLEAN         reduce using rule 56 (operadorL -> XOR .)
    TRUE            reduce using rule 56 (operadorL -> XOR .)
    FALSE           reduce using rule 56 (operadorL -> XOR .)


state 64

    (57) operadorL -> OR .

    INTEGER         reduce using rule 57 (operadorL -> OR .)
    STRING          reduce using rule 57 (operadorL -> OR .)
    FLOAT           reduce using rule 57 (operadorL -> OR .)
    VARIABLE        reduce using rule 57 (operadorL -> OR .)
    BOOLEAN         reduce using rule 57 (operadorL -> OR .)
    TRUE            reduce using rule 57 (operadorL -> OR .)
    FALSE           reduce using rule 57 (operadorL -> OR .)


state 65

    (58) operadorL -> NOT .

    INTEGER         reduce using rule 58 (operadorL -> NOT .)
    STRING          reduce using rule 58 (operadorL -> NOT .)
    FLOAT           reduce using rule 58 (operadorL -> NOT .)
    VARIABLE        reduce using rule 58 (operadorL -> NOT .)
    BOOLEAN         reduce using rule 58 (operadorL -> NOT .)
    TRUE            reduce using rule 58 (operadorL -> NOT .)
    FALSE           reduce using rule 58 (operadorL -> NOT .)


state 66

    (68) condicionalIF -> IF PIZQ . condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> IF PIZQ . condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> IF PIZQ . condicion PDER codigo
    (71) condicionalIF -> IF PIZQ . condicion PDER codigo condicionalELSE
    (37) condicion -> . expresion_logica
    (38) condicion -> . expresion_comparativa
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    condicion                      shift and go to state 87
    expresion_logica               shift and go to state 88
    expresion_comparativa          shift and go to state 89
    valor                          shift and go to state 90
    booleano                       shift and go to state 91

state 67

    (76) iteracionFOR -> FOR PIZQ . asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> FOR PIZQ . asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable

    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    VARIABLE        shift and go to state 41

    asignacion                     shift and go to state 92
    ambito                         shift and go to state 93
    multiVariable                  shift and go to state 94

state 68

    (78) bucleWHILE -> WHILE PIZQ . condicion PDER codigo
    (79) bucleWHILE -> WHILE PIZQ . condicion PDER LIZQ codigo LDER
    (37) condicion -> . expresion_logica
    (38) condicion -> . expresion_comparativa
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    condicion                      shift and go to state 95
    expresion_logica               shift and go to state 88
    expresion_comparativa          shift and go to state 89
    valor                          shift and go to state 90
    booleano                       shift and go to state 91

state 69

    (80) bucleDO_WHILE -> DO LIZQ . codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> DO LIZQ . codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 96
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 70

    (82) indexacion -> VARIABLE CIZQ . INTEGER CDER
    (83) indexacion -> VARIABLE CIZQ . RESTA INTEGER CDER
    (84) indexacion -> VARIABLE CIZQ . INTEGER CDER FUSIONNULL
    (85) indexacion -> VARIABLE CIZQ . RESTA INTEGER CDER FUSIONNULL

    INTEGER         shift and go to state 97
    RESTA           shift and go to state 98


state 71

    (21) multiVariable -> VARIABLE COMA . multiVariable
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 41

    multiVariable                  shift and go to state 99

state 72

    (86) echo -> ECHO VARIABLE . PTOCO
    (63) valor -> VARIABLE .

  ! shift/reduce conflict for PTOCO resolved as shift
    PTOCO           shift and go to state 100
    MAS             reduce using rule 63 (valor -> VARIABLE .)
    RESTA           reduce using rule 63 (valor -> VARIABLE .)
    PROD            reduce using rule 63 (valor -> VARIABLE .)
    DIV             reduce using rule 63 (valor -> VARIABLE .)
    MOD             reduce using rule 63 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 63 (valor -> VARIABLE .)
    AND             reduce using rule 63 (valor -> VARIABLE .)
    XOR             reduce using rule 63 (valor -> VARIABLE .)
    OR              reduce using rule 63 (valor -> VARIABLE .)
    NOT             reduce using rule 63 (valor -> VARIABLE .)
    MAYOR           reduce using rule 63 (valor -> VARIABLE .)
    MENOR           reduce using rule 63 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 63 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 63 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 63 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 63 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 63 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 63 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 63 (valor -> VARIABLE .)

  ! PTOCO           [ reduce using rule 63 (valor -> VARIABLE .) ]


state 73

    (87) echo -> ECHO expresion . PTOCO

    PTOCO           shift and go to state 101


state 74

    (29) expresion -> valor .
    (33) expresion_aritmetica -> valor . operadorM expresion
    (34) expresion_logica -> valor . operadorL expresion
    (36) expresion_comparativa -> valor . operadorC expresion
    (39) operadorM -> . MAS
    (40) operadorM -> . RESTA
    (41) operadorM -> . PROD
    (42) operadorM -> . DIV
    (43) operadorM -> . MOD
    (44) operadorM -> . POTENCIA
    (55) operadorL -> . AND
    (56) operadorL -> . XOR
    (57) operadorL -> . OR
    (58) operadorL -> . NOT
    (45) operadorC -> . MAYOR
    (46) operadorC -> . MENOR
    (47) operadorC -> . COMPARACION
    (48) operadorC -> . IDENTICO
    (49) operadorC -> . DIFERENTE
    (50) operadorC -> . NOIDENTICO
    (51) operadorC -> . MENOROIGUAL
    (52) operadorC -> . MAYOROIGUAL
    (53) operadorC -> . NAVEESPACIAL

    PTOCO           reduce using rule 29 (expresion -> valor .)
    PDER            reduce using rule 29 (expresion -> valor .)
    MAS             shift and go to state 56
    RESTA           shift and go to state 57
    PROD            shift and go to state 58
    DIV             shift and go to state 59
    MOD             shift and go to state 60
    POTENCIA        shift and go to state 61
    AND             shift and go to state 62
    XOR             shift and go to state 63
    OR              shift and go to state 64
    NOT             shift and go to state 65
    MAYOR           shift and go to state 47
    MENOR           shift and go to state 48
    COMPARACION     shift and go to state 49
    IDENTICO        shift and go to state 50
    DIFERENTE       shift and go to state 51
    NOIDENTICO      shift and go to state 52
    MENOROIGUAL     shift and go to state 53
    MAYOROIGUAL     shift and go to state 54
    NAVEESPACIAL    shift and go to state 55

    operadorM                      shift and go to state 102
    operadorL                      shift and go to state 103
    operadorC                      shift and go to state 104

state 75

    (30) expresion -> expresion_aritmetica .

    PTOCO           reduce using rule 30 (expresion -> expresion_aritmetica .)
    PDER            reduce using rule 30 (expresion -> expresion_aritmetica .)


state 76

    (31) expresion -> expresion_logica .

    PTOCO           reduce using rule 31 (expresion -> expresion_logica .)
    PDER            reduce using rule 31 (expresion -> expresion_logica .)


state 77

    (32) expresion -> expresion_comparativa .

    PTOCO           reduce using rule 32 (expresion -> expresion_comparativa .)
    PDER            reduce using rule 32 (expresion -> expresion_comparativa .)


state 78

    (60) valor -> booleano .
    (35) expresion_logica -> booleano .

  ! reduce/reduce conflict for PTOCO resolved using rule 35 (expresion_logica -> booleano .)
  ! reduce/reduce conflict for PDER resolved using rule 35 (expresion_logica -> booleano .)
    MAS             reduce using rule 60 (valor -> booleano .)
    RESTA           reduce using rule 60 (valor -> booleano .)
    PROD            reduce using rule 60 (valor -> booleano .)
    DIV             reduce using rule 60 (valor -> booleano .)
    MOD             reduce using rule 60 (valor -> booleano .)
    POTENCIA        reduce using rule 60 (valor -> booleano .)
    AND             reduce using rule 60 (valor -> booleano .)
    XOR             reduce using rule 60 (valor -> booleano .)
    OR              reduce using rule 60 (valor -> booleano .)
    NOT             reduce using rule 60 (valor -> booleano .)
    MAYOR           reduce using rule 60 (valor -> booleano .)
    MENOR           reduce using rule 60 (valor -> booleano .)
    COMPARACION     reduce using rule 60 (valor -> booleano .)
    IDENTICO        reduce using rule 60 (valor -> booleano .)
    DIFERENTE       reduce using rule 60 (valor -> booleano .)
    NOIDENTICO      reduce using rule 60 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 60 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 60 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 60 (valor -> booleano .)
    PTOCO           reduce using rule 35 (expresion_logica -> booleano .)
    PDER            reduce using rule 35 (expresion_logica -> booleano .)

  ! PTOCO           [ reduce using rule 60 (valor -> booleano .) ]
  ! PDER            [ reduce using rule 60 (valor -> booleano .) ]


state 79

    (54) terminar -> BREAK PTOCO .

    IF              reduce using rule 54 (terminar -> BREAK PTOCO .)
    FOR             reduce using rule 54 (terminar -> BREAK PTOCO .)
    WHILE           reduce using rule 54 (terminar -> BREAK PTOCO .)
    DO              reduce using rule 54 (terminar -> BREAK PTOCO .)
    VARIABLE        reduce using rule 54 (terminar -> BREAK PTOCO .)
    ECHO            reduce using rule 54 (terminar -> BREAK PTOCO .)
    BREAK           reduce using rule 54 (terminar -> BREAK PTOCO .)
    STATIC          reduce using rule 54 (terminar -> BREAK PTOCO .)
    VAR             reduce using rule 54 (terminar -> BREAK PTOCO .)
    GLOBAL          reduce using rule 54 (terminar -> BREAK PTOCO .)
    CONST           reduce using rule 54 (terminar -> BREAK PTOCO .)
    INTEGER         reduce using rule 54 (terminar -> BREAK PTOCO .)
    STRING          reduce using rule 54 (terminar -> BREAK PTOCO .)
    FLOAT           reduce using rule 54 (terminar -> BREAK PTOCO .)
    BOOLEAN         reduce using rule 54 (terminar -> BREAK PTOCO .)
    TRUE            reduce using rule 54 (terminar -> BREAK PTOCO .)
    FALSE           reduce using rule 54 (terminar -> BREAK PTOCO .)
    FIN             reduce using rule 54 (terminar -> BREAK PTOCO .)
    LDER            reduce using rule 54 (terminar -> BREAK PTOCO .)
    ELSE            reduce using rule 54 (terminar -> BREAK PTOCO .)
    ELSEIF          reduce using rule 54 (terminar -> BREAK PTOCO .)


state 80

    (16) asignacion -> ambito multiVariable IGUAL . expresion PTOCO
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    expresion                      shift and go to state 105
    valor                          shift and go to state 74
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 81

    (18) declaracion -> ambito multiVariable PTOCO .

    IF              reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    FOR             reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    WHILE           reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    DO              reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    VARIABLE        reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    ECHO            reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    BREAK           reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    STATIC          reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    VAR             reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    GLOBAL          reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    CONST           reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    INTEGER         reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    STRING          reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    FLOAT           reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    BOOLEAN         reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    TRUE            reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    FALSE           reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    FIN             reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    LDER            reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    ELSE            reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)
    ELSEIF          reduce using rule 18 (declaracion -> ambito multiVariable PTOCO .)


state 82

    (17) asignacion -> multiVariable IGUAL expresion . PTOCO

    PTOCO           shift and go to state 106


state 83

    (63) valor -> VARIABLE .

    MAS             reduce using rule 63 (valor -> VARIABLE .)
    RESTA           reduce using rule 63 (valor -> VARIABLE .)
    PROD            reduce using rule 63 (valor -> VARIABLE .)
    DIV             reduce using rule 63 (valor -> VARIABLE .)
    MOD             reduce using rule 63 (valor -> VARIABLE .)
    POTENCIA        reduce using rule 63 (valor -> VARIABLE .)
    AND             reduce using rule 63 (valor -> VARIABLE .)
    XOR             reduce using rule 63 (valor -> VARIABLE .)
    OR              reduce using rule 63 (valor -> VARIABLE .)
    NOT             reduce using rule 63 (valor -> VARIABLE .)
    MAYOR           reduce using rule 63 (valor -> VARIABLE .)
    MENOR           reduce using rule 63 (valor -> VARIABLE .)
    COMPARACION     reduce using rule 63 (valor -> VARIABLE .)
    IDENTICO        reduce using rule 63 (valor -> VARIABLE .)
    DIFERENTE       reduce using rule 63 (valor -> VARIABLE .)
    NOIDENTICO      reduce using rule 63 (valor -> VARIABLE .)
    MENOROIGUAL     reduce using rule 63 (valor -> VARIABLE .)
    MAYOROIGUAL     reduce using rule 63 (valor -> VARIABLE .)
    NAVEESPACIAL    reduce using rule 63 (valor -> VARIABLE .)
    PTOCO           reduce using rule 63 (valor -> VARIABLE .)
    PDER            reduce using rule 63 (valor -> VARIABLE .)


state 84

    (26) comparacion -> valor operadorC expresion . PTOCO

    PTOCO           shift and go to state 107


state 85

    (27) comparacion -> valor operadorM expresion . PTOCO

    PTOCO           shift and go to state 108


state 86

    (28) comparacion -> valor operadorL expresion . PTOCO

    PTOCO           shift and go to state 109


state 87

    (68) condicionalIF -> IF PIZQ condicion . PDER LIZQ codigo LDER
    (69) condicionalIF -> IF PIZQ condicion . PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> IF PIZQ condicion . PDER codigo
    (71) condicionalIF -> IF PIZQ condicion . PDER codigo condicionalELSE

    PDER            shift and go to state 110


state 88

    (37) condicion -> expresion_logica .

    PDER            reduce using rule 37 (condicion -> expresion_logica .)
    PTOCO           reduce using rule 37 (condicion -> expresion_logica .)


state 89

    (38) condicion -> expresion_comparativa .

    PDER            reduce using rule 38 (condicion -> expresion_comparativa .)
    PTOCO           reduce using rule 38 (condicion -> expresion_comparativa .)


state 90

    (34) expresion_logica -> valor . operadorL expresion
    (36) expresion_comparativa -> valor . operadorC expresion
    (55) operadorL -> . AND
    (56) operadorL -> . XOR
    (57) operadorL -> . OR
    (58) operadorL -> . NOT
    (45) operadorC -> . MAYOR
    (46) operadorC -> . MENOR
    (47) operadorC -> . COMPARACION
    (48) operadorC -> . IDENTICO
    (49) operadorC -> . DIFERENTE
    (50) operadorC -> . NOIDENTICO
    (51) operadorC -> . MENOROIGUAL
    (52) operadorC -> . MAYOROIGUAL
    (53) operadorC -> . NAVEESPACIAL

    AND             shift and go to state 62
    XOR             shift and go to state 63
    OR              shift and go to state 64
    NOT             shift and go to state 65
    MAYOR           shift and go to state 47
    MENOR           shift and go to state 48
    COMPARACION     shift and go to state 49
    IDENTICO        shift and go to state 50
    DIFERENTE       shift and go to state 51
    NOIDENTICO      shift and go to state 52
    MENOROIGUAL     shift and go to state 53
    MAYOROIGUAL     shift and go to state 54
    NAVEESPACIAL    shift and go to state 55

    operadorL                      shift and go to state 103
    operadorC                      shift and go to state 104

state 91

    (35) expresion_logica -> booleano .
    (60) valor -> booleano .

    PDER            reduce using rule 35 (expresion_logica -> booleano .)
    PTOCO           reduce using rule 35 (expresion_logica -> booleano .)
    AND             reduce using rule 60 (valor -> booleano .)
    XOR             reduce using rule 60 (valor -> booleano .)
    OR              reduce using rule 60 (valor -> booleano .)
    NOT             reduce using rule 60 (valor -> booleano .)
    MAYOR           reduce using rule 60 (valor -> booleano .)
    MENOR           reduce using rule 60 (valor -> booleano .)
    COMPARACION     reduce using rule 60 (valor -> booleano .)
    IDENTICO        reduce using rule 60 (valor -> booleano .)
    DIFERENTE       reduce using rule 60 (valor -> booleano .)
    NOIDENTICO      reduce using rule 60 (valor -> booleano .)
    MENOROIGUAL     reduce using rule 60 (valor -> booleano .)
    MAYOROIGUAL     reduce using rule 60 (valor -> booleano .)
    NAVEESPACIAL    reduce using rule 60 (valor -> booleano .)


state 92

    (76) iteracionFOR -> FOR PIZQ asignacion . condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> FOR PIZQ asignacion . condicion PTOCO adicion PDER LIZQ codigo LDER
    (37) condicion -> . expresion_logica
    (38) condicion -> . expresion_comparativa
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    condicion                      shift and go to state 111
    expresion_logica               shift and go to state 88
    expresion_comparativa          shift and go to state 89
    valor                          shift and go to state 90
    booleano                       shift and go to state 91

state 93

    (16) asignacion -> ambito . multiVariable IGUAL expresion PTOCO
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable

    VARIABLE        shift and go to state 41

    multiVariable                  shift and go to state 112

state 94

    (17) asignacion -> multiVariable . IGUAL expresion PTOCO

    IGUAL           shift and go to state 42


state 95

    (78) bucleWHILE -> WHILE PIZQ condicion . PDER codigo
    (79) bucleWHILE -> WHILE PIZQ condicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 113


state 96

    (80) bucleDO_WHILE -> DO LIZQ codigo . LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> DO LIZQ codigo . LDER WHILE PIZQ condicion PDER LIZQ codigo LDER

    LDER            shift and go to state 114


state 97

    (82) indexacion -> VARIABLE CIZQ INTEGER . CDER
    (84) indexacion -> VARIABLE CIZQ INTEGER . CDER FUSIONNULL

    CDER            shift and go to state 115


state 98

    (83) indexacion -> VARIABLE CIZQ RESTA . INTEGER CDER
    (85) indexacion -> VARIABLE CIZQ RESTA . INTEGER CDER FUSIONNULL

    INTEGER         shift and go to state 116


state 99

    (21) multiVariable -> VARIABLE COMA multiVariable .

    IGUAL           reduce using rule 21 (multiVariable -> VARIABLE COMA multiVariable .)
    PTOCO           reduce using rule 21 (multiVariable -> VARIABLE COMA multiVariable .)


state 100

    (86) echo -> ECHO VARIABLE PTOCO .

    IF              reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    FOR             reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    WHILE           reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    DO              reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    VARIABLE        reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    ECHO            reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    BREAK           reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    STATIC          reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    VAR             reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    GLOBAL          reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    CONST           reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    INTEGER         reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    STRING          reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    FLOAT           reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    BOOLEAN         reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    TRUE            reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    FALSE           reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    FIN             reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    LDER            reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    ELSE            reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)
    ELSEIF          reduce using rule 86 (echo -> ECHO VARIABLE PTOCO .)


state 101

    (87) echo -> ECHO expresion PTOCO .

    IF              reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    FOR             reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    WHILE           reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    DO              reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    VARIABLE        reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    ECHO            reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    BREAK           reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    STATIC          reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    VAR             reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    GLOBAL          reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    CONST           reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    INTEGER         reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    STRING          reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    FLOAT           reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    BOOLEAN         reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    TRUE            reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    FALSE           reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    FIN             reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    LDER            reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    ELSE            reduce using rule 87 (echo -> ECHO expresion PTOCO .)
    ELSEIF          reduce using rule 87 (echo -> ECHO expresion PTOCO .)


state 102

    (33) expresion_aritmetica -> valor operadorM . expresion
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    valor                          shift and go to state 74
    expresion                      shift and go to state 117
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 103

    (34) expresion_logica -> valor operadorL . expresion
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    valor                          shift and go to state 74
    expresion                      shift and go to state 118
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 104

    (36) expresion_comparativa -> valor operadorC . expresion
    (29) expresion -> . valor
    (30) expresion -> . expresion_aritmetica
    (31) expresion -> . expresion_logica
    (32) expresion -> . expresion_comparativa
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (33) expresion_aritmetica -> . valor operadorM expresion
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    valor                          shift and go to state 74
    expresion                      shift and go to state 119
    expresion_aritmetica           shift and go to state 75
    expresion_logica               shift and go to state 76
    expresion_comparativa          shift and go to state 77
    booleano                       shift and go to state 78

state 105

    (16) asignacion -> ambito multiVariable IGUAL expresion . PTOCO

    PTOCO           shift and go to state 120


state 106

    (17) asignacion -> multiVariable IGUAL expresion PTOCO .

    IF              reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FOR             reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    WHILE           reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    DO              reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ECHO            reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    BREAK           reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    STATIC          reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    VAR             reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    CONST           reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    STRING          reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    TRUE            reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FALSE           reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    FIN             reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    LDER            reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ELSE            reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 17 (asignacion -> multiVariable IGUAL expresion PTOCO .)


state 107

    (26) comparacion -> valor operadorC expresion PTOCO .

    IF              reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    FOR             reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    WHILE           reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    DO              reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    VARIABLE        reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    ECHO            reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    BREAK           reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    STATIC          reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    VAR             reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    GLOBAL          reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    CONST           reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    INTEGER         reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    STRING          reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    FLOAT           reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    BOOLEAN         reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    TRUE            reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    FALSE           reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    FIN             reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    LDER            reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    ELSE            reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)
    ELSEIF          reduce using rule 26 (comparacion -> valor operadorC expresion PTOCO .)


state 108

    (27) comparacion -> valor operadorM expresion PTOCO .

    IF              reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    FOR             reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    WHILE           reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    DO              reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    VARIABLE        reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    ECHO            reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    BREAK           reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    STATIC          reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    VAR             reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    GLOBAL          reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    CONST           reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    INTEGER         reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    STRING          reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    FLOAT           reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    BOOLEAN         reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    TRUE            reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    FALSE           reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    FIN             reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    LDER            reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    ELSE            reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)
    ELSEIF          reduce using rule 27 (comparacion -> valor operadorM expresion PTOCO .)


state 109

    (28) comparacion -> valor operadorL expresion PTOCO .

    IF              reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    FOR             reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    WHILE           reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    DO              reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    VARIABLE        reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    ECHO            reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    BREAK           reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    STATIC          reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    VAR             reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    GLOBAL          reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    CONST           reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    INTEGER         reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    STRING          reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    FLOAT           reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    BOOLEAN         reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    TRUE            reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    FALSE           reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    FIN             reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    LDER            reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    ELSE            reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)
    ELSEIF          reduce using rule 28 (comparacion -> valor operadorL expresion PTOCO .)


state 110

    (68) condicionalIF -> IF PIZQ condicion PDER . LIZQ codigo LDER
    (69) condicionalIF -> IF PIZQ condicion PDER . LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> IF PIZQ condicion PDER . codigo
    (71) condicionalIF -> IF PIZQ condicion PDER . codigo condicionalELSE
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    LIZQ            shift and go to state 121
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 122
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 111

    (76) iteracionFOR -> FOR PIZQ asignacion condicion . PTOCO adicion PDER codigo
    (77) iteracionFOR -> FOR PIZQ asignacion condicion . PTOCO adicion PDER LIZQ codigo LDER

    PTOCO           shift and go to state 123


state 112

    (16) asignacion -> ambito multiVariable . IGUAL expresion PTOCO

    IGUAL           shift and go to state 80


state 113

    (78) bucleWHILE -> WHILE PIZQ condicion PDER . codigo
    (79) bucleWHILE -> WHILE PIZQ condicion PDER . LIZQ codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    LIZQ            shift and go to state 125
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 124
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 114

    (80) bucleDO_WHILE -> DO LIZQ codigo LDER . WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> DO LIZQ codigo LDER . WHILE PIZQ condicion PDER LIZQ codigo LDER

    WHILE           shift and go to state 126


state 115

    (82) indexacion -> VARIABLE CIZQ INTEGER CDER .
    (84) indexacion -> VARIABLE CIZQ INTEGER CDER . FUSIONNULL

    IF              reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FOR             reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    WHILE           reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    DO              reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VARIABLE        reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ECHO            reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    BREAK           reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    STATIC          reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    VAR             reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    GLOBAL          reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    CONST           reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    INTEGER         reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    STRING          reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FLOAT           reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    BOOLEAN         reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    TRUE            reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FALSE           reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FIN             reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    LDER            reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ELSE            reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    ELSEIF          reduce using rule 82 (indexacion -> VARIABLE CIZQ INTEGER CDER .)
    FUSIONNULL      shift and go to state 127


state 116

    (83) indexacion -> VARIABLE CIZQ RESTA INTEGER . CDER
    (85) indexacion -> VARIABLE CIZQ RESTA INTEGER . CDER FUSIONNULL

    CDER            shift and go to state 128


state 117

    (33) expresion_aritmetica -> valor operadorM expresion .

    PTOCO           reduce using rule 33 (expresion_aritmetica -> valor operadorM expresion .)
    PDER            reduce using rule 33 (expresion_aritmetica -> valor operadorM expresion .)


state 118

    (34) expresion_logica -> valor operadorL expresion .

    PTOCO           reduce using rule 34 (expresion_logica -> valor operadorL expresion .)
    PDER            reduce using rule 34 (expresion_logica -> valor operadorL expresion .)


state 119

    (36) expresion_comparativa -> valor operadorC expresion .

    PTOCO           reduce using rule 36 (expresion_comparativa -> valor operadorC expresion .)
    PDER            reduce using rule 36 (expresion_comparativa -> valor operadorC expresion .)


state 120

    (16) asignacion -> ambito multiVariable IGUAL expresion PTOCO .

    IF              reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FOR             reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    WHILE           reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    DO              reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VARIABLE        reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ECHO            reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    BREAK           reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    STATIC          reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    VAR             reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    GLOBAL          reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    CONST           reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    INTEGER         reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    STRING          reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FLOAT           reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    BOOLEAN         reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    TRUE            reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FALSE           reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    FIN             reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    LDER            reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ELSE            reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)
    ELSEIF          reduce using rule 16 (asignacion -> ambito multiVariable IGUAL expresion PTOCO .)


state 121

    (68) condicionalIF -> IF PIZQ condicion PDER LIZQ . codigo LDER
    (69) condicionalIF -> IF PIZQ condicion PDER LIZQ . codigo LDER condicionalELSE
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 129
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 122

    (70) condicionalIF -> IF PIZQ condicion PDER codigo .
    (71) condicionalIF -> IF PIZQ condicion PDER codigo . condicionalELSE
    (72) condicionalELSE -> . ELSE LIZQ codigo LDER
    (73) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (74) condicionalELSE -> . ELSE codigo
    (75) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    IF              reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FOR             reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    DO              reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    VAR             reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    CONST           reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    STRING          reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    FIN             reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    LDER            reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .)
    ELSE            shift and go to state 131
    ELSEIF          shift and go to state 132

  ! ELSE            [ reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .) ]
  ! ELSEIF          [ reduce using rule 70 (condicionalIF -> IF PIZQ condicion PDER codigo .) ]

    condicionalELSE                shift and go to state 130

state 123

    (76) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO . adicion PDER codigo
    (77) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO . adicion PDER LIZQ codigo LDER
    (67) adicion -> . MAS MAS VARIABLE

    MAS             shift and go to state 134

    adicion                        shift and go to state 133

state 124

    (78) bucleWHILE -> WHILE PIZQ condicion PDER codigo .

    IF              reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FOR             reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    DO              reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    VAR             reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    CONST           reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    STRING          reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    FIN             reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    LDER            reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ELSE            reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)
    ELSEIF          reduce using rule 78 (bucleWHILE -> WHILE PIZQ condicion PDER codigo .)


state 125

    (79) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ . codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 135
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 126

    (80) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE . PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE . PIZQ condicion PDER LIZQ codigo LDER

    PIZQ            shift and go to state 136


state 127

    (84) indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .

    IF              reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FOR             reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    WHILE           reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    DO              reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VARIABLE        reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ECHO            reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    BREAK           reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    STATIC          reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    VAR             reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    GLOBAL          reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    CONST           reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    INTEGER         reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    STRING          reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FLOAT           reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    BOOLEAN         reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    TRUE            reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FALSE           reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    FIN             reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    LDER            reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ELSE            reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)
    ELSEIF          reduce using rule 84 (indexacion -> VARIABLE CIZQ INTEGER CDER FUSIONNULL .)


state 128

    (83) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .
    (85) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER . FUSIONNULL

    IF              reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FOR             reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    WHILE           reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    DO              reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VARIABLE        reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ECHO            reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    BREAK           reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    STATIC          reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    VAR             reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    GLOBAL          reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    CONST           reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    INTEGER         reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    STRING          reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FLOAT           reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    BOOLEAN         reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    TRUE            reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FALSE           reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FIN             reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    LDER            reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ELSE            reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    ELSEIF          reduce using rule 83 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER .)
    FUSIONNULL      shift and go to state 137


state 129

    (68) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo . LDER
    (69) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo . LDER condicionalELSE

    LDER            shift and go to state 138


state 130

    (71) condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .

    IF              reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FOR             reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    WHILE           reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    DO              reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLE        reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ECHO            reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    BREAK           reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    STATIC          reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    VAR             reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    GLOBAL          reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    CONST           reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    INTEGER         reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    STRING          reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FLOAT           reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    BOOLEAN         reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    TRUE            reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FALSE           reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    FIN             reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    LDER            reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ELSE            reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)
    ELSEIF          reduce using rule 71 (condicionalIF -> IF PIZQ condicion PDER codigo condicionalELSE .)


state 131

    (72) condicionalELSE -> ELSE . LIZQ codigo LDER
    (74) condicionalELSE -> ELSE . codigo
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    LIZQ            shift and go to state 139
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 140
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 132

    (73) condicionalELSE -> ELSEIF . PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalELSE -> ELSEIF . PIZQ condicion PDER codigo condicionalELSE

    PIZQ            shift and go to state 141


state 133

    (76) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion . PDER codigo
    (77) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 142


state 134

    (67) adicion -> MAS . MAS VARIABLE

    MAS             shift and go to state 143


state 135

    (79) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 144


state 136

    (80) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ . condicion PDER codigo
    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ . condicion PDER LIZQ codigo LDER
    (37) condicion -> . expresion_logica
    (38) condicion -> . expresion_comparativa
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    condicion                      shift and go to state 145
    expresion_logica               shift and go to state 88
    expresion_comparativa          shift and go to state 89
    valor                          shift and go to state 90
    booleano                       shift and go to state 91

state 137

    (85) indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .

    IF              reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FOR             reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    WHILE           reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    DO              reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VARIABLE        reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ECHO            reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    BREAK           reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    STATIC          reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    VAR             reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    GLOBAL          reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    CONST           reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    INTEGER         reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    STRING          reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FLOAT           reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    BOOLEAN         reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    TRUE            reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FALSE           reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    FIN             reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    LDER            reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ELSE            reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)
    ELSEIF          reduce using rule 85 (indexacion -> VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL .)


state 138

    (68) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .
    (69) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER . condicionalELSE
    (72) condicionalELSE -> . ELSE LIZQ codigo LDER
    (73) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (74) condicionalELSE -> . ELSE codigo
    (75) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

  ! shift/reduce conflict for ELSE resolved as shift
  ! shift/reduce conflict for ELSEIF resolved as shift
    IF              reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            shift and go to state 131
    ELSEIF          shift and go to state 132

  ! ELSE            [ reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .) ]
  ! ELSEIF          [ reduce using rule 68 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER .) ]

    condicionalELSE                shift and go to state 146

state 139

    (72) condicionalELSE -> ELSE LIZQ . codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 147
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 140

    (74) condicionalELSE -> ELSE codigo .

    FIN             reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    LDER            reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    ELSE            reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    ELSEIF          reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    IF              reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    FOR             reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    WHILE           reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    DO              reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    VARIABLE        reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    ECHO            reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    BREAK           reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    STATIC          reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    VAR             reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    GLOBAL          reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    CONST           reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    INTEGER         reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    STRING          reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    FLOAT           reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    BOOLEAN         reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    TRUE            reduce using rule 74 (condicionalELSE -> ELSE codigo .)
    FALSE           reduce using rule 74 (condicionalELSE -> ELSE codigo .)


state 141

    (73) condicionalELSE -> ELSEIF PIZQ . condicion PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalELSE -> ELSEIF PIZQ . condicion PDER codigo condicionalELSE
    (37) condicion -> . expresion_logica
    (38) condicion -> . expresion_comparativa
    (34) expresion_logica -> . valor operadorL expresion
    (35) expresion_logica -> . booleano
    (36) expresion_comparativa -> . valor operadorC expresion
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    VARIABLE        shift and go to state 83
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    condicion                      shift and go to state 148
    expresion_logica               shift and go to state 88
    expresion_comparativa          shift and go to state 89
    valor                          shift and go to state 90
    booleano                       shift and go to state 91

state 142

    (76) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER . codigo
    (77) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER . LIZQ codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    LIZQ            shift and go to state 150
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    asignacion                     shift and go to state 6
    codigo                         shift and go to state 149
    algoritmo                      shift and go to state 5
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 143

    (67) adicion -> MAS MAS . VARIABLE

    VARIABLE        shift and go to state 151


state 144

    (79) bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .

    IF              reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 79 (bucleWHILE -> WHILE PIZQ condicion PDER LIZQ codigo LDER .)


state 145

    (80) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion . PDER codigo
    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion . PDER LIZQ codigo LDER

    PDER            shift and go to state 152


state 146

    (69) condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .

    IF              reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FOR             reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    WHILE           reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    DO              reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLE        reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ECHO            reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BREAK           reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STATIC          reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VAR             reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GLOBAL          reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CONST           reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    INTEGER         reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STRING          reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FLOAT           reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BOOLEAN         reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    TRUE            reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FALSE           reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FIN             reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LDER            reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSE            reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSEIF          reduce using rule 69 (condicionalIF -> IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)


state 147

    (72) condicionalELSE -> ELSE LIZQ codigo . LDER

    LDER            shift and go to state 153


state 148

    (73) condicionalELSE -> ELSEIF PIZQ condicion . PDER LIZQ codigo LDER condicionalELSE
    (75) condicionalELSE -> ELSEIF PIZQ condicion . PDER codigo condicionalELSE

    PDER            shift and go to state 154


state 149

    (76) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .

    IF              reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FOR             reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    WHILE           reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    DO              reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VARIABLE        reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ECHO            reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    BREAK           reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    STATIC          reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    VAR             reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    GLOBAL          reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    CONST           reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    INTEGER         reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    STRING          reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FLOAT           reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    BOOLEAN         reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    TRUE            reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FALSE           reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    FIN             reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    LDER            reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ELSE            reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)
    ELSEIF          reduce using rule 76 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER codigo .)


state 150

    (77) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ . codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    asignacion                     shift and go to state 6
    codigo                         shift and go to state 155
    algoritmo                      shift and go to state 5
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 151

    (67) adicion -> MAS MAS VARIABLE .

    PDER            reduce using rule 67 (adicion -> MAS MAS VARIABLE .)


state 152

    (80) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER . codigo
    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER . LIZQ codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    LIZQ            shift and go to state 156
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 157
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 153

    (72) condicionalELSE -> ELSE LIZQ codigo LDER .

    FIN             reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    LDER            reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ELSE            reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ELSEIF          reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    IF              reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FOR             reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    WHILE           reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    DO              reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VARIABLE        reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    ECHO            reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    BREAK           reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    STATIC          reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    VAR             reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    GLOBAL          reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    CONST           reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    INTEGER         reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    STRING          reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FLOAT           reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    TRUE            reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)
    FALSE           reduce using rule 72 (condicionalELSE -> ELSE LIZQ codigo LDER .)


state 154

    (73) condicionalELSE -> ELSEIF PIZQ condicion PDER . LIZQ codigo LDER condicionalELSE
    (75) condicionalELSE -> ELSEIF PIZQ condicion PDER . codigo condicionalELSE
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    LIZQ            shift and go to state 158
    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 159
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 155

    (77) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 160


state 156

    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ . codigo LDER
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 161
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 157

    (80) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .

    IF              reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FOR             reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    WHILE           reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    DO              reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VARIABLE        reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ECHO            reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    BREAK           reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    STATIC          reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    VAR             reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    GLOBAL          reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    CONST           reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    INTEGER         reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    STRING          reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FLOAT           reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    BOOLEAN         reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    TRUE            reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FALSE           reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    FIN             reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    LDER            reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ELSE            reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)
    ELSEIF          reduce using rule 80 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo .)


state 158

    (73) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ . codigo LDER condicionalELSE
    (2) codigo -> . algoritmo
    (3) codigo -> . algoritmo codigo
    (6) algoritmo -> . asignacion
    (7) algoritmo -> . declaracion
    (8) algoritmo -> . comparacion
    (9) algoritmo -> . condicionalIF
    (10) algoritmo -> . iteracionFOR
    (11) algoritmo -> . bucleWHILE
    (12) algoritmo -> . bucleDO_WHILE
    (13) algoritmo -> . indexacion
    (14) algoritmo -> . echo
    (15) algoritmo -> . terminar
    (16) asignacion -> . ambito multiVariable IGUAL expresion PTOCO
    (17) asignacion -> . multiVariable IGUAL expresion PTOCO
    (18) declaracion -> . ambito multiVariable PTOCO
    (19) declaracion -> . multiVariable PTOCO
    (26) comparacion -> . valor operadorC expresion PTOCO
    (27) comparacion -> . valor operadorM expresion PTOCO
    (28) comparacion -> . valor operadorL expresion PTOCO
    (68) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER
    (69) condicionalIF -> . IF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (70) condicionalIF -> . IF PIZQ condicion PDER codigo
    (71) condicionalIF -> . IF PIZQ condicion PDER codigo condicionalELSE
    (76) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER codigo
    (77) iteracionFOR -> . FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER
    (78) bucleWHILE -> . WHILE PIZQ condicion PDER codigo
    (79) bucleWHILE -> . WHILE PIZQ condicion PDER LIZQ codigo LDER
    (80) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER codigo
    (81) bucleDO_WHILE -> . DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER
    (82) indexacion -> . VARIABLE CIZQ INTEGER CDER
    (83) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER
    (84) indexacion -> . VARIABLE CIZQ INTEGER CDER FUSIONNULL
    (85) indexacion -> . VARIABLE CIZQ RESTA INTEGER CDER FUSIONNULL
    (86) echo -> . ECHO VARIABLE PTOCO
    (87) echo -> . ECHO expresion PTOCO
    (54) terminar -> . BREAK PTOCO
    (22) ambito -> . STATIC
    (23) ambito -> . VAR
    (24) ambito -> . GLOBAL
    (25) ambito -> . CONST
    (20) multiVariable -> . VARIABLE
    (21) multiVariable -> . VARIABLE COMA multiVariable
    (59) valor -> . INTEGER
    (60) valor -> . booleano
    (61) valor -> . STRING
    (62) valor -> . FLOAT
    (63) valor -> . VARIABLE
    (64) valor -> . BOOLEAN
    (65) booleano -> . TRUE
    (66) booleano -> . FALSE

    IF              shift and go to state 19
    FOR             shift and go to state 20
    WHILE           shift and go to state 21
    DO              shift and go to state 22
    VARIABLE        shift and go to state 23
    ECHO            shift and go to state 25
    BREAK           shift and go to state 26
    STATIC          shift and go to state 27
    VAR             shift and go to state 28
    GLOBAL          shift and go to state 29
    CONST           shift and go to state 30
    INTEGER         shift and go to state 24
    STRING          shift and go to state 32
    FLOAT           shift and go to state 33
    BOOLEAN         shift and go to state 34
    TRUE            shift and go to state 35
    FALSE           shift and go to state 36

    codigo                         shift and go to state 162
    algoritmo                      shift and go to state 5
    asignacion                     shift and go to state 6
    declaracion                    shift and go to state 7
    comparacion                    shift and go to state 8
    condicionalIF                  shift and go to state 9
    iteracionFOR                   shift and go to state 10
    bucleWHILE                     shift and go to state 11
    bucleDO_WHILE                  shift and go to state 12
    indexacion                     shift and go to state 13
    echo                           shift and go to state 14
    terminar                       shift and go to state 15
    ambito                         shift and go to state 16
    multiVariable                  shift and go to state 17
    valor                          shift and go to state 18
    booleano                       shift and go to state 31

state 159

    (75) condicionalELSE -> ELSEIF PIZQ condicion PDER codigo . condicionalELSE
    (72) condicionalELSE -> . ELSE LIZQ codigo LDER
    (73) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (74) condicionalELSE -> . ELSE codigo
    (75) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

    ELSE            shift and go to state 131
    ELSEIF          shift and go to state 132

    condicionalELSE                shift and go to state 163

state 160

    (77) iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .

    IF              reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 77 (iteracionFOR -> FOR PIZQ asignacion condicion PTOCO adicion PDER LIZQ codigo LDER .)


state 161

    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo . LDER

    LDER            shift and go to state 164


state 162

    (73) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo . LDER condicionalELSE

    LDER            shift and go to state 165


state 163

    (75) condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .

    FIN             reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    LDER            reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ELSE            reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ELSEIF          reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    IF              reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FOR             reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    WHILE           reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    DO              reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VARIABLE        reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    ECHO            reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    BREAK           reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    STATIC          reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    VAR             reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    GLOBAL          reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    CONST           reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    INTEGER         reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    STRING          reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FLOAT           reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    BOOLEAN         reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    TRUE            reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)
    FALSE           reduce using rule 75 (condicionalELSE -> ELSEIF PIZQ condicion PDER codigo condicionalELSE .)


state 164

    (81) bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .

    IF              reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FOR             reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    WHILE           reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    DO              reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VARIABLE        reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ECHO            reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BREAK           reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STATIC          reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    VAR             reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    GLOBAL          reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    CONST           reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    INTEGER         reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    STRING          reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FLOAT           reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    BOOLEAN         reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    TRUE            reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FALSE           reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    FIN             reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    LDER            reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSE            reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)
    ELSEIF          reduce using rule 81 (bucleDO_WHILE -> DO LIZQ codigo LDER WHILE PIZQ condicion PDER LIZQ codigo LDER .)


state 165

    (73) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER . condicionalELSE
    (72) condicionalELSE -> . ELSE LIZQ codigo LDER
    (73) condicionalELSE -> . ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE
    (74) condicionalELSE -> . ELSE codigo
    (75) condicionalELSE -> . ELSEIF PIZQ condicion PDER codigo condicionalELSE

    ELSE            shift and go to state 131
    ELSEIF          shift and go to state 132

    condicionalELSE                shift and go to state 166

state 166

    (73) condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .

    FIN             reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    LDER            reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSE            reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ELSEIF          reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    IF              reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FOR             reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    WHILE           reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    DO              reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VARIABLE        reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    ECHO            reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BREAK           reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STATIC          reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    VAR             reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    GLOBAL          reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    CONST           reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    INTEGER         reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    STRING          reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FLOAT           reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    BOOLEAN         reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    TRUE            reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)
    FALSE           reduce using rule 73 (condicionalELSE -> ELSEIF PIZQ condicion PDER LIZQ codigo LDER condicionalELSE .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 5 resolved as shift
WARNING: shift/reduce conflict for FOR in state 5 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 5 resolved as shift
WARNING: shift/reduce conflict for DO in state 5 resolved as shift
WARNING: shift/reduce conflict for VARIABLE in state 5 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 5 resolved as shift
WARNING: shift/reduce conflict for BREAK in state 5 resolved as shift
WARNING: shift/reduce conflict for STATIC in state 5 resolved as shift
WARNING: shift/reduce conflict for VAR in state 5 resolved as shift
WARNING: shift/reduce conflict for GLOBAL in state 5 resolved as shift
WARNING: shift/reduce conflict for CONST in state 5 resolved as shift
WARNING: shift/reduce conflict for INTEGER in state 5 resolved as shift
WARNING: shift/reduce conflict for STRING in state 5 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 5 resolved as shift
WARNING: shift/reduce conflict for BOOLEAN in state 5 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 5 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 5 resolved as shift
WARNING: shift/reduce conflict for PTOCO in state 72 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 122 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 122 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 138 resolved as shift
WARNING: shift/reduce conflict for ELSEIF in state 138 resolved as shift
WARNING: reduce/reduce conflict in state 78 resolved using rule (expresion_logica -> booleano)
WARNING: rejected rule (valor -> booleano) in state 78
